/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var WebDNN;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@protobufjs/aspromise/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@protobufjs/aspromise/index.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/@protobufjs/aspromise/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/base64/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@protobufjs/base64/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/@protobufjs/base64/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/eventemitter/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@protobufjs/eventemitter/index.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/@protobufjs/eventemitter/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/float/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@protobufjs/float/index.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/@protobufjs/float/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/inquire/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@protobufjs/inquire/index.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
eval("\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/@protobufjs/inquire/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/pool/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/pool/index.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/@protobufjs/pool/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/utf8/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/utf8/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/@protobufjs/utf8/index.js?");

/***/ }),

/***/ "./node_modules/long/src/long.js":
/*!***************************************!*\
  !*** ./node_modules/long/src/long.js ***!
  \***************************************/
/***/ ((module) => {

eval("module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/long/src/long.js?");

/***/ }),

/***/ "./node_modules/onnx-proto/dist/onnx.js":
/*!**********************************************!*\
  !*** ./node_modules/onnx-proto/dist/onnx.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\n\nvar $protobuf = __webpack_require__(/*! protobufjs/minimal */ \"./node_modules/protobufjs/minimal.js\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/onnx-proto/dist/onnx.js?");

/***/ }),

/***/ "./node_modules/pako/index.js":
/*!************************************!*\
  !*** ./node_modules/pako/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Top level file is just a mixin of submodules & constants\n\n\nconst { Deflate, deflate, deflateRaw, gzip } = __webpack_require__(/*! ./lib/deflate */ \"./node_modules/pako/lib/deflate.js\");\n\nconst { Inflate, inflate, inflateRaw, ungzip } = __webpack_require__(/*! ./lib/inflate */ \"./node_modules/pako/lib/inflate.js\");\n\nconst constants = __webpack_require__(/*! ./lib/zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\nmodule.exports.Deflate = Deflate;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateRaw = deflateRaw;\nmodule.exports.gzip = gzip;\nmodule.exports.Inflate = Inflate;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateRaw = inflateRaw;\nmodule.exports.ungzip = ungzip;\nmodule.exports.constants = constants;\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/pako/index.js?");

/***/ }),

/***/ "./node_modules/pako/lib/deflate.js":
/*!******************************************!*\
  !*** ./node_modules/pako/lib/deflate.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n\nconst zlib_deflate = __webpack_require__(/*! ./zlib/deflate */ \"./node_modules/pako/lib/zlib/deflate.js\");\nconst utils        = __webpack_require__(/*! ./utils/common */ \"./node_modules/pako/lib/utils/common.js\");\nconst strings      = __webpack_require__(/*! ./utils/strings */ \"./node_modules/pako/lib/utils/strings.js\");\nconst msg          = __webpack_require__(/*! ./zlib/messages */ \"./node_modules/pako/lib/zlib/messages.js\");\nconst ZStream      = __webpack_require__(/*! ./zlib/zstream */ \"./node_modules/pako/lib/zlib/zstream.js\");\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED\n} = __webpack_require__(/*! ./zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  let status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = zlib_deflate.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = zlib_deflate.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    this.result = utils.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  const deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nmodule.exports.Deflate = Deflate;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateRaw = deflateRaw;\nmodule.exports.gzip = gzip;\nmodule.exports.constants = __webpack_require__(/*! ./zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/pako/lib/deflate.js?");

/***/ }),

/***/ "./node_modules/pako/lib/inflate.js":
/*!******************************************!*\
  !*** ./node_modules/pako/lib/inflate.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n\nconst zlib_inflate = __webpack_require__(/*! ./zlib/inflate */ \"./node_modules/pako/lib/zlib/inflate.js\");\nconst utils        = __webpack_require__(/*! ./utils/common */ \"./node_modules/pako/lib/utils/common.js\");\nconst strings      = __webpack_require__(/*! ./utils/strings */ \"./node_modules/pako/lib/utils/strings.js\");\nconst msg          = __webpack_require__(/*! ./zlib/messages */ \"./node_modules/pako/lib/zlib/messages.js\");\nconst ZStream      = __webpack_require__(/*! ./zlib/zstream */ \"./node_modules/pako/lib/zlib/zstream.js\");\nconst GZheader     = __webpack_require__(/*! ./zlib/gzheader */ \"./node_modules/pako/lib/zlib/gzheader.js\");\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = __webpack_require__(/*! ./zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  this.options = utils.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  let status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = zlib_inflate.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      zlib_inflate.inflateReset(strm);\n      status = zlib_inflate.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = zlib_inflate.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  const inflator = new Inflate(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || msg[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nmodule.exports.Inflate = Inflate;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateRaw = inflateRaw;\nmodule.exports.ungzip = inflate;\nmodule.exports.constants = __webpack_require__(/*! ./zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/pako/lib/inflate.js?");

/***/ }),

/***/ "./node_modules/pako/lib/utils/common.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/utils/common.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nmodule.exports.assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nmodule.exports.flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/pako/lib/utils/common.js?");

/***/ }),

/***/ "./node_modules/pako/lib/utils/strings.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/utils/strings.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("// String encode/decode helpers\n\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nmodule.exports.string2buf = (str) => {\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nmodule.exports.buf2string = (buf, max) => {\n  let i, out;\n  const len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nmodule.exports.utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/pako/lib/utils/strings.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/adler32.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/adler32.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nmodule.exports = adler32;\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/pako/lib/zlib/adler32.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/pako/lib/zlib/constants.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/pako/lib/zlib/constants.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/crc32.js":
/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/crc32.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nmodule.exports = crc32;\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/pako/lib/zlib/crc32.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/deflate.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/deflate.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = __webpack_require__(/*! ./trees */ \"./node_modules/pako/lib/zlib/trees.js\");\nconst adler32 = __webpack_require__(/*! ./adler32 */ \"./node_modules/pako/lib/zlib/adler32.js\");\nconst crc32   = __webpack_require__(/*! ./crc32 */ \"./node_modules/pako/lib/zlib/crc32.js\");\nconst msg     = __webpack_require__(/*! ./messages */ \"./node_modules/pako/lib/zlib/messages.js\");\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_BLOCK,\n  Z_OK, Z_STREAM_END, Z_STREAM_ERROR, Z_DATA_ERROR, Z_BUF_ERROR,\n  Z_DEFAULT_COMPRESSION,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY,\n  Z_UNKNOWN,\n  Z_DEFLATED\n} = __webpack_require__(/*! ./constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE = 42;\nconst EXTRA_STATE = 69;\nconst NAME_STATE = 73;\nconst COMMENT_STATE = 91;\nconst HCRC_STATE = 103;\nconst BUSY_STATE = 113;\nconst FINISH_STATE = 666;\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = msg[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  let max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    const max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n};\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  _tr_init(s);\n  return Z_OK;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n};\n\n\nconst deflate = (strm, flush) => {\n\n  let beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n        );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      let header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      let level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    let bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  const status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n};\n\n\nmodule.exports.deflateInit = deflateInit;\nmodule.exports.deflateInit2 = deflateInit2;\nmodule.exports.deflateReset = deflateReset;\nmodule.exports.deflateResetKeep = deflateResetKeep;\nmodule.exports.deflateSetHeader = deflateSetHeader;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateEnd = deflateEnd;\nmodule.exports.deflateSetDictionary = deflateSetDictionary;\nmodule.exports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/pako/lib/zlib/deflate.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/gzheader.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/gzheader.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/pako/lib/zlib/gzheader.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/inffast.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inffast.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD = 30;       /* got a data error -- remain here until reset */\nconst TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/pako/lib/zlib/inffast.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/inflate.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inflate.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32       = __webpack_require__(/*! ./adler32 */ \"./node_modules/pako/lib/zlib/adler32.js\");\nconst crc32         = __webpack_require__(/*! ./crc32 */ \"./node_modules/pako/lib/zlib/crc32.js\");\nconst inflate_fast  = __webpack_require__(/*! ./inffast */ \"./node_modules/pako/lib/zlib/inffast.js\");\nconst inflate_table = __webpack_require__(/*! ./inftrees */ \"./node_modules/pako/lib/zlib/inftrees.js\");\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH, Z_BLOCK, Z_TREES,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR, Z_BUF_ERROR,\n  Z_DEFLATED\n} = __webpack_require__(/*! ./constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 1;       /* i: waiting for magic header */\nconst    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 3;       /* i: waiting for modification time (gzip) */\nconst    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 7;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 9;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 10;    /* i: waiting for dictionary check value */\nconst    DICT = 11;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 14;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 18;   /* i: waiting for code length code lengths */\nconst        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nconst            LEN = 21;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 22;    /* i: waiting for length extra bits */\nconst            DIST = 23;      /* i: waiting for distance code */\nconst            DISTEXT = 24;   /* i: waiting for distance extra bits */\nconst            MATCH = 25;     /* o: waiting for output space to copy string */\nconst            LIT = 26;       /* o: waiting for output space to write literal */\nconst    CHECK = 27;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 29;      /* finished check, done -- remain here until reset */\nconst    BAD = 30;       /* got a data error -- remain here until reset */\nconst    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        state.flags = 0;           /* expect zlib header */\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if (state.flags & 0x0200) {\n              state.check = crc32(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inflate_fast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if (_out) {\n            strm.adler = state.check =\n                /*UPDATE(state.check, put - _out, _out);*/\n                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n};\n\n\nmodule.exports.inflateReset = inflateReset;\nmodule.exports.inflateReset2 = inflateReset2;\nmodule.exports.inflateResetKeep = inflateResetKeep;\nmodule.exports.inflateInit = inflateInit;\nmodule.exports.inflateInit2 = inflateInit2;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateEnd = inflateEnd;\nmodule.exports.inflateGetHeader = inflateGetHeader;\nmodule.exports.inflateSetDictionary = inflateSetDictionary;\nmodule.exports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\n*/\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/pako/lib/zlib/inflate.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/inftrees.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/inftrees.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n  let base_index = 0;\n//  let shoextra;    /* extra bits table to use */\n  let end;                    /* use base and extra for symbol > end */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n  let extra_index = 0;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nmodule.exports = inflate_table;\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/pako/lib/zlib/inftrees.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/messages.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/messages.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/pako/lib/zlib/messages.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/trees.js":
/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/trees.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH    = 3;\nconst MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES       = 30;\n/* number of distance codes */\n\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nconst MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) =>\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) =>\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  const next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nconst copy_block = (s, buf, len, header) =>\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  s.pending_buf.set(s.window.subarray(buf, buf + len), s.pending);\n  s.pending += len;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) =>\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) =>\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let lx = 0;         /* running index in l_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) =>\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) =>\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) =>\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) =>\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let black_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block = (s, buf, stored_len, last) =>\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nconst _tr_flush_block = (s, buf, stored_len, last) =>\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally = (s, dist, lc) =>\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //let out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n};\n\nmodule.exports._tr_init  = _tr_init;\nmodule.exports._tr_stored_block = _tr_stored_block;\nmodule.exports._tr_flush_block  = _tr_flush_block;\nmodule.exports._tr_tally = _tr_tally;\nmodule.exports._tr_align = _tr_align;\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/pako/lib/zlib/trees.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/zstream.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/zstream.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/pako/lib/zlib/zstream.js?");

/***/ }),

/***/ "./node_modules/protobufjs/minimal.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/minimal.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// minimal library entry point.\n\n\nmodule.exports = __webpack_require__(/*! ./src/index-minimal */ \"./node_modules/protobufjs/src/index-minimal.js\");\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/protobufjs/minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/index-minimal.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/index-minimal.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = __webpack_require__(/*! ./writer */ \"./node_modules/protobufjs/src/writer.js\");\nprotobuf.BufferWriter = __webpack_require__(/*! ./writer_buffer */ \"./node_modules/protobufjs/src/writer_buffer.js\");\nprotobuf.Reader       = __webpack_require__(/*! ./reader */ \"./node_modules/protobufjs/src/reader.js\");\nprotobuf.BufferReader = __webpack_require__(/*! ./reader_buffer */ \"./node_modules/protobufjs/src/reader_buffer.js\");\n\n// Utility\nprotobuf.util         = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\nprotobuf.rpc          = __webpack_require__(/*! ./rpc */ \"./node_modules/protobufjs/src/rpc.js\");\nprotobuf.roots        = __webpack_require__(/*! ./roots */ \"./node_modules/protobufjs/src/roots.js\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/protobufjs/src/index-minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/reader.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/reader.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = Reader;\n\nvar util      = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/protobufjs/src/reader.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/reader_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/reader_buffer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = __webpack_require__(/*! ./reader */ \"./node_modules/protobufjs/src/reader.js\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/protobufjs/src/reader_buffer.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/roots.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/roots.js ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/protobufjs/src/roots.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/rpc.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/src/rpc.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = __webpack_require__(/*! ./rpc/service */ \"./node_modules/protobufjs/src/rpc/service.js\");\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/protobufjs/src/rpc.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/rpc/service.js":
/*!****************************************************!*\
  !*** ./node_modules/protobufjs/src/rpc/service.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = Service;\n\nvar util = __webpack_require__(/*! ../util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/protobufjs/src/rpc/service.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/util/longbits.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/util/longbits.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = LongBits;\n\nvar util = __webpack_require__(/*! ../util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/protobufjs/src/util/longbits.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/util/minimal.js":
/*!*****************************************************!*\
  !*** ./node_modules/protobufjs/src/util/minimal.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = __webpack_require__(/*! @protobufjs/aspromise */ \"./node_modules/@protobufjs/aspromise/index.js\");\n\n// converts to / from base64 encoded strings\nutil.base64 = __webpack_require__(/*! @protobufjs/base64 */ \"./node_modules/@protobufjs/base64/index.js\");\n\n// base class of rpc.Service\nutil.EventEmitter = __webpack_require__(/*! @protobufjs/eventemitter */ \"./node_modules/@protobufjs/eventemitter/index.js\");\n\n// float handling accross browsers\nutil.float = __webpack_require__(/*! @protobufjs/float */ \"./node_modules/@protobufjs/float/index.js\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = __webpack_require__(/*! @protobufjs/inquire */ \"./node_modules/@protobufjs/inquire/index.js\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = __webpack_require__(/*! @protobufjs/utf8 */ \"./node_modules/@protobufjs/utf8/index.js\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = __webpack_require__(/*! @protobufjs/pool */ \"./node_modules/@protobufjs/pool/index.js\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = __webpack_require__(/*! ./longbits */ \"./node_modules/protobufjs/src/util/longbits.js\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof __webpack_require__.g !== \"undefined\"\n                   && __webpack_require__.g\n                   && __webpack_require__.g.process\n                   && __webpack_require__.g.process.versions\n                   && __webpack_require__.g.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && __webpack_require__.g\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/protobufjs/src/util/minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/writer.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/writer.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = Writer;\n\nvar util      = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/protobufjs/src/writer.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/writer_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/writer_buffer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = __webpack_require__(/*! ./writer */ \"./node_modules/protobufjs/src/writer.js\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n\n\n//# sourceURL=webpack://WebDNN/./node_modules/protobufjs/src/writer_buffer.js?");

/***/ }),

/***/ "./src/descriptor_runner/backend/cpu/cpuContextImpl.ts":
/*!*************************************************************!*\
  !*** ./src/descriptor_runner/backend/cpu/cpuContextImpl.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebDNNCPUContextImpl = void 0;\nconst cpuTensorImpl_1 = __webpack_require__(/*! ./cpuTensorImpl */ \"./src/descriptor_runner/backend/cpu/cpuTensorImpl.ts\");\nclass WebDNNCPUContextImpl {\n    constructor() {\n        this.backend = \"cpu\";\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    async initialize() { }\n    isCPUTensor(tensor) {\n        return tensor.backend === this.backend;\n    }\n    assertsCPUTensor(tensor) {\n        if (tensor.backend !== this.backend) {\n            throw new Error(`Tensor backend ${this.backend} is expected, but ${tensor.backend} is given.`);\n        }\n    }\n    assertsCPUTensorArray(tensors) {\n        for (const tensor of tensors) {\n            if (tensor.backend !== this.backend) {\n                throw new Error(`Tensor backend ${this.backend} is expected, but ${tensor.backend} is given.`);\n            }\n        }\n    }\n    emptyTensor(dims, dataType, data) {\n        return new cpuTensorImpl_1.CPUTensorImpl(dims, dataType, data);\n    }\n    async moveTensor(tensor) {\n        const dst = new cpuTensorImpl_1.CPUTensorImpl(tensor.dims, tensor.dataType, await tensor.getData());\n        return dst;\n    }\n}\nexports.WebDNNCPUContextImpl = WebDNNCPUContextImpl;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/backend/cpu/cpuContextImpl.ts?");

/***/ }),

/***/ "./src/descriptor_runner/backend/cpu/cpuTensorImpl.ts":
/*!************************************************************!*\
  !*** ./src/descriptor_runner/backend/cpu/cpuTensorImpl.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CPUTensorImpl = void 0;\nconst constants_1 = __webpack_require__(/*! ../../interface/core/constants */ \"./src/descriptor_runner/interface/core/constants.ts\");\nconst tensorImpl_1 = __webpack_require__(/*! ../../core/tensorImpl */ \"./src/descriptor_runner/core/tensorImpl.ts\");\nconst logging_1 = __webpack_require__(/*! ../../logging */ \"./src/descriptor_runner/logging.ts\");\nconst logger = logging_1.WebDNNLogging.getLogger(\"WebDNN.CPUTensorImpl\");\nlet perfTotalMemory = 0;\nclass CPUTensorImpl extends tensorImpl_1.TensorImpl {\n    constructor(dims, dataType = \"float32\", data) {\n        super(dims, dataType, \"cpu\");\n        this.data = data || new constants_1.DataArrayConstructor[dataType](this.length);\n        if (data) {\n            this.useExternalBuffer = true;\n            logger.debug(\"CPU memory use existing buffer\", {\n                size: this.data.byteLength,\n                total: perfTotalMemory,\n            });\n        }\n        else {\n            this.useExternalBuffer = false;\n            perfTotalMemory += this.data.byteLength;\n            logger.debug(\"CPU memory allocation\", {\n                size: this.data.byteLength,\n                total: perfTotalMemory,\n            });\n        }\n    }\n    async getData() {\n        return this.data;\n    }\n    async setData(data) {\n        this.data.set(data);\n    }\n    dispose() {\n        if (!this.useExternalBuffer) {\n            perfTotalMemory -= this.data.byteLength;\n        }\n        logger.debug(\"CPU memory free\", {\n            size: this.data.byteLength,\n            total: perfTotalMemory,\n        });\n        this.data = new Float32Array(1);\n    }\n    static isCPUTensor(tensor) {\n        return tensor.backend === \"cpu\";\n    }\n    getDataSync() {\n        return this.data;\n    }\n    getValue(idxs) {\n        if (idxs.length !== this.ndim) {\n            throw new Error(\"length of idxs does not match tensor.ndim\");\n        }\n        let ofs = 0;\n        for (let i = 0; i < this.ndim; i++) {\n            ofs += this.strides[i] * idxs[i];\n        }\n        return this.data[ofs];\n    }\n    setValue(value, idxs) {\n        if (idxs.length !== this.ndim) {\n            throw new Error(\"length of idxs does not match tensor.ndim\");\n        }\n        let ofs = 0;\n        for (let i = 0; i < this.ndim; i++) {\n            ofs += this.strides[i] * idxs[i];\n        }\n        this.data[ofs] = value;\n    }\n}\nexports.CPUTensorImpl = CPUTensorImpl;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/backend/cpu/cpuTensorImpl.ts?");

/***/ }),

/***/ "./src/descriptor_runner/backend/wasm/wasmContextImpl.ts":
/*!***************************************************************!*\
  !*** ./src/descriptor_runner/backend/wasm/wasmContextImpl.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebDNNWasmContextImpl = void 0;\nconst wasmTensorImpl_1 = __webpack_require__(/*! ./wasmTensorImpl */ \"./src/descriptor_runner/backend/wasm/wasmTensorImpl.ts\");\nconst logging_1 = __webpack_require__(/*! ../../logging */ \"./src/descriptor_runner/logging.ts\");\nconst logger = logging_1.WebDNNLogging.getLogger(\"WebDNN.WebDNNWasmContextImpl\");\nclass WebDNNWasmContextImpl {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    constructor(cpuContext, option) {\n        this.cpuContext = cpuContext;\n        this.backend = \"wasm\";\n        this.initialized = false;\n        this.initializing = false;\n        this.resolvers = [];\n        this.perfTotalMemory = 0;\n        if (typeof WebAssembly !== \"object\") {\n            throw new Error(\"WebAssembly is not supported on this browser.\");\n        }\n    }\n    async initialize(wasmWorkerSrcUrl) {\n        if (this.initialized) {\n            return;\n        }\n        if (this.initializing) {\n            throw new Error(\"initialize is called while initialize is running\");\n        }\n        this.wasmWorkerSrcUrl = wasmWorkerSrcUrl;\n        this.initializing = true;\n        this.worker = new Worker(this.wasmWorkerSrcUrl);\n        this.worker.onmessage = (ev) => {\n            for (let i = 0; i < this.resolvers.length; i++) {\n                if (this.resolvers[i](ev)) {\n                    this.resolvers.splice(i, 1);\n                    break;\n                }\n            }\n        };\n        this.resolvers.push((ev) => {\n            if (ev.data.type === \"error\") {\n                logger.error(\"WebAssembly Error\", ev.data.message);\n                return true;\n            }\n        });\n        return new Promise((resolve) => {\n            this.resolvers.push((ev) => {\n                if (ev.data.type === \"initializeComplete\") {\n                    this.initializing = false;\n                    this.initialized = true;\n                    resolve();\n                    return true;\n                }\n            });\n        });\n    }\n    isWasmTensor(tensor) {\n        return tensor.backend === this.backend;\n    }\n    assertsWasmTensor(tensor) {\n        if (tensor.backend !== this.backend) {\n            throw new Error(`Tensor backend ${this.backend} is expected, but ${tensor.backend} is given.`);\n        }\n    }\n    assertsWasmTensorArray(tensors) {\n        for (const tensor of tensors) {\n            if (tensor.backend !== this.backend) {\n                throw new Error(`Tensor backend ${this.backend} is expected, but ${tensor.backend} is given.`);\n            }\n        }\n    }\n    emptyTensor(dims, dataType) {\n        return new wasmTensorImpl_1.WasmTensorImpl(this, dims, dataType);\n    }\n    async moveTensor(tensor) {\n        const dst = new wasmTensorImpl_1.WasmTensorImpl(this, tensor.dims, tensor.dataType);\n        await dst.setData(await tensor.getData());\n        return dst;\n    }\n    checkInitialized() {\n        if (!this.initialized) {\n            throw new Error(\"Not initialized\");\n        }\n    }\n    runKernel(name, args) {\n        const argsToSend = args.map((arg) => {\n            switch (arg.type) {\n                case \"tensor\":\n                    return {\n                        type: \"tensor\",\n                        bufferId: arg.value.sharedBuffer.backendBufferId,\n                    };\n                default:\n                    return { type: \"scalar\", value: arg.value };\n            }\n        });\n        this.worker.postMessage({ type: \"runKernel\", name, args: argsToSend });\n    }\n    allocBuffer(buffer) {\n        this.worker.postMessage({\n            type: \"alloc\",\n            bufferId: buffer.backendBufferId,\n            byteLength: buffer.byteLength,\n        });\n    }\n    destroyBuffer(buffer) {\n        this.worker.postMessage({\n            type: \"destroy\",\n            bufferId: buffer.backendBufferId,\n        });\n    }\n    writeTensor(buffer, data) {\n        const copyData = new Uint8Array(buffer.byteLength), \n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        copyDataView = new data.constructor(copyData.buffer);\n        copyDataView.set(data);\n        this.worker.postMessage({ type: \"write\", bufferId: buffer.backendBufferId, data: copyData }, [copyData.buffer]);\n    }\n    readTensor(buffer) {\n        this.worker.postMessage({ type: \"read\", bufferId: buffer.backendBufferId });\n        return new Promise((resolve) => {\n            this.resolvers.push((ev) => {\n                if (ev.data.type === \"read\") {\n                    resolve(ev.data.data);\n                    return true;\n                }\n            });\n        });\n    }\n}\nexports.WebDNNWasmContextImpl = WebDNNWasmContextImpl;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/backend/wasm/wasmContextImpl.ts?");

/***/ }),

/***/ "./src/descriptor_runner/backend/wasm/wasmTensorImpl.ts":
/*!**************************************************************!*\
  !*** ./src/descriptor_runner/backend/wasm/wasmTensorImpl.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WasmTensorImpl = exports.WasmSharedBuffer = void 0;\nconst constants_1 = __webpack_require__(/*! ../../interface/core/constants */ \"./src/descriptor_runner/interface/core/constants.ts\");\nconst tensorImpl_1 = __webpack_require__(/*! ../../core/tensorImpl */ \"./src/descriptor_runner/core/tensorImpl.ts\");\nconst logging_1 = __webpack_require__(/*! ../../logging */ \"./src/descriptor_runner/logging.ts\");\nconst logger = logging_1.WebDNNLogging.getLogger(\"WebDNN.WasmTensorImpl\");\nclass WasmSharedBuffer {\n    constructor(context, byteLength) {\n        this.context = context;\n        this.byteLength = byteLength;\n        this.refCount = 1;\n        this.backendBufferId = WasmSharedBuffer.nextBackendBufferId++;\n        this.context.allocBuffer(this);\n        this.context.perfTotalMemory += this.byteLength;\n        logger.debug(\"WASM memory allocation\", {\n            size: this.byteLength,\n            total: this.context.perfTotalMemory,\n        });\n    }\n    incrRef() {\n        this.refCount++;\n    }\n    dispose() {\n        this.refCount--;\n        if (this.refCount <= 0) {\n            this.context.perfTotalMemory -= this.byteLength;\n            logger.debug(\"WASM memory free\", {\n                size: this.byteLength,\n                total: this.context.perfTotalMemory,\n            });\n            this.context.destroyBuffer(this);\n        }\n    }\n}\nexports.WasmSharedBuffer = WasmSharedBuffer;\nWasmSharedBuffer.nextBackendBufferId = 1;\nclass WasmTensorImpl extends tensorImpl_1.TensorImpl {\n    constructor(context, dims, dataType = \"float32\", sharedBuffer) {\n        super(dims, dataType, \"wasm\");\n        this.context = context;\n        if (dataType !== \"float32\") {\n            throw new Error(\"WasmTensor only supports float32\");\n        }\n        if (sharedBuffer) {\n            this.sharedBuffer = sharedBuffer;\n        }\n        else {\n            this.sharedBuffer = new WasmSharedBuffer(this.context, this.length * Float32Array.BYTES_PER_ELEMENT);\n        }\n    }\n    alias(dims) {\n        this.sharedBuffer.incrRef();\n        return new WasmTensorImpl(this.context, dims, this.dataType, this.sharedBuffer);\n    }\n    async getData() {\n        const buf = await this.context.readTensor(this.sharedBuffer);\n        return new constants_1.DataArrayConstructor[this.dataType](buf.buffer);\n    }\n    async setData(data) {\n        this.context.writeTensor(this.sharedBuffer, data);\n    }\n    dispose() {\n        this.sharedBuffer.dispose();\n    }\n}\nexports.WasmTensorImpl = WasmTensorImpl;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/backend/wasm/wasmTensorImpl.ts?");

/***/ }),

/***/ "./src/descriptor_runner/backend/webgl/pack.ts":
/*!*****************************************************!*\
  !*** ./src/descriptor_runner/backend/webgl/pack.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.unpackFromUint8Array = exports.unpackFromInt32Array = exports.unpackFromFloat16Array = exports.unpackFromFloat32Array = exports.packToUint8Array = exports.packToInt32Array = exports.packToFloat16Array = exports.packToFloat32Array = void 0;\nfunction packToFloat32Array(src, length) {\n    const buffer = new Float32Array(length);\n    buffer.set(src);\n    return buffer;\n}\nexports.packToFloat32Array = packToFloat32Array;\nfunction packToFloat16Array(src, length) {\n    const srcLength = src.length;\n    let srcUInt32;\n    if (src instanceof Float32Array) {\n        srcUInt32 = new Uint32Array(src.buffer, src.byteOffset, srcLength);\n    }\n    else {\n        const srcFloat32 = new Float32Array(srcLength);\n        srcFloat32.set(src);\n        srcUInt32 = new Uint32Array(srcFloat32.buffer);\n    }\n    const buffer = new Uint16Array(length);\n    for (let i = 0; i < srcLength; i++) {\n        const x = srcUInt32[i];\n        // 非正規化数, NaNは不正確\n        let exp = ((x >> 13) & 0x3fc00) - 0x1c000;\n        if (exp < 0) {\n            exp = 0;\n        }\n        else if (exp > 0x7c00) {\n            exp = 0x7c00;\n        }\n        const packed = ((x >> 16) & 0x8000) | exp | ((x >> 13) & 0x3ff);\n        buffer[i] = packed;\n    }\n    return buffer;\n}\nexports.packToFloat16Array = packToFloat16Array;\nfunction packToInt32Array(src, length) {\n    const buffer = new Int32Array(length);\n    buffer.set(src);\n    return buffer;\n}\nexports.packToInt32Array = packToInt32Array;\nfunction packToUint8Array(src, length) {\n    const buffer = new Uint8Array(length);\n    buffer.set(src);\n    return buffer;\n}\nexports.packToUint8Array = packToUint8Array;\nfunction unpackFromFloat32Array(src, length) {\n    const buffer = new Float32Array(length);\n    const srcView = new Float32Array(src.buffer, src.byteOffset, length);\n    buffer.set(srcView);\n    return buffer;\n}\nexports.unpackFromFloat32Array = unpackFromFloat32Array;\nfunction unpackFromFloat16Array(src, length) {\n    const buffer = new Float32Array(length);\n    const bufferUInt32 = new Uint32Array(buffer.buffer);\n    for (let i = 0; i < length; i++) {\n        const h = src[i];\n        let exp = ((h << 13) & 0xf800000) + 0x38000000;\n        if (exp === 0x38000000) {\n            // 0\n            exp = 0;\n        }\n        else if (exp === 0x47800000) {\n            // inf\n            exp = 0x7f800000;\n        }\n        const unpacked = ((h << 16) & 0x80000000) | exp | ((h & 0x3ff) << 13);\n        bufferUInt32[i] = unpacked;\n    }\n    return buffer;\n}\nexports.unpackFromFloat16Array = unpackFromFloat16Array;\nfunction unpackFromInt32Array(src, length) {\n    const buffer = new Int32Array(length);\n    const srcView = new Int32Array(src.buffer, src.byteOffset, length);\n    buffer.set(srcView);\n    return buffer;\n}\nexports.unpackFromInt32Array = unpackFromInt32Array;\nfunction unpackFromUint8Array(src, length) {\n    const buffer = new Uint8Array(length);\n    const srcView = new Uint8Array(src.buffer, src.byteOffset, length);\n    buffer.set(srcView);\n    return buffer;\n}\nexports.unpackFromUint8Array = unpackFromUint8Array;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/backend/webgl/pack.ts?");

/***/ }),

/***/ "./src/descriptor_runner/backend/webgl/webglContextImpl.ts":
/*!*****************************************************************!*\
  !*** ./src/descriptor_runner/backend/webgl/webglContextImpl.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebDNNWebGLContextImpl = exports.WebGLSharedTexture = void 0;\nconst util_1 = __webpack_require__(/*! ../../util */ \"./src/descriptor_runner/util.ts\");\nconst webglTensorImpl_1 = __webpack_require__(/*! ./webglTensorImpl */ \"./src/descriptor_runner/backend/webgl/webglTensorImpl.ts\");\nconst logging_1 = __webpack_require__(/*! ../../logging */ \"./src/descriptor_runner/logging.ts\");\nconst logger = logging_1.WebDNNLogging.getLogger(\"WebDNN.WebDNNWebGLContextImpl\");\n// [x y u v] * [upper-left, lower-left, upper-right, lower-right]\nconst vertexArray = new Float32Array([-1, +1, -1, -1, +1, +1, +1, -1]), vertex_shader_source_1 = `\r\nprecision highp float;\r\nattribute vec2 _xy;\r\nvoid main() { \r\n  gl_Position = vec4(_xy, 0, 1); \r\n}\r\n`, vertex_shader_source_2 = `#version 300 es\r\nprecision highp float;\r\nin vec2 _xy;\r\nvoid main() { \r\n  gl_Position = vec4(_xy, 0, 1); \r\n}\r\n`;\nfunction deleteTextureWait() {\n    return new Promise((resolve) => {\n        setTimeout(resolve, 1);\n    });\n}\nfunction wait(msec = 1) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, msec);\n    });\n}\nclass WebGLSharedTexture {\n    constructor(context, textureWidth, textureHeight, dimPerPixel) {\n        this.context = context;\n        this.textureWidth = textureWidth;\n        this.textureHeight = textureHeight;\n        this.dimPerPixel = dimPerPixel;\n        this.refCount = 1;\n        const { gl } = this.context;\n        let pooled = null;\n        for (let i = 0; i < this.context.texturePool.length; i++) {\n            const item = this.context.texturePool[i];\n            if (item.textureWidth === textureWidth &&\n                item.textureHeight === textureHeight &&\n                item.dimPerPixel === dimPerPixel) {\n                pooled = item.texture;\n                this.context.texturePool.splice(i, 1);\n                break;\n            }\n        }\n        const byteLength = this.textureWidth *\n            this.textureHeight *\n            this.dimPerPixel *\n            Float32Array.BYTES_PER_ELEMENT;\n        if (pooled) {\n            this.texture = pooled;\n            logger.debug(\"WEBGL memory from pool\", {\n                size: byteLength,\n                total: this.context.perfTotalMemory,\n            });\n        }\n        else {\n            this.context.limitTexturePool(this.context.maxAllocationBytes - byteLength, this.context.deallocateToBytes - byteLength);\n            this.texture = util_1.nonnull(gl.createTexture());\n            gl.activeTexture(gl.TEXTURE0 + 9); // TODO: texture unit 9 is always available?\n            gl.bindTexture(gl.TEXTURE_2D, this.texture);\n            /*\n             * WebGL2: dimPerPixel==1: R channelのみ使用, dimPerPixel==4: RGBAチャンネルを利用（一部の最適化されたオペレータ用）\n             * WebGL1: RGBA各8bitにfloatをpackして使用（floatテクスチャ未対応環境を想定）\n             */\n            if (this.context.isWebGL2(gl)) {\n                gl.texStorage2D(gl.TEXTURE_2D, 1, this.context.supportsTexture32bit\n                    ? dimPerPixel === 1\n                        ? gl.R32F\n                        : gl.RGBA32F\n                    : dimPerPixel === 1\n                        ? gl.R16F\n                        : gl.RGBA16F, this.textureWidth, this.textureHeight);\n            }\n            else {\n                if (dimPerPixel !== 1) {\n                    throw new Error(\"colorPerPixel must be 1 in WebGL1\");\n                }\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureWidth, this.textureHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n            }\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n            gl.bindTexture(gl.TEXTURE_2D, null);\n            this.context.perfTotalMemory += byteLength;\n            logger.debug(\"WEBGL memory allocation\", {\n                size: byteLength,\n                total: this.context.perfTotalMemory,\n            });\n        }\n    }\n    incrRef() {\n        this.refCount++;\n    }\n    dispose() {\n        this.refCount--;\n        const byteLength = this.textureWidth *\n            this.textureHeight *\n            this.dimPerPixel *\n            Float32Array.BYTES_PER_ELEMENT;\n        if (this.refCount <= 0) {\n            this.context.texturePool.push({\n                textureWidth: this.textureWidth,\n                textureHeight: this.textureHeight,\n                dimPerPixel: this.dimPerPixel,\n                texture: this.texture,\n            });\n            logger.debug(\"WEBGL memory to pool\", {\n                size: byteLength,\n                total: this.context.perfTotalMemory,\n            });\n        }\n    }\n}\nexports.WebGLSharedTexture = WebGLSharedTexture;\nfunction initWebGL(versionOrder) {\n    const canvas = document.createElement(\"canvas\");\n    let gl = null;\n    for (const version of versionOrder || [\n        \"webgl2-16384\",\n        \"webgl2-4096\",\n        \"webgl1-16384\",\n        \"webgl1-4096\",\n    ]) {\n        let webgl2 = false;\n        if (version.startsWith(\"webgl2\")) {\n            gl = canvas.getContext(\"webgl2\");\n            if (!gl) {\n                continue;\n            }\n            webgl2 = true;\n        }\n        else {\n            gl = canvas.getContext(\"webgl\");\n            if (!gl) {\n                continue;\n            }\n        }\n        const allowedTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n        const maxTextureSize = Number(version.slice(7)); // 16384 or 4096\n        if (maxTextureSize > allowedTextureSize) {\n            continue;\n        }\n        return {\n            version,\n            webgl2,\n            maxTextureSize,\n            gl,\n        };\n    }\n    return null;\n}\nclass WebDNNWebGLContextImpl {\n    constructor(cpuContext, option) {\n        this.cpuContext = cpuContext;\n        this.backend = \"webgl\";\n        this.programs = new Map();\n        this.initialized = false;\n        this.texturePool = [];\n        this.perfTotalMemory = 0;\n        this.needsDeleteTextureWait = false;\n        this.timerQueryExt = null;\n        this.performanceQueries = [];\n        this.performanceQueryKey = null;\n        this.maxAllocationBytes = option.maxAllocationBytes || 512 * 1024 * 1024;\n        this.deallocateToBytes =\n            option.deallocateToBytes || Math.floor(this.maxAllocationBytes / 2);\n        // バグ回避\n        // Mac+(Chrome/Firefox)で、RチャンネルのみのテクスチャをreadPixelsで読みだそうとするとエラーとなる\n        // GL ERROR :GL_INVALID_OPERATION : glReadPixels: format and type incompatible with the current read framebuffer\n        const ua = navigator.userAgent;\n        this.canOnlyReadRGBA =\n            ua.includes(\"Macintosh\") &&\n                (ua.includes(\"Chrome/\") || ua.includes(\"Firefox/\"));\n        const initResult = initWebGL(option.versionOrder);\n        if (!initResult) {\n            throw new Error(\"WebGL is not supported or does not have enough capability on this platform.\");\n        }\n        const { gl, version, webgl2, maxTextureSize } = initResult;\n        this.gl = gl;\n        this.webgl2 = webgl2;\n        this.maxTextureSize = maxTextureSize;\n        this.version = version;\n        if (this.webgl2) {\n            if (gl.getExtension(\"EXT_color_buffer_float\")) {\n                // Enable color mode of gl.R32F\n                this.supportsTexture32bit = true;\n                // EXT_color_buffer_float が取得できればR16Fも含んでいる\n                // これが取得できても、EXT_color_buffer_half_floatが取得できない環境もある\n                this.supportsTexture16bit = true;\n            }\n            else if (gl.getExtension(\"EXT_color_buffer_half_float\")) {\n                // Enable color mode of gl.R16F\n                this.supportsTexture32bit = false;\n                this.supportsTexture16bit = true;\n            }\n            else {\n                // 浮動小数点数テクスチャが格納できない環境はサポート外\n                throw new Error(\"Neither EXT_color_buffer_float nor EXT_color_buffer_half_float are supported\");\n            }\n            this.timerQueryExt = gl.getExtension(\"EXT_disjoint_timer_query_webgl2\");\n        }\n        else {\n            this.supportsTexture32bit = false;\n            this.supportsTexture16bit = false;\n        }\n        gl.disable(gl.DEPTH_TEST);\n        gl.disable(gl.STENCIL_TEST);\n        gl.disable(gl.BLEND);\n        gl.disable(gl.DITHER);\n        gl.disable(gl.POLYGON_OFFSET_FILL);\n        gl.disable(gl.SAMPLE_COVERAGE);\n        gl.enable(gl.SCISSOR_TEST);\n        gl.enable(gl.CULL_FACE);\n        gl.cullFace(gl.BACK);\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\n        const vertexBuffer = this.createArrayBuffer(vertexArray);\n        this.bindArrayBuffer(vertexBuffer);\n        this.fb = util_1.nonnull(gl.createFramebuffer());\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.fb);\n    }\n    async initialize() {\n        this.initialized = true;\n    }\n    checkInitialized() {\n        if (!this.initialized) {\n            throw new Error(\"Not initialized\");\n        }\n    }\n    isWebGLTensor(tensor) {\n        return tensor.backend === this.backend;\n    }\n    assertsWebGLTensor(tensor) {\n        if (tensor.backend !== this.backend) {\n            throw new Error(`Tensor backend ${this.backend} is expected, but ${tensor.backend} is given.`);\n        }\n    }\n    assertsWebGLTensorArray(tensors) {\n        for (const tensor of tensors) {\n            if (tensor.backend !== this.backend) {\n                throw new Error(`Tensor backend ${this.backend} is expected, but ${tensor.backend} is given.`);\n            }\n        }\n    }\n    emptyTensor(dims, dataType, option) {\n        return new webglTensorImpl_1.WebGLTensorImpl(this, dims, dataType, option === null || option === void 0 ? void 0 : option.dimPerPixel, option === null || option === void 0 ? void 0 : option.textureShape);\n    }\n    async moveTensor(tensor, option) {\n        const dst = new webglTensorImpl_1.WebGLTensorImpl(this, tensor.dims, tensor.dataType, option.dimPerPixel, option.textureShape);\n        await dst.setData(await tensor.getData());\n        return dst;\n    }\n    createArrayBuffer(vertexArray) {\n        const buffer = util_1.nonnull(this.gl.createBuffer());\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.STATIC_DRAW);\n        return buffer;\n    }\n    bindArrayBuffer(buffer) {\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffer);\n    }\n    createShader(type, source) {\n        const shader = util_1.nonnull(this.gl.createShader(type));\n        this.gl.shaderSource(shader, source);\n        this.gl.compileShader(shader);\n        if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n            logger.error(this.gl.getShaderInfoLog(shader));\n            throw Error(`Shader Compile failed: ${this.gl.getShaderInfoLog(shader)}`);\n        }\n        return shader;\n    }\n    addKernel(name, sourceCode) {\n        if (this.programs.has(name)) {\n            return;\n        }\n        this.programs.set(name, { program: this.compileKernel(sourceCode) });\n    }\n    hasKernel(name) {\n        return this.programs.has(name);\n    }\n    compileKernel(sourceCode) {\n        const { gl } = this;\n        if (!this.vshader) {\n            this.vshader = this.createShader(gl.VERTEX_SHADER, this.webgl2 ? vertex_shader_source_2 : vertex_shader_source_1);\n        }\n        const fshader = this.createShader(gl.FRAGMENT_SHADER, sourceCode), program = util_1.nonnull(this.gl.createProgram());\n        this.gl.attachShader(program, fshader);\n        this.gl.attachShader(program, this.vshader);\n        this.gl.linkProgram(program);\n        if (!this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) {\n            logger.error(this.gl.getProgramInfoLog(program));\n            throw new Error(\"ShaderProgram Initialization failed.\");\n        }\n        return program;\n    }\n    async runKernel(name, inputs, output, uniforms) {\n        this.checkInitialized();\n        const gl2 = this.gl;\n        let query = null;\n        if (this.isWebGL2(gl2) &&\n            this.timerQueryExt &&\n            this.performanceQueryKey != null) {\n            query = gl2.createQuery();\n            if (query) {\n                gl2.beginQuery(this.timerQueryExt.TIME_ELAPSED_EXT, query);\n            }\n        }\n        if (this.needsDeleteTextureWait) {\n            await deleteTextureWait();\n            this.needsDeleteTextureWait = false;\n        }\n        const kobj = this.programs.get(name);\n        if (!kobj) {\n            throw new Error(`Unknown kernel ${name}`);\n        }\n        const { gl } = this, xyAttribLoc = gl.getAttribLocation(kobj.program, \"_xy\");\n        for (let i = 0; i < inputs.length; i++) {\n            inputs[i].tensor.bindToReadTexture(i);\n        }\n        output.bindToDrawTexture();\n        gl.useProgram(kobj.program);\n        for (let i = 0; i < inputs.length; i++) {\n            gl.uniform1i(gl.getUniformLocation(kobj.program, inputs[i].name), i);\n        }\n        for (const uniform of uniforms) {\n            switch (uniform.type) {\n                case \"float\":\n                    gl.uniform1f(gl.getUniformLocation(kobj.program, uniform.name), uniform.value);\n                    break;\n                case \"int\":\n                    gl.uniform1i(gl.getUniformLocation(kobj.program, uniform.name), uniform.value);\n                    break;\n                default:\n                    throw new Error();\n            }\n        }\n        gl.vertexAttribPointer(xyAttribLoc, 2, gl.FLOAT, true, 8, 0);\n        gl.enableVertexAttribArray(xyAttribLoc);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertexArray.length / 2);\n        // TODO: 完了を待つかどうか\n        for (let i = 0; i < inputs.length; i++) {\n            inputs[i].tensor.unbindFromReadTexture();\n        }\n        output.unbindFromDrawTexture();\n        if (query) {\n            if (this.isWebGL2(gl2) && this.timerQueryExt) {\n                gl2.endQuery(this.timerQueryExt.TIME_ELAPSED_EXT);\n                const info = {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    key: this.performanceQueryKey,\n                    kernelName: name,\n                    inputs: inputs.map(({ tensor, name }) => ({\n                        dims: tensor.dims.slice(),\n                        name,\n                    })),\n                    output: { dims: output.dims.slice() },\n                    elapsedNanoSecond: 0,\n                    gpuDisjoint: false,\n                };\n                this.performanceQueries.push({ info, query });\n            }\n        }\n    }\n    isWebGL2(gl) {\n        return this.webgl2;\n    }\n    limitTexturePool(maxBytes, reductionBytes) {\n        // remove oldest textures when total size exceeds limitThreshold.\n        // remove continues until total size is below removeThreshold\n        // why remove multiple textures once?\n        // deleteTexture does not immediately free memory, so timer wait is needed\n        if (this.perfTotalMemory > maxBytes) {\n            while (this.perfTotalMemory > reductionBytes) {\n                const tex = this.texturePool.shift();\n                if (!tex) {\n                    break;\n                }\n                const byteLength = tex.textureWidth *\n                    tex.textureHeight *\n                    tex.dimPerPixel *\n                    Float32Array.BYTES_PER_ELEMENT;\n                this.perfTotalMemory -= byteLength;\n                logger.debug(\"WEBGL memory free\", {\n                    size: byteLength,\n                    total: this.perfTotalMemory,\n                });\n                this.gl.deleteTexture(tex.texture);\n                this.needsDeleteTextureWait = true;\n            }\n        }\n    }\n    enablePerformanceQuery(key) {\n        this.performanceQueryKey = key;\n    }\n    gatherPerformanceQueryResult() {\n        const gl2 = this.gl;\n        if (this.isWebGL2(gl2) && this.timerQueryExt) {\n            let gpuDisjoint = false;\n            if (gl2.getParameter(this.timerQueryExt.GPU_DISJOINT_EXT)) {\n                gpuDisjoint = true;\n            }\n            return new Promise((resolve) => {\n                const gathereds = [];\n                const gather = () => {\n                    // eslint-disable-next-line no-constant-condition\n                    while (true) {\n                        const q = this.performanceQueries[0];\n                        if (!q) {\n                            resolve(gathereds);\n                            break;\n                        }\n                        else {\n                            if (gl2.getQueryParameter(q.query, gl2.QUERY_RESULT_AVAILABLE)) {\n                                const elapsedNanoSecond = gl2.getQueryParameter(q.query, gl2.QUERY_RESULT);\n                                this.performanceQueries.shift();\n                                const info = q.info;\n                                info.elapsedNanoSecond = elapsedNanoSecond;\n                                info.gpuDisjoint = gpuDisjoint;\n                                gathereds.push(info);\n                            }\n                            else {\n                                // need wait\n                                wait(10).then(gather);\n                                break;\n                            }\n                        }\n                    }\n                };\n                gather();\n            });\n        }\n        else {\n            return Promise.reject(\"Performance query not supported\");\n        }\n    }\n}\nexports.WebDNNWebGLContextImpl = WebDNNWebGLContextImpl;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/backend/webgl/webglContextImpl.ts?");

/***/ }),

/***/ "./src/descriptor_runner/backend/webgl/webglTensorImpl.ts":
/*!****************************************************************!*\
  !*** ./src/descriptor_runner/backend/webgl/webglTensorImpl.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebGLTensorImpl = void 0;\nconst shaderHelper_1 = __webpack_require__(/*! ../../operators/webgl/shaderHelper */ \"./src/descriptor_runner/operators/webgl/shaderHelper.ts\");\nconst tensorImpl_1 = __webpack_require__(/*! ../../core/tensorImpl */ \"./src/descriptor_runner/core/tensorImpl.ts\");\nconst webglContextImpl_1 = __webpack_require__(/*! ./webglContextImpl */ \"./src/descriptor_runner/backend/webgl/webglContextImpl.ts\");\nconst pack_1 = __webpack_require__(/*! ./pack */ \"./src/descriptor_runner/backend/webgl/pack.ts\");\nclass WebGLTensorImpl extends tensorImpl_1.TensorImpl {\n    constructor(context, dims, dataType = \"float32\", dimPerPixel = 1, textureShape, sharedTexture) {\n        super(dims, dataType, \"webgl\");\n        this.context = context;\n        this.dimPerPixel = dimPerPixel;\n        this.isBoundToDrawFrameBuffer = false;\n        this.readTextureUnitIndices = [];\n        if (dataType !== \"float32\") {\n            throw new Error(\"WebGLTensor only supports float32\");\n        }\n        const pixels = Math.ceil(this.length / dimPerPixel);\n        // This makes computing slightly slow. why?\n        // this.textureWidth = Math.pow(\n        //   2,\n        //   Math.ceil(Math.log2(Math.min(pixels, this.context.maxTextureSize)))\n        // );\n        if (textureShape) {\n            this.textureHeight = textureShape[0];\n            this.textureWidth = textureShape[1];\n        }\n        else {\n            this.textureWidth = this.context.maxTextureSize;\n            this.textureHeight = Math.ceil(pixels / this.textureWidth);\n        }\n        if (this.textureHeight > this.context.maxTextureSize ||\n            this.textureWidth > this.context.maxTextureSize) {\n            throw new Error(`Cannot allocate texture of size ${this.length} in this environment. Please split large tensor in the model.`);\n        }\n        if (sharedTexture) {\n            this.sharedTexture = sharedTexture;\n        }\n        else {\n            this.sharedTexture = new webglContextImpl_1.WebGLSharedTexture(this.context, this.textureWidth, this.textureHeight, this.dimPerPixel);\n        }\n    }\n    getTexture() {\n        return this.sharedTexture.texture;\n    }\n    alias(dims) {\n        this.sharedTexture.incrRef();\n        return new WebGLTensorImpl(this.context, dims, this.dataType, this.dimPerPixel, [this.textureHeight, this.textureWidth], this.sharedTexture);\n    }\n    async getData() {\n        const { gl } = this.context;\n        let data;\n        if (this.context.isWebGL2(gl) &&\n            this.context.canOnlyReadRGBA &&\n            this.dimPerPixel === 1) {\n            // RGBAにパックしてから読み取る必要がある\n            const packed = await this.packToRGBA();\n            data = (await packed.getData());\n            packed.dispose();\n            return data;\n        }\n        this.bindToDrawTexture();\n        if (this.context.isWebGL2(gl)) {\n            if (this.context.supportsTexture32bit) {\n                const buf = new Float32Array(this.textureHeight * this.textureWidth * this.dimPerPixel);\n                gl.readPixels(0, 0, this.textureWidth, this.textureHeight, this.dimPerPixel === 1 ? gl.RED : gl.RGBA, gl.FLOAT, buf);\n                data = pack_1.unpackFromFloat32Array(buf, this.length);\n            }\n            else {\n                // 16bit\n                const buf = new Uint16Array(this.textureHeight * this.textureWidth * this.dimPerPixel);\n                gl.readPixels(0, 0, this.textureWidth, this.textureHeight, this.dimPerPixel === 1 ? gl.RED : gl.RGBA, gl.HALF_FLOAT, buf);\n                data = pack_1.unpackFromFloat16Array(buf, this.length);\n            }\n        }\n        else {\n            const buf = new Uint8Array(this.textureHeight * this.textureWidth * 4);\n            gl.readPixels(0, 0, this.textureWidth, this.textureHeight, gl.RGBA, gl.UNSIGNED_BYTE, buf);\n            data = this.unpackColor(buf);\n        }\n        this.unbindFromDrawTexture();\n        return data;\n    }\n    unpackColor(buf) {\n        // unpack 8bit texture according to shaderHelper\n        const unpacked = new Float32Array(this.length);\n        for (let i = 0; i < this.length; i++) {\n            const b0 = buf[i * 4];\n            const b1 = buf[i * 4 + 1];\n            const b2 = buf[i * 4 + 2];\n            const b3 = buf[i * 4 + 3];\n            let val = 0.0;\n            if (b0 > 0) {\n                let sign, exponent;\n                if (b0 >= 128) {\n                    sign = 1.0;\n                    exponent = b0 - 192;\n                }\n                else {\n                    sign = -1.0;\n                    exponent = b0 - 64;\n                }\n                const scaled = b1 / 255 + b2 / (255 * 255) + b3 / (255 * 255 * 255);\n                val = scaled * Math.pow(2, exponent) * sign;\n            }\n            unpacked[i] = val;\n        }\n        return unpacked;\n    }\n    async setData(data) {\n        const { gl } = this.context;\n        this.bindToReadTexture(9);\n        if (this.context.isWebGL2(gl)) {\n            if (this.context.supportsTexture32bit) {\n                const buf = pack_1.packToFloat32Array(data, this.textureWidth * this.textureHeight * this.dimPerPixel);\n                gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, this.textureWidth, this.textureHeight, this.dimPerPixel === 1 ? gl.RED : gl.RGBA, gl.FLOAT, buf);\n            }\n            else {\n                const buf = pack_1.packToFloat16Array(data, this.textureWidth * this.textureHeight * this.dimPerPixel);\n                gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, this.textureWidth, this.textureHeight, this.dimPerPixel === 1 ? gl.RED : gl.RGBA, gl.HALF_FLOAT, buf);\n            }\n        }\n        else {\n            const buf = this.packColor(data);\n            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, this.textureWidth, this.textureHeight, gl.RGBA, gl.UNSIGNED_BYTE, buf);\n        }\n        this.unbindFromReadTexture();\n    }\n    packColor(data) {\n        const packed = new Uint8Array(this.textureWidth * this.textureHeight * 4);\n        for (let i = 0; i < this.length; i++) {\n            const val = data[i];\n            let b0 = 0, b1 = 0, b2 = 0, b3 = 0;\n            if (val !== 0.0) {\n                const sign = val > 0.0 ? 192 : 64;\n                const absval = Math.abs(val);\n                const exponent = Math.ceil(Math.log2(absval) + 0.0001);\n                const scaled = absval * Math.pow(2, -exponent);\n                let s1 = scaled;\n                let s2 = scaled * 255;\n                s2 -= Math.trunc(s2);\n                s1 -= s2 / 255;\n                let s3 = scaled * (255 * 255);\n                s3 -= Math.trunc(s3);\n                s2 -= s3 / 255;\n                b0 = sign + exponent;\n                b1 = Math.min(Math.max(Math.ceil((s1 - 0.5 / 255) * 255), 0), 255);\n                b2 = Math.min(Math.max(Math.ceil((s2 - 0.5 / 255) * 255), 0), 255);\n                b3 = Math.min(Math.max(Math.ceil((s3 - 0.5 / 255) * 255), 0), 255);\n            }\n            packed[i * 4] = b0;\n            packed[i * 4 + 1] = b1;\n            packed[i * 4 + 2] = b2;\n            packed[i * 4 + 3] = b3;\n        }\n        return packed;\n    }\n    dispose() {\n        this.sharedTexture.dispose();\n    }\n    bindToReadTexture(unit) {\n        if (this.isBoundToDrawFrameBuffer)\n            throw Error(\"This buffer is already registered as draw buffer. \" +\n                \"You may forgot to unbind the binding while previous operations.\");\n        const { gl } = this.context;\n        gl.activeTexture(gl.TEXTURE0 + unit);\n        gl.bindTexture(gl.TEXTURE_2D, this.getTexture());\n        this.readTextureUnitIndices.push(unit);\n    }\n    unbindFromReadTexture() {\n        const { gl } = this.context;\n        for (const unit of this.readTextureUnitIndices) {\n            gl.activeTexture(gl.TEXTURE0 + unit);\n            gl.bindTexture(gl.TEXTURE_2D, null);\n        }\n        this.readTextureUnitIndices = [];\n    }\n    bindToDrawTexture() {\n        if (this.readTextureUnitIndices.length > 0)\n            throw Error(\"This buffer is already registered as read buffer. \" +\n                \"You cannot bind a texture as both read and draw texture buffer at same time.\");\n        if (this.isBoundToDrawFrameBuffer)\n            throw Error(\"This buffer is already registered as draw buffer. \" +\n                \"You may forgot to unbind the binding while previous operations.\");\n        const { gl } = this.context;\n        gl.viewport(0, 0, this.textureWidth, this.textureHeight);\n        gl.scissor(0, 0, this.textureWidth, this.textureHeight);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.getTexture(), 0);\n        this.isBoundToDrawFrameBuffer = true;\n    }\n    unbindFromDrawTexture() {\n        if (!this.isBoundToDrawFrameBuffer)\n            return;\n        const { gl } = this.context;\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);\n        this.isBoundToDrawFrameBuffer = false;\n    }\n    async packToRGBA() {\n        const outputTensor = new WebGLTensorImpl(this.context, this.dims, \"float32\", 4), inputPixels = this.length, outputPixels = Math.ceil(outputTensor.length / 4), kernelName = \"RToRGBA\";\n        if (!this.context.hasKernel(kernelName)) {\n            const kernelSource = `${shaderHelper_1.shaderGenHeader(this.context.webgl2)}\r\n  \r\n${shaderHelper_1.shaderGenTensorOutputUniform(1)}\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input\", 1, this.context.webgl2)}\r\nuniform int input_pixels;\r\n\r\nvoid main() {\r\n  ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(1)}\r\n  vec4 result = vec4(0.0, 0.0, 0.0, 0.0);\r\n  int pos = tex_output_0 * 4;\r\n  if (pos < input_pixels) {\r\n    result.r = get_tex_input(pos);\r\n  }\r\n  pos++;\r\n  if (pos < input_pixels) {\r\n    result.g = get_tex_input(pos);\r\n  }\r\n  pos++;\r\n  if (pos < input_pixels) {\r\n    result.b = get_tex_input(pos);\r\n  }\r\n  pos++;\r\n  if (pos < input_pixels) {\r\n    result.a = get_tex_input(pos);\r\n  }\r\n  fragColor = result;\r\n  return;\r\n}\r\n      `;\n            this.context.addKernel(kernelName, kernelSource);\n        }\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input\", [1], [this.textureHeight, this.textureWidth], this.context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([outputPixels], [outputTensor.textureHeight, outputTensor.textureWidth], this.context.webgl2),\n            { name: \"input_pixels\", type: \"int\", value: inputPixels },\n        ];\n        await this.context.runKernel(kernelName, [{ tensor: this, name: \"tex_input\" }], outputTensor, uniforms);\n        return outputTensor;\n    }\n}\nexports.WebGLTensorImpl = WebGLTensorImpl;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/backend/webgl/webglTensorImpl.ts?");

/***/ }),

/***/ "./src/descriptor_runner/backend/webgpu/webgpuContextImpl.ts":
/*!*******************************************************************!*\
  !*** ./src/descriptor_runner/backend/webgpu/webgpuContextImpl.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebDNNWebGPUContextImpl = void 0;\nconst webgpuMetaBuffer_1 = __webpack_require__(/*! ./webgpuMetaBuffer */ \"./src/descriptor_runner/backend/webgpu/webgpuMetaBuffer.ts\");\nconst webgpuTensorImpl_1 = __webpack_require__(/*! ./webgpuTensorImpl */ \"./src/descriptor_runner/backend/webgpu/webgpuTensorImpl.ts\");\nclass WebDNNWebGPUContextImpl {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    constructor(cpuContext, option) {\n        this.cpuContext = cpuContext;\n        this.backend = \"webgpu\";\n        this.pooledMetaBuffer = [];\n        if (typeof navigator.gpu !== \"object\" ||\n            typeof navigator.gpu.requestAdapter !== \"function\") {\n            throw new Error(\"WebGPU is not supported on this browser\");\n        }\n        this.initialized = false;\n        this.isSupported = false;\n        this.pipelines = new Map();\n    }\n    async initialize() {\n        if (this.initialized) {\n            return;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const adapter = await navigator.gpu.requestAdapter();\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.device = (await adapter.requestDevice());\n        if (!this.device) {\n            throw new Error(\"GPUAdapter.requestDevice() returned null\");\n        }\n        this.isSupported = true;\n        this.initialized = true;\n    }\n    isWebGLTensor(tensor) {\n        return tensor.backend === this.backend;\n    }\n    assertsWebGPUTensor(tensor) {\n        if (tensor.backend !== this.backend) {\n            throw new Error(`Tensor backend ${this.backend} is expected, but ${tensor.backend} is given.`);\n        }\n    }\n    assertsWebGPUTensorArray(tensors) {\n        for (const tensor of tensors) {\n            if (tensor.backend !== this.backend) {\n                throw new Error(`Tensor backend ${this.backend} is expected, but ${tensor.backend} is given.`);\n            }\n        }\n    }\n    emptyTensor(dims, dataType, forWriteFromCPU, forReadToCPU) {\n        return new webgpuTensorImpl_1.WebGPUTensorImpl(this, dims, dataType, forWriteFromCPU, forReadToCPU);\n    }\n    async moveTensor(tensor) {\n        const dst = new webgpuTensorImpl_1.WebGPUTensorImpl(this, tensor.dims, tensor.dataType, true, false);\n        await dst.setData(await tensor.getData());\n        return dst;\n    }\n    hasPipeline(name) {\n        return this.pipelines.has(name);\n    }\n    createPipeline(name, shader, nBuffers) {\n        if (this.hasPipeline(name)) {\n            return;\n        }\n        const { device } = this, bindings = [];\n        for (let i = 0; i < nBuffers; i++) {\n            bindings.push({\n                binding: i,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: { type: \"storage\" },\n            });\n        }\n        const bindGroupLayout = device.createBindGroupLayout({\n            entries: bindings,\n        }), pipelineLayout = device.createPipelineLayout({\n            bindGroupLayouts: [bindGroupLayout],\n        }), shaderModule = device.createShaderModule({ code: shader }), pipeline = device.createComputePipeline({\n            layout: pipelineLayout,\n            computeStage: {\n                module: shaderModule,\n                entryPoint: \"main\",\n            },\n        });\n        this.pipelines.set(name, { bindGroupLayout, pipeline });\n    }\n    async run(request) {\n        const pipeline = this.pipelines.get(request.pipelineName);\n        if (!pipeline) {\n            throw new Error(`Pipeline ${pipeline} not found`);\n        }\n        const { device } = this, entries = request.tensors.map((t, i) => ({\n            binding: i,\n            resource: {\n                buffer: t.buffer,\n                size: t.bufferSize,\n            },\n        }));\n        let meta = null;\n        if (request.meta) {\n            meta = await webgpuMetaBuffer_1.WebGPUMetaBuffer.createBuffer(this, request.meta);\n            entries.push({\n                binding: entries.length,\n                resource: {\n                    buffer: meta.tensor.buffer,\n                    size: meta.tensor.bufferSize,\n                },\n            });\n        }\n        const bindGroup = device.createBindGroup({\n            layout: pipeline.bindGroupLayout,\n            entries,\n        }), commandEncoder = device.createCommandEncoder(), passEncoder = commandEncoder.beginComputePass();\n        passEncoder.setBindGroup(0, bindGroup);\n        passEncoder.setPipeline(pipeline.pipeline);\n        passEncoder.dispatch(request.workGroups.x, request.workGroups.y, request.workGroups.z);\n        passEncoder.endPass();\n        device.queue.submit([commandEncoder.finish()]);\n        meta === null || meta === void 0 ? void 0 : meta.pushToPool();\n    }\n}\nexports.WebDNNWebGPUContextImpl = WebDNNWebGPUContextImpl;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/backend/webgpu/webgpuContextImpl.ts?");

/***/ }),

/***/ "./src/descriptor_runner/backend/webgpu/webgpuMetaBuffer.ts":
/*!******************************************************************!*\
  !*** ./src/descriptor_runner/backend/webgpu/webgpuMetaBuffer.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebGPUMetaBuffer = void 0;\nconst webgpuTensorImpl_1 = __webpack_require__(/*! ./webgpuTensorImpl */ \"./src/descriptor_runner/backend/webgpu/webgpuTensorImpl.ts\");\nclass WebGPUMetaBuffer {\n    constructor(context, tensor, cpuBuffer, cpuBufferHash) {\n        this.context = context;\n        this.tensor = tensor;\n        this.cpuBuffer = cpuBuffer;\n        this.cpuBufferHash = cpuBufferHash;\n    }\n    static buildCPUBuffer(content) {\n        const byteLength = content.elements.length * 4, cpuBuffer = new Uint8Array(byteLength), cpuBufferView = new DataView(cpuBuffer.buffer);\n        let ofs = 0;\n        for (const element of content.elements) {\n            switch (element.type) {\n                case \"int32\":\n                    cpuBufferView.setInt32(ofs, element.value, true);\n                    break;\n                case \"uint32\":\n                    cpuBufferView.setUint32(ofs, element.value, true);\n                    break;\n                case \"float32\":\n                    cpuBufferView.setFloat32(ofs, element.value, true);\n                    break;\n                default:\n                    throw new Error();\n            }\n            ofs += 4;\n        }\n        return cpuBuffer;\n    }\n    static calcBufferHash(cpuBuffer) {\n        let v = 0;\n        for (let i = 0; i < cpuBuffer.length; i++) {\n            v += cpuBuffer[i];\n        }\n        return v;\n    }\n    static findPooled(context, cpuBuffer, cpuBufferHash) {\n        const pooled = context.pooledMetaBuffer;\n        for (let i = 0; i < pooled.length; i++) {\n            const item = pooled[i];\n            if (item.cpuBuffer.length === cpuBuffer.length &&\n                item.cpuBufferHash === cpuBufferHash) {\n                let diff = false;\n                for (let j = 0; j < cpuBuffer.length; j++) {\n                    if (cpuBuffer[j] !== item.cpuBuffer[j]) {\n                        diff = true;\n                        break;\n                    }\n                }\n                if (!diff) {\n                    pooled.splice(i, 1);\n                    return item;\n                }\n            }\n        }\n        return null;\n    }\n    static async createBuffer(context, content) {\n        const cpuBuffer = WebGPUMetaBuffer.buildCPUBuffer(content), cpuBufferHash = WebGPUMetaBuffer.calcBufferHash(cpuBuffer), \n        // 全く同じ内容がプールにあればそれを使い、なければバッファ作成とGPUへの転送\n        found = WebGPUMetaBuffer.findPooled(context, cpuBuffer, cpuBufferHash);\n        if (found) {\n            return found;\n        }\n        const tensor = new webgpuTensorImpl_1.WebGPUTensorImpl(context, [cpuBuffer.length / 4], \"float32\", true, false);\n        await tensor.setData(new Float32Array(cpuBuffer.buffer));\n        return new WebGPUMetaBuffer(context, tensor, cpuBuffer, cpuBufferHash);\n    }\n    pushToPool() {\n        this.context.pooledMetaBuffer.push(this);\n    }\n}\nexports.WebGPUMetaBuffer = WebGPUMetaBuffer;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/backend/webgpu/webgpuMetaBuffer.ts?");

/***/ }),

/***/ "./src/descriptor_runner/backend/webgpu/webgpuTensorImpl.ts":
/*!******************************************************************!*\
  !*** ./src/descriptor_runner/backend/webgpu/webgpuTensorImpl.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebGPUTensorImpl = void 0;\nconst tensorImpl_1 = __webpack_require__(/*! ../../core/tensorImpl */ \"./src/descriptor_runner/core/tensorImpl.ts\");\nclass WebGPUTensorImpl extends tensorImpl_1.TensorImpl {\n    constructor(context, dims, dataType = \"float32\", forWriteFromCPU = false, forReadToCPU = true) {\n        super(dims, dataType, \"webgpu\");\n        this.context = context;\n        this.forWriteFromCPU = forWriteFromCPU;\n        this.forReadToCPU = forReadToCPU;\n        if (dataType !== \"float32\") {\n            throw new Error(\"WebGLTensor only supports float32\");\n        }\n        if (forWriteFromCPU && forReadToCPU) {\n            throw new Error(\"WebGPUTensor cannot be both for read and write\");\n        }\n        this.bufferSize = Math.max(this.length * Float32Array.BYTES_PER_ELEMENT, 4);\n        let usage = GPUBufferUsage.STORAGE;\n        if (forReadToCPU) {\n            usage |= GPUBufferUsage.COPY_SRC;\n        }\n        this.buffer = this.context.device.createBuffer({\n            mappedAtCreation: forWriteFromCPU,\n            size: this.bufferSize,\n            usage,\n        });\n        this.mappedForWriteFromCPU = forWriteFromCPU;\n    }\n    async getData() {\n        const data = new Float32Array(this.length), dst = this.context.device.createBuffer({\n            size: this.bufferSize,\n            usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n        }), commandEncoder = this.context.device.createCommandEncoder();\n        commandEncoder.copyBufferToBuffer(this.buffer, 0, dst, 0, this.bufferSize);\n        this.context.device.queue.submit([commandEncoder.finish()]);\n        await dst.mapAsync(GPUMapMode.READ);\n        const arrayBuffer = dst.getMappedRange(), buffer_mapped_array = new Float32Array(arrayBuffer, 0, this.length);\n        data.set(buffer_mapped_array);\n        dst.unmap();\n        dst.destroy();\n        return data;\n    }\n    async setData(data) {\n        if (!this.mappedForWriteFromCPU) {\n            throw new Error(\"The buffer is not mapped\");\n        }\n        const ab = this.buffer.getMappedRange(), mappedArray = new Float32Array(ab);\n        mappedArray.set(data);\n        this.buffer.unmap();\n        this.mappedForWriteFromCPU = false;\n    }\n    dispose() {\n        if (this.buffer) {\n            this.buffer.destroy();\n        }\n    }\n}\nexports.WebGPUTensorImpl = WebGPUTensorImpl;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/backend/webgpu/webgpuTensorImpl.ts?");

/***/ }),

/***/ "./src/descriptor_runner/core/inputProxy.ts":
/*!**************************************************!*\
  !*** ./src/descriptor_runner/core/inputProxy.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InputProxy = void 0;\nconst operatorUtil_1 = __webpack_require__(/*! ../operators/operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nclass InputProxy {\n    constructor(dims, dataType) {\n        this.dataType = dataType;\n        this.dims = dims;\n        const length = operatorUtil_1.arrayProd(dims);\n        this.length = length;\n        for (let i = 0; i < length; i++) {\n            this[i] = 0;\n        }\n        /*\n         * For large length, error occurs (RangeError: Maximum call stack size exceeded)\n         * Array.prototype.push.apply( this, new Array(length) );\n         */\n    }\n    set(array) {\n        for (let i = 0; i < array.length; i++) {\n            this[i] = array[i];\n        }\n    }\n}\nexports.InputProxy = InputProxy;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/core/inputProxy.ts?");

/***/ }),

/***/ "./src/descriptor_runner/core/modelTransform.ts":
/*!******************************************************!*\
  !*** ./src/descriptor_runner/core/modelTransform.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.findTensorReleaseTiming = exports.modelTransform = void 0;\nconst logging_1 = __webpack_require__(/*! ../logging */ \"./src/descriptor_runner/logging.ts\");\nconst logger = logging_1.WebDNNLogging.getLogger(\"WebDNN.modelTransform\");\nfunction modelTransform(model, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nbackendOrder) {\n    /*\n     * TODO: implementation\n     * if (backendOrder.includes(\"webgl\")) {\n     *   const webglContext = WebDNNWebGLContext.getInstance();\n     *   if (webglContext.webgl2 && webglContext.canOnlyReadRGBA) {\n     *     outputPackRGBA(graph, backendOrder);\n     *   }\n     * }\n     */\n    renameDuplicatedNode(model);\n}\nexports.modelTransform = modelTransform;\nfunction renameDuplicatedNode(model) {\n    const usedNames = new Set();\n    for (const node of model.graph.node) {\n        let origName = node.name;\n        if (!origName) {\n            origName = \"unnamed\";\n        }\n        if (usedNames.has(origName)) {\n            let newName = origName + \"_\";\n            while (usedNames.has(newName)) {\n                newName = newName + \"_\";\n            }\n            node.name = newName;\n            usedNames.add(newName);\n            logger.warn(`node name ${origName} is already used: renaming to ${newName}`);\n        }\n        else {\n            usedNames.add(origName);\n        }\n    }\n}\n/**\n * テンソルを開放するタイミングを計算する。\n * @param model 計算対象のモデル\n * @returns key: オペレータ名, value: そのオペレータ完了直後に開放するテンソルの名前\n */\nfunction findTensorReleaseTiming(model, initializerTensorNames) {\n    const lastReferencedAt = new Map(), graph = model.graph;\n    for (const node of graph.node) {\n        for (const inputName of node.input) {\n            lastReferencedAt.set(inputName, node.name);\n        }\n    }\n    // Optimized modelではgraph.initializer以外からテンソルを読み込むため、実際に読み込まれたテンソル名リストを用いる\n    for (const initializer of initializerTensorNames) {\n        lastReferencedAt.delete(initializer);\n    }\n    for (const input of graph.input) {\n        lastReferencedAt.delete(input.name);\n    }\n    for (const output of graph.output) {\n        lastReferencedAt.delete(output.name);\n    }\n    const timing = new Map();\n    for (const [name, last] of lastReferencedAt.entries()) {\n        const t = timing.get(last) || [];\n        t.push(name);\n        timing.set(last, t);\n    }\n    return timing;\n}\nexports.findTensorReleaseTiming = findTensorReleaseTiming;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/core/modelTransform.ts?");

/***/ }),

/***/ "./src/descriptor_runner/core/operatorTable.ts":
/*!*****************************************************!*\
  !*** ./src/descriptor_runner/core/operatorTable.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.instantiateOperator = exports.registerOperators = void 0;\nconst registeredOperators = {};\nfunction registerOperator(operatorEntry) {\n    if (!(operatorEntry.opType in registeredOperators)) {\n        registeredOperators[operatorEntry.opType] = [];\n    }\n    registeredOperators[operatorEntry.opType].push(operatorEntry);\n}\nfunction registerOperators(operatorEntries) {\n    for (const entry of operatorEntries) {\n        registerOperator(entry);\n    }\n}\nexports.registerOperators = registerOperators;\nfunction instantiateOperator(opType, opset, backendOrder, currentTensorsBackends) {\n    const entries = registeredOperators[opType];\n    if (!entries) {\n        return null;\n    }\n    let localBackendOrder = backendOrder;\n    // 特殊なオペレータ\n    switch (opType) {\n        case \"Flatten\":\n        case \"Pad\":\n        case \"Reshape\":\n        case \"Squeeze\":\n        case \"Transpose\":\n        case \"Unsqueeze\":\n            // データ側テンソル(currentTensorsBackends[0])のあるオペレータ上で実行\n            for (const backend of backendOrder) {\n                if (currentTensorsBackends[0].includes(backend)) {\n                    localBackendOrder = [backend];\n                }\n            }\n            break;\n        case \"Shape\":\n            // 常にCPU\n            localBackendOrder = [\"cpu\"];\n            break;\n    }\n    for (const backend of localBackendOrder) {\n        for (const entry of entries) {\n            if (entry.backend !== backend) {\n                continue;\n            }\n            if (entry.opsetMin > opset) {\n                continue;\n            }\n            if (entry.opsetMax != null && entry.opsetMax <= opset) {\n                continue;\n            }\n            return entry.factory();\n        }\n    }\n    return null;\n}\nexports.instantiateOperator = instantiateOperator;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/core/operatorTable.ts?");

/***/ }),

/***/ "./src/descriptor_runner/core/outputProxy.ts":
/*!***************************************************!*\
  !*** ./src/descriptor_runner/core/outputProxy.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OutputProxy = void 0;\nconst constants_1 = __webpack_require__(/*! ../interface/core/constants */ \"./src/descriptor_runner/interface/core/constants.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../operators/operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nclass OutputProxy {\n    constructor(dims, dataType) {\n        this.dataType = dataType;\n        this.dims = dims;\n        const length = operatorUtil_1.arrayProd(dims);\n        this.length = length;\n        for (let i = 0; i < length; i++) {\n            this[i] = 0;\n        }\n    }\n    set(array) {\n        for (let i = 0; i < array.length; i++) {\n            this[i] = array[i];\n        }\n    }\n    toActual() {\n        const ta = new constants_1.DataArrayConstructor[this.dataType](this.length);\n        for (let i = 0; i < this.length; i++) {\n            ta[i] = this[i];\n        }\n        return ta;\n    }\n}\nexports.OutputProxy = OutputProxy;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/core/outputProxy.ts?");

/***/ }),

/***/ "./src/descriptor_runner/core/runnerImpl.ts":
/*!**************************************************!*\
  !*** ./src/descriptor_runner/core/runnerImpl.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RunnerImpl = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nconst onnx_proto_1 = __webpack_require__(/*! onnx-proto */ \"./node_modules/onnx-proto/dist/onnx.js\");\nconst constants_1 = __webpack_require__(/*! ../interface/core/constants */ \"./src/descriptor_runner/interface/core/constants.ts\");\nconst util_1 = __webpack_require__(/*! ../util */ \"./src/descriptor_runner/util.ts\");\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"./node_modules/long/src/long.js\"));\nconst inputProxy_1 = __webpack_require__(/*! ./inputProxy */ \"./src/descriptor_runner/core/inputProxy.ts\");\nconst outputProxy_1 = __webpack_require__(/*! ./outputProxy */ \"./src/descriptor_runner/core/outputProxy.ts\");\nconst modelTransform_1 = __webpack_require__(/*! ./modelTransform */ \"./src/descriptor_runner/core/modelTransform.ts\");\nconst operatorTable_1 = __webpack_require__(/*! ./operatorTable */ \"./src/descriptor_runner/core/operatorTable.ts\");\nconst tensorLoaderImpl_1 = __webpack_require__(/*! ./tensorLoaderImpl */ \"./src/descriptor_runner/core/tensorLoaderImpl.ts\");\nconst logging_1 = __webpack_require__(/*! ../logging */ \"./src/descriptor_runner/logging.ts\");\nconst logger = logging_1.WebDNNLogging.getLogger(\"WebDNN.runner\");\nclass RunnerImpl {\n    constructor(backendOrder, backendContexts) {\n        this.backendOrder = backendOrder;\n        this.backendContexts = backendContexts;\n        this.backendName = this.backendOrder[0];\n        this.loaded = false;\n        this.useCompatibilityProxy = false;\n        this.tensorMoveOptions = {};\n        this.forceOperatorBackendOrder = {};\n    }\n    getTensorLoader(path) {\n        return new tensorLoaderImpl_1.TensorLoaderImpl(path, this.backendContexts.cpu);\n    }\n    async loadModel(directory, onnxBasename, progressCallback) {\n        const f = await fetch(directory + onnxBasename), b = await f.arrayBuffer();\n        this.model = onnx_proto_1.onnx.ModelProto.decode(new Uint8Array(b));\n        modelTransform_1.modelTransform(this.model, this.backendOrder);\n        if (this.model.opsetImport.length !== 1) {\n            logger.warn(`Specifying multiple opset_import is not supported. Using first one.`);\n        }\n        this.opset = util_1.intOrLongToInt(this.model.opsetImport[0].version);\n        this.initializerTensors = new Map();\n        for (const [name, tensor] of this.extractInitializerTensor().entries()) {\n            this.initializerTensors.set(name, tensor);\n        }\n        for (const [name, tensor] of (await this.loadExternalInitializerTensor(directory, progressCallback)).entries()) {\n            this.initializerTensors.set(name, tensor);\n        }\n        if (this.useCompatibilityProxy) {\n            this.initInputProxy();\n            this.initOutputProxy();\n        }\n        this.copiedInitializerTensors = new Map();\n        for (const backend of this.backendOrder) {\n            if (backend !== \"cpu\") {\n                this.copiedInitializerTensors.set(backend, new Map());\n            }\n        }\n        this.inputsWithoutInitializer = this.model.graph.input.filter((v) => v.name && !this.initializerTensors.has(v.name));\n        for (const md of this.model.metadataProps) {\n            if (md.key === \"WebDNN2.TensorMoveOptions\") {\n                this.tensorMoveOptions = JSON.parse(md.value);\n            }\n            if (md.key === \"WebDNN2.ForceOperatorBackendOrder\") {\n                this.forceOperatorBackendOrder = JSON.parse(md.value);\n            }\n        }\n        this.loaded = true;\n    }\n    extractInitializerTensor() {\n        var _a, _b, _c;\n        const tensors = new Map();\n        for (const initializer of this.model.graph.initializer) {\n            const dims = util_1.intOrLongToIntVector(initializer.dims);\n            if (initializer.dataType === onnx_proto_1.onnx.TensorProto.DataType.FLOAT) {\n                if ((_a = initializer.rawData) === null || _a === void 0 ? void 0 : _a.byteLength) {\n                    // Float32Array(initializer.rawData!.buffer) は不可(4byteにアライメントされていない場合がある)\n                    const newBuffer = new Uint8Array(initializer.rawData.byteLength);\n                    newBuffer.set(initializer.rawData);\n                    tensors.set(initializer.name, this.backendContexts.cpu.emptyTensor(dims, \"float32\", new Float32Array(newBuffer.buffer, 0, newBuffer.byteLength / Float32Array.BYTES_PER_ELEMENT)));\n                }\n                else if (initializer.floatData) {\n                    tensors.set(initializer.name, this.backendContexts.cpu.emptyTensor(dims, \"float32\", new Float32Array(initializer.floatData)));\n                }\n            }\n            else if (initializer.dataType === onnx_proto_1.onnx.TensorProto.DataType.INT64) {\n                // 1要素が8byte (int64)\n                if ((_b = initializer.rawData) === null || _b === void 0 ? void 0 : _b.byteLength) {\n                    const rawData = initializer.rawData, view = new DataView(rawData.buffer, rawData.byteOffset, rawData.byteLength), ab = new Int32Array(view.byteLength / 8);\n                    for (let idx = 0; idx < ab.length; idx++) {\n                        ab[idx] = util_1.clipLong(new long_1.default(view.getUint32(idx * 8, true), view.getUint32(idx * 8 + 4, true)));\n                    }\n                    tensors.set(initializer.name, this.backendContexts.cpu.emptyTensor(dims, \"int32\", ab));\n                }\n                else if (initializer.int64Data) {\n                    tensors.set(initializer.name, this.backendContexts.cpu.emptyTensor(dims, \"int32\", new Int32Array(util_1.intOrLongToIntVector(initializer.int64Data))));\n                }\n            }\n            else if (initializer.dataType === onnx_proto_1.onnx.TensorProto.DataType.INT32) {\n                if ((_c = initializer.rawData) === null || _c === void 0 ? void 0 : _c.byteLength) {\n                    // 1要素が4byte (int32)\n                    const rawData = initializer.rawData, view = new DataView(rawData.buffer, rawData.byteOffset, rawData.byteLength), ab = new Int32Array(view.byteLength / 4);\n                    for (let idx = 0; idx < ab.length; idx++) {\n                        ab[idx] = view.getInt32(idx * 4, true);\n                    }\n                    tensors.set(initializer.name, this.backendContexts.cpu.emptyTensor(dims, \"int32\", ab));\n                }\n                else if (initializer.int32Data) {\n                    tensors.set(initializer.name, this.backendContexts.cpu.emptyTensor(dims, \"int32\", new Int32Array(initializer.int32Data)));\n                }\n            }\n            else {\n                throw new Error(`Unsupported initializer dataType ${initializer.dataType}`);\n            }\n        }\n        return tensors;\n    }\n    async loadExternalInitializerTensor(directory, progressCallback) {\n        let totalExpectedSize = null;\n        for (const md of this.model.metadataProps) {\n            if (md.key === \"WebDNN2.WeightSizes\") {\n                totalExpectedSize = 0;\n                for (const sizeStr of md.value.split(\":\")) {\n                    totalExpectedSize += Number(sizeStr);\n                }\n            }\n        }\n        for (const md of this.model.metadataProps) {\n            if (md.key === \"WebDNN2.WeightPaths\") {\n                const paths = md.value.split(\":\").map((bn) => directory + bn);\n                const loader = this.getTensorLoader(paths);\n                let cb = undefined;\n                if (totalExpectedSize && progressCallback) {\n                    const ex = totalExpectedSize;\n                    cb = (loadedBytes) => {\n                        progressCallback(loadedBytes, ex);\n                    };\n                }\n                return loader.loadAll(cb);\n            }\n        }\n        if (progressCallback) {\n            logger.warn(`progressCallback is currently supported when loading optimized model.`);\n        }\n        return new Map();\n    }\n    getIOProxyShape(vi) {\n        var _a, _b, _c, _d, _e, _f;\n        const shape = util_1.nonnull((_d = (_c = (_b = (_a = vi.type) === null || _a === void 0 ? void 0 : _a.tensorType) === null || _b === void 0 ? void 0 : _b.shape) === null || _c === void 0 ? void 0 : _c.dim) === null || _d === void 0 ? void 0 : _d.map((d) => util_1.intOrLongToInt(util_1.nonnull(d.dimValue))));\n        let dataType;\n        switch ((_f = (_e = vi.type) === null || _e === void 0 ? void 0 : _e.tensorType) === null || _f === void 0 ? void 0 : _f.elemType) {\n            case onnx_proto_1.onnx.TensorProto.DataType.FLOAT:\n                dataType = \"float32\";\n                break;\n            case onnx_proto_1.onnx.TensorProto.DataType.INT32:\n            case onnx_proto_1.onnx.TensorProto.DataType.INT64:\n                dataType = \"int32\";\n                break;\n            default:\n                throw new Error();\n        }\n        return { shape, dataType };\n    }\n    initInputProxy() {\n        this.inputs = this.inputsWithoutInitializer.map((input) => {\n            const { shape, dataType } = this.getIOProxyShape(input);\n            return new inputProxy_1.InputProxy(shape, dataType);\n        });\n    }\n    initOutputProxy() {\n        var _a;\n        const graph = util_1.nonnull((_a = this.model) === null || _a === void 0 ? void 0 : _a.graph);\n        this.outputs = graph.output.map((input) => {\n            const { shape, dataType } = this.getIOProxyShape(input);\n            return new outputProxy_1.OutputProxy(shape, dataType);\n        });\n    }\n    getInputNames() {\n        return this.inputsWithoutInitializer.map((gi) => gi.name);\n    }\n    getOutputNames() {\n        var _a;\n        const graph = util_1.nonnull((_a = this.model) === null || _a === void 0 ? void 0 : _a.graph);\n        return graph.output.map((gi) => gi.name);\n    }\n    async run(inputs, options = {}) {\n        var _a, _b;\n        if (!this.model || !this.loaded) {\n            throw new Error(\"not initialized\");\n        }\n        const graph = util_1.nonnull(this.model.graph), tensorsForBackends = {\n            cpu: new Map(),\n            wasm: new Map(),\n            webgl: new Map(),\n            webgpu: new Map(),\n        };\n        for (const [name, tensor] of this.initializerTensors.entries()) {\n            tensorsForBackends.cpu.set(name, tensor);\n        }\n        for (const [backend, kv] of this.copiedInitializerTensors.entries()) {\n            for (const [name, tensor] of kv.entries()) {\n                tensorsForBackends[backend].set(name, tensor);\n            }\n        }\n        if (!inputs) {\n            // From inputProxy\n            if (this.useCompatibilityProxy) {\n                inputs = this.inputs.map((v) => {\n                    const t = this.backendContexts.cpu.emptyTensor(v.dims, v.dataType);\n                    t.data.set(v);\n                    return t;\n                });\n            }\n            else {\n                throw new Error();\n            }\n        }\n        // 入力設定\n        if (this.inputsWithoutInitializer.length !== inputs.length) {\n            throw new Error(\"length of inputs mismatch\");\n        }\n        for (let i = 0; i < inputs.length; i++) {\n            const graphInput = this.inputsWithoutInitializer[i];\n            // if (graphInput.type!.tensorType!.elemType !== 1) {\n            //   throw new Error(\"graph input type must be float32\");\n            // }\n            tensorsForBackends.cpu.set(graphInput.name, inputs[i]);\n        }\n        const tensorReleaseTiming = modelTransform_1.findTensorReleaseTiming(this.model, new Set(this.initializerTensors.keys())), nodePerformances = [];\n        for (let i = 0; i < graph.node.length; i++) {\n            const nodeStartTime = Date.now(), node = graph.node[i], opType = util_1.nonnull(node.opType);\n            let actualBackend, actualInputDims, actualOutputDims, backendOrderForNode = this.forceOperatorBackendOrder[node.name] || this.backendOrder;\n            let firstTry = true;\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                try {\n                    // テンソルがどこにあるのか調べる\n                    const currentTensorsBackends = [];\n                    for (let j = 0; j < node.input.length; j++) {\n                        const inputName = node.input[j], bs = [];\n                        for (const backend of backendOrderForNode) {\n                            if (tensorsForBackends[backend].has(inputName)) {\n                                bs.push(backend);\n                            }\n                        }\n                        if (bs.length === 0) {\n                            // forceOperatorBackendOrder == [\"webgl\"]のような場合に、cpu上にあるTensorをスキャンする\n                            for (const backend of constants_1.backends) {\n                                if (tensorsForBackends[backend].has(inputName)) {\n                                    bs.push(backend);\n                                }\n                            }\n                        }\n                        currentTensorsBackends.push(bs);\n                    }\n                    const operator = operatorTable_1.instantiateOperator(opType, this.opset, backendOrderForNode, currentTensorsBackends);\n                    if (!operator) {\n                        throw new Error(`Operator implementation for ${opType}, opset=${this.opset} does not exist.`);\n                    }\n                    operator.initialize(util_1.nonnull(node.attribute));\n                    const tensorBackendRequirement = operator.getTensorBackendRequirement(node.input.length, node.output.length), \n                    // 入力を集める\n                    operatorInputs = [];\n                    for (let j = 0; j < node.input.length; j++) {\n                        const inputName = node.input[j], reqBackend = tensorBackendRequirement[j];\n                        if (!reqBackend) {\n                            // どこでもいい\n                            const t = tensorsForBackends[currentTensorsBackends[j][0]].get(inputName);\n                            if (!t) {\n                                throw new Error();\n                            }\n                            operatorInputs.push(t);\n                        }\n                        else {\n                            const t = tensorsForBackends[reqBackend].get(inputName);\n                            if (t) {\n                                operatorInputs.push(t);\n                            }\n                            else {\n                                let found = false;\n                                for (const otherBackend of this.backendOrder) {\n                                    const otherT = tensorsForBackends[otherBackend].get(inputName);\n                                    if (otherT) {\n                                        const tensorMoveOption = this.tensorMoveOptions[inputName] || {}, movedT = await this.backendContexts[reqBackend].moveTensor(otherT, tensorMoveOption);\n                                        tensorsForBackends[reqBackend].set(inputName, movedT);\n                                        operatorInputs.push(movedT);\n                                        found = true;\n                                        break;\n                                    }\n                                }\n                                if (!found) {\n                                    throw new Error(`Input ${inputName} not found`);\n                                }\n                            }\n                        }\n                    }\n                    let context = {};\n                    switch (operator.backend) {\n                        case \"wasm\":\n                            context = this.backendContexts.wasm;\n                            break;\n                        case \"webgpu\":\n                            context = this.backendContexts.webgpu;\n                            break;\n                        case \"webgl\":\n                            context = this.backendContexts.webgl;\n                            break;\n                        case \"cpu\":\n                            context = this.backendContexts.cpu;\n                            break;\n                        default:\n                            throw new Error();\n                    }\n                    logger.debug(`Running ${node.name}(${opType}) on ${operator.backend}`);\n                    if (options.measurePerformance && operator.backend === \"webgl\") {\n                        (_a = this.backendContexts[\"webgl\"]) === null || _a === void 0 ? void 0 : _a.enablePerformanceQuery(`${node.name}(${opType})`);\n                    }\n                    const operatorOutputs = await operator.run(context, operatorInputs, node.output.length);\n                    actualInputDims = operatorInputs.map((t) => t.dims);\n                    actualOutputDims = operatorOutputs.map((t) => t.dims);\n                    for (let j = 0; j < node.output.length; j++) {\n                        const outputName = node.output[j];\n                        tensorsForBackends[operatorOutputs[j].backend].set(outputName, operatorOutputs[j]);\n                    }\n                    actualBackend = operator.backend;\n                    break;\n                }\n                catch (error) {\n                    if (firstTry) {\n                        logger.warn(`Failed to run ${node.name}. Retrying on cpu.`, error);\n                        firstTry = false;\n                        backendOrderForNode = [\"cpu\"];\n                        continue;\n                    }\n                    else {\n                        throw error;\n                    }\n                }\n            }\n            const tensorNamesToRelease = tensorReleaseTiming.get(node.name) || [];\n            for (const name of tensorNamesToRelease) {\n                for (const backend of Object.keys(tensorsForBackends)) {\n                    const t = tensorsForBackends[backend].get(name);\n                    if (t) {\n                        t.dispose();\n                        tensorsForBackends[backend].delete(name);\n                    }\n                }\n            }\n            const nodeEndTime = Date.now();\n            nodePerformances.push({\n                opType: node.opType,\n                name: node.name,\n                backend: actualBackend,\n                inputDims: actualInputDims,\n                outputDims: actualOutputDims,\n                elapsed: nodeEndTime - nodeStartTime,\n            });\n        }\n        const outputs = [];\n        for (let j = 0; j < graph.output.length; j++) {\n            const outputInfo = graph.output[j];\n            let outputTensor = tensorsForBackends.cpu.get(outputInfo.name);\n            if (!outputTensor) {\n                for (const otherBackend of this.backendOrder) {\n                    const otherT = tensorsForBackends[otherBackend].get(outputInfo.name);\n                    if (otherT) {\n                        const movedT = await this.backendContexts.cpu.moveTensor(otherT, {});\n                        tensorsForBackends.cpu.set(outputInfo.name, movedT);\n                        outputTensor = movedT;\n                        break;\n                    }\n                }\n            }\n            if (!outputTensor) {\n                throw new Error(`Output ${outputInfo.name} not found`);\n            }\n            if (this.useCompatibilityProxy) {\n                // Copy value to output proxy\n                this.outputs[j].set(outputTensor.data);\n            }\n            outputs.push(outputTensor);\n        }\n        for (const backend of constants_1.backendsWithoutCPU) {\n            for (const [name, t] of tensorsForBackends[backend].entries()) {\n                if (this.initializerTensors.has(name)) {\n                    this.copiedInitializerTensors.get(backend).set(name, t);\n                }\n                else {\n                    t.dispose();\n                }\n            }\n        }\n        if (options.measurePerformance) {\n            logger.debug(\"Performance\", nodePerformances);\n            try {\n                const webglPerformance = await ((_b = this.backendContexts.webgl) === null || _b === void 0 ? void 0 : _b.gatherPerformanceQueryResult());\n                logger.debug(\"WebGL Performance\", webglPerformance);\n            }\n            catch (_c) {\n                logger.warn(\"Failed to get WebGL Performance\");\n            }\n        }\n        return outputs;\n    }\n}\nexports.RunnerImpl = RunnerImpl;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/core/runnerImpl.ts?");

/***/ }),

/***/ "./src/descriptor_runner/core/tensorDecoder/decodeTensorEightbit.ts":
/*!**************************************************************************!*\
  !*** ./src/descriptor_runner/core/tensorDecoder/decodeTensorEightbit.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decodeTensorEightbit = void 0;\nconst onnx_proto_1 = __webpack_require__(/*! onnx-proto */ \"./node_modules/onnx-proto/dist/onnx.js\");\nconst pako_1 = __webpack_require__(/*! pako */ \"./node_modules/pako/index.js\");\nconst decodeTable = [\n    0.0, 2.750000021e-6, 7.249999726e-6, 1.875000089e-5, 3.624999954e-5,\n    5.874999624e-5, 8.624999464e-5, 1.437500032e-4, 2.312500001e-4,\n    3.187500115e-4, 4.062500084e-4, 5.187499919e-4, 6.562499912e-4,\n    7.937499322e-4, 9.312499315e-4, 1.218750025e-3, 1.65624998e-3, 2.093750052e-3,\n    2.531250007e-3, 2.968749963e-3, 3.406249918e-3, 3.843750106e-3,\n    4.281249829e-3, 4.843750037e-3, 5.531250034e-3, 6.218749564e-3, 6.90624956e-3,\n    7.593749557e-3, 8.281249553e-3, 8.968749084e-3, 9.656248614e-3,\n    1.109374966e-2, 1.328125037e-2, 1.546875015e-2, 1.765624993e-2, 1.98437497e-2,\n    2.203124948e-2, 2.421874925e-2, 2.640625089e-2, 2.859375067e-2,\n    3.078125045e-2, 3.296874836e-2, 3.515625e-2, 3.734375164e-2, 3.953124955e-2,\n    4.171875119e-2, 4.390624911e-2, 4.671875015e-2, 5.01562506e-2, 5.359374732e-2,\n    5.703124776e-2, 6.046874821e-2, 6.390624493e-2, 6.734374911e-2,\n    7.078124583e-2, 7.421874255e-2, 7.765624672e-2, 8.109374344e-2,\n    8.453124017e-2, 8.796874434e-2, 9.140624106e-2, 9.484373778e-2,\n    9.828124195e-2, 1.0546875e-1, 1.16406247e-1, 1.27343744e-1, 1.38281256e-1,\n    1.49218753e-1, 1.6015625e-1, 1.71093747e-1, 1.82031244e-1, 1.92968756e-1,\n    2.03906253e-1, 2.1484375e-1, 2.25781247e-1, 2.36718744e-1, 2.47656256e-1,\n    2.585937381e-1, 2.6953125e-1, 2.804687619e-1, 2.91406244e-1, 3.02343756e-1,\n    3.132812381e-1, 3.2421875e-1, 3.351562619e-1, 3.46093744e-1, 3.57031256e-1,\n    3.679687381e-1, 3.7890625e-1, 3.898437619e-1, 4.00781244e-1, 4.11718756e-1,\n    4.226562381e-1, 4.3359375e-1, 4.445312619e-1, 4.58593756e-1, 4.757812321e-1,\n    4.929687381e-1, 5.101562142e-1, 5.2734375e-1, 5.445312262e-1, 5.617187023e-1,\n    5.789062381e-1, 5.960937142e-1, 6.1328125e-1, 6.304687262e-1, 6.476562023e-1,\n    6.648437381e-1, 6.820312142e-1, 6.992186904e-1, 7.164062262e-1,\n    7.335937023e-1, 7.507811785e-1, 7.679687142e-1, 7.851561904e-1,\n    8.023436666e-1, 8.195312023e-1, 8.367186785e-1, 8.539061546e-1,\n    8.710936904e-1, 8.882811666e-1, 9.054686427e-1, 9.226561785e-1,\n    9.398436546e-1, 9.570311308e-1, 9.742186666e-1, 9.914061427e-1, 1.0,\n];\nfunction decodeTensorEightbit(buf, bodyByteOffset, bodyCompressedLength, dataType, numel) {\n    if (dataType !== onnx_proto_1.onnx.TensorProto.DataType.FLOAT) {\n        throw new Error(\"Unsupported DataType\");\n    }\n    const view = new DataView(buf, bodyByteOffset, bodyCompressedLength), codeByteLength = view.getUint32(0, true), scale = view.getFloat32(4, true), decompressed = pako_1.inflate(new Uint8Array(buf, bodyByteOffset + 8, codeByteLength)), scaledTable = new Float32Array(256);\n    for (let i = 0; i < 256; i++) {\n        scaledTable[i] = decodeTable[i & 0x7f] * scale * (i < 128 ? 1.0 : -1.0);\n    }\n    const data = new Float32Array(numel);\n    for (let i = 0; i < numel; i++) {\n        data[i] = scaledTable[decompressed[i]];\n    }\n    return data;\n}\nexports.decodeTensorEightbit = decodeTensorEightbit;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/core/tensorDecoder/decodeTensorEightbit.ts?");

/***/ }),

/***/ "./src/descriptor_runner/core/tensorDecoder/decodeTensorRaw.ts":
/*!*********************************************************************!*\
  !*** ./src/descriptor_runner/core/tensorDecoder/decodeTensorRaw.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decodeTensorRaw = void 0;\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"./node_modules/long/src/long.js\"));\nconst onnx_proto_1 = __webpack_require__(/*! onnx-proto */ \"./node_modules/onnx-proto/dist/onnx.js\");\nconst util_1 = __webpack_require__(/*! ../../util */ \"./src/descriptor_runner/util.ts\");\nfunction decodeTensorRaw(buf, bodyByteOffset, bodyCompressedLength, dataType, numel) {\n    let data;\n    switch (dataType) {\n        case onnx_proto_1.onnx.TensorProto.DataType.FLOAT:\n            data = new Float32Array(numel);\n            break;\n        case onnx_proto_1.onnx.TensorProto.DataType.INT32:\n            data = new Int32Array(numel);\n            break;\n        case onnx_proto_1.onnx.TensorProto.DataType.INT64: {\n            data = new Int32Array(numel);\n            const view = new DataView(buf, bodyByteOffset, numel * 8);\n            for (let idx = 0; idx < numel; idx++) {\n                data[idx] = util_1.clipLong(new long_1.default(view.getUint32(idx * 8, true), view.getUint32(idx * 8 + 4, true)));\n            }\n            return data;\n        }\n        default:\n            throw new Error(\"Unsupported DataType\");\n    }\n    // Buf may not be aligned\n    const dataUint8View = new Uint8Array(data.buffer), srcUint8View = new Uint8Array(buf, bodyByteOffset, data.byteLength);\n    dataUint8View.set(srcUint8View);\n    return data;\n}\nexports.decodeTensorRaw = decodeTensorRaw;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/core/tensorDecoder/decodeTensorRaw.ts?");

/***/ }),

/***/ "./src/descriptor_runner/core/tensorImpl.ts":
/*!**************************************************!*\
  !*** ./src/descriptor_runner/core/tensorImpl.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TensorImpl = void 0;\nclass TensorImpl {\n    constructor(dims, dataType, backend) {\n        this.dataType = dataType;\n        this.backend = backend;\n        this.dims = dims.slice(); // 呼び出し元で誤って書き換えることを防止\n        this.ndim = dims.length;\n        let length = 1;\n        const strides = [];\n        for (let d = dims.length - 1; d >= 0; d--) {\n            const dim = dims[d];\n            strides.unshift(length);\n            length *= dim;\n        }\n        this.length = length;\n        this.strides = strides;\n    }\n}\nexports.TensorImpl = TensorImpl;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/core/tensorImpl.ts?");

/***/ }),

/***/ "./src/descriptor_runner/core/tensorLoaderImpl.ts":
/*!********************************************************!*\
  !*** ./src/descriptor_runner/core/tensorLoaderImpl.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TensorLoaderImpl = void 0;\nconst onnx_proto_1 = __webpack_require__(/*! onnx-proto */ \"./node_modules/onnx-proto/dist/onnx.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"./src/descriptor_runner/util.ts\");\nconst decodeTensorEightbit_1 = __webpack_require__(/*! ./tensorDecoder/decodeTensorEightbit */ \"./src/descriptor_runner/core/tensorDecoder/decodeTensorEightbit.ts\");\nconst decodeTensorRaw_1 = __webpack_require__(/*! ./tensorDecoder/decodeTensorRaw */ \"./src/descriptor_runner/core/tensorDecoder/decodeTensorRaw.ts\");\nconst signatureFile = 843990103, // \"WDN2\"\nsignatureTensor = 1397638484, // \"TENS\"\nsignautreClose = 1397705795; // \"CLOS\"\nclass TensorLoaderImpl {\n    constructor(path, cpuContext) {\n        this.cpuContext = cpuContext;\n        if (typeof path === \"string\") {\n            this.paths = [path];\n        }\n        else {\n            this.paths = path;\n        }\n    }\n    async loadAll(progressCallback) {\n        const fileArray = await this.fetchAllFile(progressCallback), view = new DataView(fileArray.buffer, fileArray.byteOffset, fileArray.byteLength);\n        if (signatureFile !== view.getUint32(0, true)) {\n            throw new Error(\"Unexpected file signature\");\n        }\n        let offset = 4;\n        const tensors = new Map();\n        let close = false;\n        while (!close) {\n            const chunkInfo = this.extractChunk(fileArray.buffer, offset);\n            switch (chunkInfo.signature) {\n                case signatureTensor:\n                    {\n                        const { name, tensor } = this.parseTensorChunk(fileArray.buffer, chunkInfo.bodyByteOffset, chunkInfo.bodyByteLength);\n                        tensors.set(name, tensor);\n                    }\n                    break;\n                case signautreClose:\n                    close = true;\n                    break;\n            }\n            offset = chunkInfo.nextByteOffset;\n        }\n        return tensors;\n    }\n    async fetchAllFile(progressCallback) {\n        const abs = [];\n        let loadedBytes = 0;\n        progressCallback === null || progressCallback === void 0 ? void 0 : progressCallback(loadedBytes);\n        for (const path of this.paths) {\n            const f = await fetch(path), ab = await f.arrayBuffer();\n            abs.push(ab);\n            loadedBytes += ab.byteLength;\n            progressCallback === null || progressCallback === void 0 ? void 0 : progressCallback(loadedBytes);\n        }\n        const totalLength = util_1.arraySum(abs.map((ab) => ab.byteLength)), concatArray = new Uint8Array(totalLength);\n        let ofs = 0;\n        for (const ab of abs) {\n            const src = new Uint8Array(ab);\n            concatArray.set(src, ofs);\n            ofs += src.byteLength;\n        }\n        return concatArray;\n    }\n    extractChunk(buf, byteOffset) {\n        const view = new DataView(buf, byteOffset);\n        if (view.byteLength < 8) {\n            throw new Error(\"Unexpected EOF\");\n        }\n        const signature = view.getUint32(0, true), bodyByteLength = view.getUint32(4, true), bodyByteOffset = byteOffset + 8;\n        if (view.byteLength < 8 + bodyByteLength) {\n            throw new Error(\"Unexpected EOF\");\n        }\n        const nextByteOffset = bodyByteOffset + bodyByteLength;\n        return { signature, bodyByteLength, bodyByteOffset, nextByteOffset };\n    }\n    parseTensorChunk(buf, bodyByteOffset, bodyByteLength) {\n        const view = new DataView(buf, bodyByteOffset, bodyByteLength);\n        let ofs = 0;\n        const compressionAlgorithm = view.getUint8(ofs);\n        ofs += 1;\n        const bodyCompressedLength = view.getUint32(ofs, true);\n        ofs += 4;\n        const dataType = view.getUint8(ofs);\n        ofs += 1;\n        const ndim = view.getUint8(ofs);\n        ofs += 1;\n        const dims = [];\n        for (let i = 0; i < ndim; i++) {\n            dims.push(view.getUint32(ofs, true));\n            ofs += 4;\n        }\n        const numel = util_1.arrayProd(dims), nameLength = view.getUint32(ofs, true);\n        ofs += 4;\n        const name = this.parseString(buf, bodyByteOffset + ofs, nameLength);\n        ofs += nameLength;\n        const extraLength = view.getUint32(ofs, true);\n        ofs += 4;\n        // Skip extra data\n        ofs += extraLength;\n        const data = this.parseTensorBody(buf, compressionAlgorithm, bodyByteOffset + ofs, bodyCompressedLength, dataType, numel);\n        let dataTypeString;\n        switch (dataType) {\n            case onnx_proto_1.onnx.TensorProto.DataType.FLOAT:\n                dataTypeString = \"float32\";\n                break;\n            case onnx_proto_1.onnx.TensorProto.DataType.INT32:\n                dataTypeString = \"int32\";\n                break;\n            default:\n                throw new Error(\"Unsupported DataType\");\n        }\n        const tensor = this.cpuContext.emptyTensor(dims, dataTypeString, data);\n        return { name, tensor };\n    }\n    parseString(buf, byteOffset, byteLength) {\n        const view = new Uint8Array(buf, byteOffset, byteLength);\n        // TODO: support UTF-8\n        return String.fromCharCode(...Array.from(view));\n    }\n    parseTensorBody(buf, compressionAlgorithm, bodyByteOffset, bodyCompressedLength, dataType, numel) {\n        switch (compressionAlgorithm) {\n            case 0:\n                return decodeTensorRaw_1.decodeTensorRaw(buf, bodyByteOffset, bodyCompressedLength, dataType, numel);\n            case 1:\n                return decodeTensorEightbit_1.decodeTensorEightbit(buf, bodyByteOffset, bodyCompressedLength, dataType, numel);\n            default:\n                throw new Error(\"Unexpected compression algorithm\");\n        }\n    }\n}\nexports.TensorLoaderImpl = TensorLoaderImpl;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/core/tensorLoaderImpl.ts?");

/***/ }),

/***/ "./src/descriptor_runner/image.ts":
/*!****************************************!*\
  !*** ./src/descriptor_runner/image.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * @module webdnn/image\n * @preferred\n *\n * Module `WebDNN.Image` provides basic image processing operations like follows.\n *\n * - Load image by various way (File picker dialog, url string, canvas, video, etc.)\n * - Pack image data into TypedArray\n * - Crop and resize.\n * - Show result on canvas element\n *\n */\n/** Don't Remove This comment block */\n// Export * from \"./image/canvas\" // internal API\n__exportStar(__webpack_require__(/*! ./image/enums */ \"./src/descriptor_runner/image/enums.ts\"), exports);\n__exportStar(__webpack_require__(/*! ./image/image_array */ \"./src/descriptor_runner/image/image_array.ts\"), exports);\n// Export * from \"./image/image_data\" // internal API\n__exportStar(__webpack_require__(/*! ./image/image_source */ \"./src/descriptor_runner/image/image_source.ts\"), exports);\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/image.ts?");

/***/ }),

/***/ "./src/descriptor_runner/image/canvas.ts":
/*!***********************************************!*\
  !*** ./src/descriptor_runner/image/canvas.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * @module webdnn/image\n */\n/** Don't Remove This comment block */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getContext2D = void 0;\n/**\n * Get canvas rendering context and check whether it is nonnull value.\n *\n * @param {CanvasRenderingContext2D} canvas\n * @protected\n */\nfunction getContext2D(canvas) {\n    const context = canvas.getContext(\"2d\");\n    if (!context)\n        throw Error(\"CanvasRenderingContext2D initialization failed\");\n    return context;\n}\nexports.getContext2D = getContext2D;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/image/canvas.ts?");

/***/ }),

/***/ "./src/descriptor_runner/image/enums.ts":
/*!**********************************************!*\
  !*** ./src/descriptor_runner/image/enums.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * @module webdnn/image\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Color = exports.Order = void 0;\n/** Don't Remove This comment block */\n/**\n * The data order\n */\nvar Order;\n(function (Order) {\n    /** `[Channel, Height, Width]` format */\n    Order[Order[\"CHW\"] = 0] = \"CHW\";\n    /** `[Height, Width, Channel]` format */\n    Order[Order[\"HWC\"] = 1] = \"HWC\";\n})(Order = exports.Order || (exports.Order = {}));\n/**\n * The color format\n */\nvar Color;\n(function (Color) {\n    /** RGB format */\n    Color[Color[\"RGB\"] = 0] = \"RGB\";\n    /** BGR format */\n    Color[Color[\"BGR\"] = 1] = \"BGR\";\n    /** Grey scale */\n    Color[Color[\"GREY\"] = 2] = \"GREY\";\n    /** RGBA format */\n    Color[Color[\"RGBA\"] = 3] = \"RGBA\";\n    /** BGRA format */\n    Color[Color[\"BGRA\"] = 4] = \"BGRA\";\n})(Color = exports.Color || (exports.Color = {}));\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/image/enums.ts?");

/***/ }),

/***/ "./src/descriptor_runner/image/image_array.ts":
/*!****************************************************!*\
  !*** ./src/descriptor_runner/image/image_array.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * @module webdnn/image\n */\n/** Don't Remove This comment block */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setImageArrayToCanvas = exports.getImageArray = exports.getImageArrayFromDrawable = exports.getImageArrayFromCanvas = exports.getImageArrayFromImageData = void 0;\nconst canvas_1 = __webpack_require__(/*! ./canvas */ \"./src/descriptor_runner/image/canvas.ts\");\nconst enums_1 = __webpack_require__(/*! ./enums */ \"./src/descriptor_runner/image/enums.ts\");\nconst image_data_1 = __webpack_require__(/*! ./image_data */ \"./src/descriptor_runner/image/image_data.ts\");\nconst image_source_1 = __webpack_require__(/*! ./image_source */ \"./src/descriptor_runner/image/image_source.ts\");\n/**\n * @protected\n */\nfunction flatten(arr) {\n    return arr instanceof Array\n        ? Array.prototype.concat.apply([], arr.map((arr) => flatten(arr)))\n        : arr;\n}\n/**\n * @protected\n */\nfunction normalizeBiasTuple(arr) {\n    if (typeof arr === \"number\") {\n        return [arr, arr, arr, arr];\n    }\n    if (arr.length == 4) {\n        return [arr[0], arr[1], arr[2], arr[3]];\n    }\n    else if (arr.length == 3) {\n        return [arr[0], arr[1], arr[2], arr[0]];\n    }\n    else if (arr.length == 1) {\n        return [arr[0], arr[0], arr[0], arr[0]];\n    }\n    throw new Error(\"bias and scale must be scalar number or array of length 1 or 3 or 4.\");\n}\n/**\n * Get image array as `{Float32 or Int32}ArrayBufferView` from ImageData object.\n *\n * @returns {ArrayBufferView} buffer with specified type\n * @protected\n */\nfunction getImageArrayFromImageData(imageData, options = {}) {\n    const { type = Float32Array, color = enums_1.Color.RGB, order = enums_1.Order.HWC, bias = [0, 0, 0], scale = [1, 1, 1], } = options, bias_n = normalizeBiasTuple(bias), scale_n = normalizeBiasTuple(scale), { width } = imageData, { height } = imageData, { data } = imageData;\n    let array, biasA, biasB, biasG, biasR, scaleA, scaleB, scaleG, scaleR;\n    switch (color) {\n        case enums_1.Color.RGB:\n            array = new type(width * height * 3);\n            [scaleR, scaleG, scaleB] = scale_n;\n            [biasR, biasG, biasB] = bias_n;\n            switch (order) {\n                case enums_1.Order.HWC:\n                    for (let h = 0; h < height; h++) {\n                        for (let w = 0; w < width; w++) {\n                            array[(h * width + w) * 3 + 0] =\n                                (data[(h * width + w) * 4 + 0] - biasR) / scaleR;\n                            array[(h * width + w) * 3 + 1] =\n                                (data[(h * width + w) * 4 + 1] - biasG) / scaleG;\n                            array[(h * width + w) * 3 + 2] =\n                                (data[(h * width + w) * 4 + 2] - biasB) / scaleB;\n                        }\n                    }\n                    break;\n                case enums_1.Order.CHW:\n                    for (let h = 0; h < height; h++) {\n                        for (let w = 0; w < width; w++) {\n                            array[(0 * height + h) * width + w] =\n                                (data[(h * width + w) * 4 + 0] - biasR) / scaleR;\n                            array[(Number(height) + h) * width + w] =\n                                (data[(h * width + w) * 4 + 1] - biasG) / scaleG;\n                            array[(2 * height + h) * width + w] =\n                                (data[(h * width + w) * 4 + 2] - biasB) / scaleB;\n                        }\n                    }\n                    break;\n            }\n            break;\n        case enums_1.Color.BGR:\n            array = new type(width * height * 3);\n            [biasR, biasG, biasB] = bias_n;\n            [scaleR, scaleG, scaleB] = scale_n;\n            switch (order) {\n                case enums_1.Order.HWC:\n                    for (let h = 0; h < height; h++) {\n                        for (let w = 0; w < width; w++) {\n                            array[(h * width + w) * 3 + 0] =\n                                (data[(h * width + w) * 4 + 2] - biasB) / scaleB;\n                            array[(h * width + w) * 3 + 1] =\n                                (data[(h * width + w) * 4 + 1] - biasG) / scaleG;\n                            array[(h * width + w) * 3 + 2] =\n                                (data[(h * width + w) * 4 + 0] - biasR) / scaleR;\n                        }\n                    }\n                    break;\n                case enums_1.Order.CHW:\n                    for (let h = 0; h < height; h++) {\n                        for (let w = 0; w < width; w++) {\n                            array[(0 * height + h) * width + w] =\n                                (data[(h * width + w) * 4 + 2] - biasB) / scaleB;\n                            array[(Number(height) + h) * width + w] =\n                                (data[(h * width + w) * 4 + 1] - biasG) / scaleG;\n                            array[(2 * height + h) * width + w] =\n                                (data[(h * width + w) * 4 + 0] - biasR) / scaleR;\n                        }\n                    }\n                    break;\n            }\n            break;\n        case enums_1.Color.RGBA:\n            array = new type(width * height * 4);\n            [scaleR, scaleG, scaleB, scaleA] = scale_n;\n            [biasR, biasG, biasB, biasA] = bias_n;\n            switch (order) {\n                case enums_1.Order.HWC:\n                    for (let h = 0; h < height; h++) {\n                        for (let w = 0; w < width; w++) {\n                            array[(h * width + w) * 4 + 0] =\n                                (data[(h * width + w) * 4 + 0] - biasR) / scaleR;\n                            array[(h * width + w) * 4 + 1] =\n                                (data[(h * width + w) * 4 + 1] - biasG) / scaleG;\n                            array[(h * width + w) * 4 + 2] =\n                                (data[(h * width + w) * 4 + 2] - biasB) / scaleB;\n                            array[(h * width + w) * 4 + 3] =\n                                (data[(h * width + w) * 4 + 3] - biasA) / scaleA;\n                        }\n                    }\n                    break;\n                case enums_1.Order.CHW:\n                    for (let h = 0; h < height; h++) {\n                        for (let w = 0; w < width; w++) {\n                            array[(0 * height + h) * width + w] =\n                                (data[(h * width + w) * 4 + 0] - biasR) / scaleR;\n                            array[(Number(height) + h) * width + w] =\n                                (data[(h * width + w) * 4 + 1] - biasG) / scaleG;\n                            array[(2 * height + h) * width + w] =\n                                (data[(h * width + w) * 4 + 2] - biasB) / scaleB;\n                            array[(3 * height + h) * width + w] =\n                                (data[(h * width + w) * 4 + 3] - biasA) / scaleA;\n                        }\n                    }\n                    break;\n            }\n            break;\n        case enums_1.Color.BGRA:\n            array = new type(width * height * 4);\n            [biasR, biasG, biasB, biasA] = bias_n;\n            [scaleR, scaleG, scaleB, scaleA] = scale_n;\n            switch (order) {\n                case enums_1.Order.HWC:\n                    for (let h = 0; h < height; h++) {\n                        for (let w = 0; w < width; w++) {\n                            array[(h * width + w) * 4 + 0] =\n                                (data[(h * width + w) * 4 + 2] - biasB) / scaleB;\n                            array[(h * width + w) * 4 + 1] =\n                                (data[(h * width + w) * 4 + 1] - biasG) / scaleG;\n                            array[(h * width + w) * 4 + 2] =\n                                (data[(h * width + w) * 4 + 0] - biasR) / scaleR;\n                            array[(h * width + w) * 4 + 3] =\n                                (data[(h * width + w) * 4 + 3] - biasA) / scaleA;\n                        }\n                    }\n                    break;\n                case enums_1.Order.CHW:\n                    for (let h = 0; h < height; h++) {\n                        for (let w = 0; w < width; w++) {\n                            array[(0 * height + h) * width + w] =\n                                (data[(h * width + w) * 4 + 2] - biasB) / scaleB;\n                            array[(Number(height) + h) * width + w] =\n                                (data[(h * width + w) * 4 + 1] - biasG) / scaleG;\n                            array[(2 * height + h) * width + w] =\n                                (data[(h * width + w) * 4 + 0] - biasR) / scaleR;\n                            array[(3 * height + h) * width + w] =\n                                (data[(h * width + w) * 4 + 3] - biasA) / scaleA;\n                        }\n                    }\n                    break;\n            }\n            break;\n        case enums_1.Color.GREY:\n            array = new type(width * height);\n            [scaleR, scaleG, scaleB] = scale_n;\n            [biasR, biasG, biasB] = bias_n;\n            for (let h = 0; h < height; h++) {\n                for (let w = 0; w < width; w++) {\n                    const r = data[(h * width + w) * 4 + 0], g = data[(h * width + w) * 4 + 1], b = data[(h * width + w) * 4 + 2];\n                    array[h * width + w] =\n                        (0.2126 * (r - biasR)) / scaleR +\n                            (0.7162 * (g - biasG)) / scaleG +\n                            (0.0722 * (b - biasB)) / scaleB;\n                }\n            }\n            break;\n        default:\n            throw Error(`Unknown color format: ${color}`);\n    }\n    return array;\n}\nexports.getImageArrayFromImageData = getImageArrayFromImageData;\n/**\n * Get image array from canvas element as `{Float32 or Int32}ArrayBufferView`.\n *\n * @returns {ImageData} buffer with specified type\n * @protected\n */\nfunction getImageArrayFromCanvas(canvas, options = {}) {\n    const { type = Float32Array, color = enums_1.Color.RGB, order = enums_1.Order.HWC, srcX = 0, srcY = 0, srcW = canvas.width, srcH = canvas.height, dstX = 0, dstY = 0, bias = [0, 0, 0], scale = [1, 1, 1], } = options, { dstW = srcW, dstH = srcH } = options, imageData = image_data_1.getImageData(canvas, {\n        srcX,\n        srcY,\n        srcW,\n        srcH,\n        dstX,\n        dstY,\n        dstW,\n        dstH,\n    });\n    return getImageArrayFromImageData(imageData, {\n        type,\n        color,\n        order,\n        bias,\n        scale,\n    });\n}\nexports.getImageArrayFromCanvas = getImageArrayFromCanvas;\n/**\n * Get image array from image element as `{Float32 or Int32}ArrayBufferView`.\n *\n * @returns {ImageData} buffer with specified type\n * @protected\n */\nfunction getImageArrayFromDrawable(drawable, options = {}) {\n    let srcH, srcW;\n    if (drawable instanceof HTMLVideoElement) {\n        srcW = drawable.videoWidth;\n        srcH = drawable.videoHeight;\n    }\n    else if (drawable instanceof HTMLImageElement) {\n        srcW = drawable.naturalWidth;\n        srcH = drawable.naturalHeight;\n    }\n    else if (drawable instanceof HTMLCanvasElement) {\n        return getImageArrayFromCanvas(drawable, options);\n    }\n    else if (drawable instanceof ImageData) {\n        const canvas = document.createElement(\"canvas\");\n        canvas.height = drawable.height;\n        canvas.width = drawable.width;\n        const context = canvas_1.getContext2D(canvas);\n        context.putImageData(drawable, 0, 0);\n        return getImageArrayFromCanvas(canvas, options);\n    }\n    else\n        throw TypeError('Failed to execute \"getImageDataFromDrawable(drawable, options)\": \"drawable\" must be an instanceof Drawable');\n    const { type = Float32Array, color = enums_1.Color.RGB, order = enums_1.Order.HWC, srcX = 0, srcY = 0, dstX = 0, dstY = 0, dstW = srcW, dstH = srcH, bias = [0, 0, 0], scale = [1, 1, 1], } = options, canvas = document.createElement(\"canvas\");\n    canvas.width = dstX + dstW;\n    canvas.height = dstY + dstH;\n    const context = canvas_1.getContext2D(canvas);\n    context.drawImage(drawable, srcX, srcY, srcW, srcH, dstX, dstY, dstW, dstH);\n    return getImageArrayFromCanvas(canvas, { type, color, order, bias, scale });\n}\nexports.getImageArrayFromDrawable = getImageArrayFromDrawable;\n/**\n * Create typed array by packing image data from image source with specified options.\n *\n * First, this method loads specified image resource. The behavior of this method depends on the `image` argument.\n *\n * - If `image` is an instance of `string`, it will be regarded as image url, and this method fetches that url.\n *\n * - If `image` is an instance of `HTMLInputElement`, it will be regarded as file input,\n *   and this method loads the selected image file.\n *\n * - Otherwise, `image` will be regarded as drawable object.\n *\n * Then, loaded images are packed into typed array based on `options` argument.\n *\n * - The image is cropped based on [[SourceRect|`{srcX, srcY, srcW, srcH}`]].\n *   As default, entire image is used.\n *\n * - The image is resized and translated into [[DestinationRect|`{dstX, dstY, dstW, dstH}`]].\n *   As default, no resize and translation is performed.\n *\n * - [[ImageArrayOption.type|`options.type`]] is the type of packed typed array. As default, Float32Array is used.\n *\n * - [[ImageArrayOption.type|`options.color`]] is the color format of packed typed array. As default, [[Color.RGB|`RGB`]] is used.\n *\n * - [[ImageArrayOption.type|`options.order`]] is the data order of packed typed array. As default, [[Order.HWC|`HWC`]] is used.\n *\n * - [[ImageArrayOption.bias|`options.bias`]] is the bias value.\n *   If specified, this method **subtracts** this value from original pixel value.\n *\n * - [[ImageArrayOption.scale|`options.scale`]] is the scale value. If specified, original pixel values are **divided** by this value.\n *   [[ImageArrayOption.scale|`options.scale`]] and [[ImageArrayOption.bias|`options.bias`]] is used for converting pixel value `x` and\n *   packed value `y` as follows:\n *\n *   - `y = (x - bias) / scale`\n *   - `x = y * scale + bias`\n *   - Note that color order is always RGB, not BGR.\n *\n * ### Examples\n *\n * - Load image of specified url\n *\n *   ```ts\n *   let image = await WebDNN.Image.load('./cat.png');\n *   ```\n *\n * - Load image selected in file input and resize it into 224 x 224\n *\n *   ```ts\n *   let input = document.querySelector('input[type=file]');\n *   let image = await WebDNN.Image.load(input, { dstW: 224, dstH: 224 });\n *   ```\n *\n * - Load image data from canvas, normalize it into range `[-1, 1)`. In this case, normalized value `y` can be\n *   calculated from pixel value `x` as follows: `y = (x - 128) / 128`.\n *\n *   ```ts\n *   let canvas = document.getElementsByTagName('canvas')[0];\n *   let image = await WebDNN.Image.load(canvas, { bias: [128, 128, 128], scale: [128, 128, 128] });\n *   ```\n *\n * @param image please see above descriptions\n * @param options please see above descriptions.\n * @returns Created typed array\n */\nasync function getImageArray(image, options = {}) {\n    if (typeof image === \"string\") {\n        return getImageArrayFromDrawable(await image_source_1.loadImageByUrl(image), options);\n    }\n    else if (image instanceof HTMLInputElement) {\n        return getImageArrayFromDrawable(await image_source_1.loadImageFromFileInput(image), options);\n    }\n    else if (image instanceof HTMLCanvasElement) {\n        return getImageArrayFromCanvas(image, options);\n    }\n    else if (image instanceof HTMLImageElement ||\n        image instanceof HTMLVideoElement ||\n        image instanceof ImageData) {\n        return getImageArrayFromDrawable(image, options);\n        /*\n         * FIXME: This feature is not supported for all web browsers.\n         * } else if (image === null) {\n         *     return getImageArrayFromDrawable(await loadImageByDialog(), options);\n         */\n    }\n    throw TypeError('Failed to execute \"getImageData(image, options)\": \"image\" must be an instance of string,' +\n        \" HTMLInputElement, HTMLCanvasElement, HTMLImageElement, HTMLVideoElement, or ImageData object\");\n}\nexports.getImageArray = getImageArray;\nfunction createImageData(array, width, height) {\n    try {\n        return new ImageData(array, width, height);\n    }\n    catch (e) {\n        /*\n         * FIXME: Removing this warning causes the following error. Maybe bug in webpack?\n         * Uncaught (in promise) SyntaxError: Identifier 'n' has already been declared\n         */\n        console.warn(`new ImageData failed: ${e}`);\n        // IE11 does not support ImageData constructor\n        const canvas_ = document.createElement(\"canvas\"), context = canvas_1.getContext2D(canvas_), data = context.createImageData(width, height);\n        data.data.set(array);\n        return data;\n    }\n}\n/**\n * Set image array data into canvas.\n *\n * ### Examples\n *\n * - Show DNN model's result\n *\n *   ```ts\n *   let runner = await WebDNN.load('./model');\n *   let output = runner.outputs[0];\n *\n *   await runner.run();\n *\n *   WebDNN.Image.setImageArrayToCanvas(output.toActual(), 256, 256, document.getElementById('canvas'))\n *   ```\n *\n * - Generally image generation model's result contains noise pixel at their edge because of convolution's padding.\n *   In follow example, these noise are cut off.\n *\n *   ```ts\n *   WebDNN.Image.setImageArrayToCanvas(output, 256, 256, canvas, {\n *      srcX: 16, srcY: 16, srcH: 256-16*2, srcW: 256-16*2, // Discard both ends 16px\n *      dstW: 256, dstH: 256  // Resize cropped image into original output size.\n *   });\n *   ```\n *\n * @param array array which contains image data\n * @param imageW width of image\n * @param imageH height of image. The length of `array` must be `imageW * imageH * (# of channels)`\n * @param canvas destination canvas\n * @param options please see above descriptions and descriptions in [[webdnn/image.getImageArray|getImageArray()]].\n *                `srcW` and `srcH` is ignored (overwritten by `imageW` and `imageH`).\n */\nfunction setImageArrayToCanvas(array, imageW, imageH, canvas, options = {}) {\n    const { color = enums_1.Color.RGB, order = enums_1.Order.HWC, srcX = 0, srcY = 0, dstX = 0, dstY = 0, dstW = canvas.width, dstH = canvas.height, bias = [0, 0, 0], scale = [1, 1, 1], } = options, bias_n = normalizeBiasTuple(bias), scale_n = normalizeBiasTuple(scale), srcW = imageW, srcH = imageH;\n    array = flatten(array);\n    const data = new Uint8ClampedArray(srcW * srcH * 4);\n    let biasA, biasB, biasG, biasR, scaleA, scaleB, scaleG, scaleR;\n    switch (color) {\n        case enums_1.Color.RGB:\n            [biasR, biasG, biasB] = bias_n;\n            [scaleR, scaleG, scaleB] = scale_n;\n            switch (order) {\n                case enums_1.Order.HWC:\n                    for (let h = srcY; h < srcY + srcH; h++) {\n                        for (let w = srcX; w < srcX + srcW; w++) {\n                            data[(h * imageW + w) * 4 + 0] =\n                                array[(h * imageW + w) * 3 + 0] * scaleR + biasR;\n                            data[(h * imageW + w) * 4 + 1] =\n                                array[(h * imageW + w) * 3 + 1] * scaleG + biasG;\n                            data[(h * imageW + w) * 4 + 2] =\n                                array[(h * imageW + w) * 3 + 2] * scaleB + biasB;\n                            data[(h * imageW + w) * 4 + 3] = 255;\n                        }\n                    }\n                    break;\n                case enums_1.Order.CHW:\n                    for (let h = srcY; h < srcY + srcH; h++) {\n                        for (let w = srcX; w < srcX + srcW; w++) {\n                            data[(h * imageW + w) * 4 + 0] =\n                                array[(0 * imageH + h) * imageW + w] * scaleR + biasR;\n                            data[(h * imageW + w) * 4 + 1] =\n                                array[(Number(imageH) + h) * imageW + w] * scaleG + biasG;\n                            data[(h * imageW + w) * 4 + 2] =\n                                array[(2 * imageH + h) * imageW + w] * scaleB + biasB;\n                            data[(h * imageW + w) * 4 + 3] = 255;\n                        }\n                    }\n                    break;\n            }\n            break;\n        case enums_1.Color.BGR:\n            [biasR, biasG, biasB] = bias_n;\n            [scaleR, scaleG, scaleB] = scale_n;\n            switch (order) {\n                case enums_1.Order.HWC:\n                    for (let h = srcY; h < srcY + srcH; h++) {\n                        for (let w = srcX; w < srcX + srcW; w++) {\n                            data[(h * imageW + w) * 4 + 0] =\n                                array[(h * imageW + w) * 3 + 2] * scaleR + biasR;\n                            data[(h * imageW + w) * 4 + 1] =\n                                array[(h * imageW + w) * 3 + 1] * scaleG + biasG;\n                            data[(h * imageW + w) * 4 + 2] =\n                                array[(h * imageW + w) * 3 + 0] * scaleB + biasB;\n                            data[(h * imageW + w) * 4 + 3] = 255;\n                        }\n                    }\n                    break;\n                case enums_1.Order.CHW:\n                    for (let h = srcY; h < srcY + srcH; h++) {\n                        for (let w = srcX; w < srcX + srcW; w++) {\n                            data[(h * imageW + w) * 4 + 0] =\n                                array[(2 * imageH + h) * imageW + w] * scaleR + biasR;\n                            data[(h * imageW + w) * 4 + 1] =\n                                array[(Number(imageH) + h) * imageW + w] * scaleG + biasG;\n                            data[(h * imageW + w) * 4 + 2] =\n                                array[(0 * imageH + h) * imageW + w] * scaleB + biasB;\n                            data[(h * imageW + w) * 4 + 3] = 255;\n                        }\n                    }\n                    break;\n            }\n            break;\n        case enums_1.Color.RGBA:\n            [biasR, biasG, biasB, biasA] = bias_n;\n            [scaleR, scaleG, scaleB, scaleA] = scale_n;\n            switch (order) {\n                case enums_1.Order.HWC:\n                    for (let h = srcY; h < srcY + srcH; h++) {\n                        for (let w = srcX; w < srcX + srcW; w++) {\n                            data[(h * imageW + w) * 4 + 0] =\n                                array[(h * imageW + w) * 3 + 0] * scaleR + biasR;\n                            data[(h * imageW + w) * 4 + 1] =\n                                array[(h * imageW + w) * 3 + 1] * scaleG + biasG;\n                            data[(h * imageW + w) * 4 + 2] =\n                                array[(h * imageW + w) * 3 + 2] * scaleB + biasB;\n                            data[(h * imageW + w) * 4 + 3] =\n                                array[(h * imageW + w) * 3 + 3] * scaleA + biasA;\n                        }\n                    }\n                    break;\n                case enums_1.Order.CHW:\n                    for (let h = srcY; h < srcY + srcH; h++) {\n                        for (let w = srcX; w < srcX + srcW; w++) {\n                            data[(h * imageW + w) * 4 + 0] =\n                                array[(0 * imageH + h) * imageW + w] * scaleR + biasR;\n                            data[(h * imageW + w) * 4 + 1] =\n                                array[(Number(imageH) + h) * imageW + w] * scaleG + biasG;\n                            data[(h * imageW + w) * 4 + 2] =\n                                array[(2 * imageH + h) * imageW + w] * scaleB + biasB;\n                            data[(h * imageW + w) * 4 + 3] =\n                                array[(3 * imageH + h) * imageW + w] * scaleA + biasA;\n                        }\n                    }\n                    break;\n            }\n            break;\n        case enums_1.Color.BGRA:\n            [biasR, biasG, biasB, biasA] = bias_n;\n            [scaleR, scaleG, scaleB, scaleA] = scale_n;\n            switch (order) {\n                case enums_1.Order.HWC:\n                    for (let h = srcY; h < srcY + srcH; h++) {\n                        for (let w = srcX; w < srcX + srcW; w++) {\n                            data[(h * imageW + w) * 4 + 0] =\n                                array[(h * imageW + w) * 4 + 2] * scaleR + biasR;\n                            data[(h * imageW + w) * 4 + 1] =\n                                array[(h * imageW + w) * 4 + 1] * scaleG + biasG;\n                            data[(h * imageW + w) * 4 + 2] =\n                                array[(h * imageW + w) * 4 + 0] * scaleB + biasB;\n                            data[(h * imageW + w) * 4 + 3] =\n                                array[(h * imageW + w) * 4 + 3] * scaleA + biasA;\n                        }\n                    }\n                    break;\n                case enums_1.Order.CHW:\n                    for (let h = srcY; h < srcY + srcH; h++) {\n                        for (let w = srcX; w < srcX + srcW; w++) {\n                            data[(h * imageW + w) * 4 + 0] =\n                                array[(2 * imageH + h) * imageW + w] * scaleR + biasR;\n                            data[(h * imageW + w) * 4 + 1] =\n                                array[(Number(imageH) + h) * imageW + w] * scaleG + biasG;\n                            data[(h * imageW + w) * 4 + 2] =\n                                array[(0 * imageH + h) * imageW + w] * scaleB + biasB;\n                            data[(h * imageW + w) * 4 + 3] =\n                                array[(3 * imageH + h) * imageW + w] * scaleA + biasA;\n                        }\n                    }\n                    break;\n            }\n            break;\n        case enums_1.Color.GREY:\n            for (let h = srcY; h < srcY + srcH; h++) {\n                for (let w = srcX; w < srcX + srcW; w++) {\n                    data[(h * imageW + w) * 4 + 0] =\n                        data[(h * imageW + w) * 4 + 1] =\n                            data[(h * imageW + w) * 4 + 2] =\n                                array[h * imageW + w] * scale_n[0] + bias_n[0];\n                    data[(h * imageW + w) * 4 + 3] = 255;\n                }\n            }\n            break;\n    }\n    image_data_1.setImageDataToCanvas(createImageData(data, srcW, srcH), canvas, {\n        srcX,\n        srcY,\n        srcW,\n        srcH,\n        dstX,\n        dstY,\n        dstW,\n        dstH,\n    });\n}\nexports.setImageArrayToCanvas = setImageArrayToCanvas;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/image/image_array.ts?");

/***/ }),

/***/ "./src/descriptor_runner/image/image_data.ts":
/*!***************************************************!*\
  !*** ./src/descriptor_runner/image/image_data.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * @module webdnn/image\n */\n/** Don't Remove This comment block */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setImageDataToCanvas = exports.getImageData = exports.getImageDataFromDrawable = exports.getImageDataFromCanvas = void 0;\nconst canvas_1 = __webpack_require__(/*! ./canvas */ \"./src/descriptor_runner/image/canvas.ts\");\n/**\n * @protected\n */\nfunction getImageDataFromCanvas(canvas, options = {}) {\n    const { srcX = 0, srcY = 0, srcW = canvas.width, srcH = canvas.height, dstX = 0, dstY = 0, } = options, { dstW = srcW, dstH = srcH } = options;\n    let imageData = canvas_1.getContext2D(canvas).getImageData(srcX, srcY, srcW, srcH);\n    if (dstX !== 0 || dstY !== 0 || srcW !== dstW || srcH !== dstH) {\n        imageData = cropAndResizeImageData(imageData, { dstX, dstY, dstW, dstH });\n    }\n    return imageData;\n}\nexports.getImageDataFromCanvas = getImageDataFromCanvas;\n/**\n * @protected\n */\nfunction getImageDataFromDrawable(drawable, options = {}) {\n    let srcH, srcW;\n    if (drawable instanceof HTMLVideoElement) {\n        srcW = drawable.videoWidth;\n        srcH = drawable.videoHeight;\n    }\n    else if (drawable instanceof HTMLImageElement) {\n        srcW = drawable.naturalWidth;\n        srcH = drawable.naturalHeight;\n    }\n    else\n        throw TypeError('Failed to execute \"getImageDataFromDrawable(drawable, options)\": \"drawable\" must be an instanceof HTMLVideoElement or HTMLImageElement');\n    const { srcX = 0, srcY = 0, dstX = 0, dstY = 0, dstW = srcW, dstH = srcH, } = options, canvas = document.createElement(\"canvas\");\n    canvas.width = dstX + dstW;\n    canvas.height = dstY + dstH;\n    const context = canvas_1.getContext2D(canvas);\n    context.drawImage(drawable, srcX, srcY, srcW, srcH, dstX, dstY, dstW, dstH);\n    return context.getImageData(0, 0, dstX + dstW, dstY + dstH);\n}\nexports.getImageDataFromDrawable = getImageDataFromDrawable;\n/**\n * Source rectangle of source image is cropped and then copied into destination rectangle of new image data\n *\n * @param {ImageData} src\n * @param {SourceRect & DestinationRect} options\n * @returns {ImageData}\n * @protected\n */\nfunction cropAndResizeImageData(src, options = {}) {\n    const { srcX = 0, srcY = 0, srcW = src.width, srcH = src.height, dstX = 0, dstY = 0, } = options, { dstW = srcW, dstH = srcH } = options, canvas1 = document.createElement(\"canvas\");\n    canvas1.width = srcW;\n    canvas1.height = srcH;\n    const context1 = canvas_1.getContext2D(canvas1);\n    context1.putImageData(src, -srcX, -srcY);\n    const canvas2 = document.createElement(\"canvas\");\n    canvas2.width = dstX + dstW;\n    canvas2.height = dstY + dstH;\n    const context2 = canvas_1.getContext2D(canvas2);\n    context2.drawImage(canvas1, 0, 0, srcW, srcH, dstX, dstY, dstW, dstH);\n    return context2.getImageData(0, 0, dstX + dstW, dstY + dstH);\n}\n/**\n * Return canvas `ImageData` object with specified scale.\n *\n * @param {HTMLCanvasElement | HTMLVideoElement | HTMLImageElement} image\n * @param [options] Options\n * @param {number} [options.srcX=0] left position of input clipping rect\n * @param {number} [options.srcY=0] top position of input clipping rect\n * @param {number} [options.srcW=canvas.width] width of input clipping rect\n * @param {number} [options.srcH=canvas.height] height of input clipping rect\n * @param {number} [options.dstW=options.srcW] width of output\n * @param {number} [options.dstH=options.srcH] height of output\n * @returns {ImageData}\n * @protected\n */\nfunction getImageData(image, options = {}) {\n    if (image instanceof HTMLCanvasElement) {\n        return getImageDataFromCanvas(image, options);\n    }\n    else if (image instanceof HTMLVideoElement ||\n        image instanceof HTMLImageElement) {\n        return getImageDataFromDrawable(image, options);\n    }\n    throw TypeError('Failed to execute \"getImageData(image, options)\": \"image\" must be an instance of HTMLCanvasElement, HTMLVideoElement, or HTMLImageElement');\n}\nexports.getImageData = getImageData;\n/**\n * @protected\n */\nfunction setImageDataToCanvas(imageData, canvas, options = {}) {\n    const { srcX = 0, srcY = 0, srcW = imageData.width, srcH = imageData.height, dstX = 0, dstY = 0, } = options, { dstW = srcW, dstH = srcH } = options;\n    if (srcX !== 0 || srcY !== 0 || srcW !== dstW || srcH !== dstH) {\n        imageData = cropAndResizeImageData(imageData, {\n            srcX,\n            srcY,\n            srcW,\n            srcH,\n            dstW,\n            dstH,\n        });\n    }\n    canvas_1.getContext2D(canvas).putImageData(imageData, dstX, dstY);\n}\nexports.setImageDataToCanvas = setImageDataToCanvas;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/image/image_data.ts?");

/***/ }),

/***/ "./src/descriptor_runner/image/image_source.ts":
/*!*****************************************************!*\
  !*** ./src/descriptor_runner/image/image_source.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * @module webdnn/image\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.loadImageByDialog = exports.loadImageFromFileInput = exports.loadImageByUrl = void 0;\n/** Don't Remove This comment block */\n/**\n * Load image of specified url\n *\n * @param {string} url the image url\n * @returns {Promise<HTMLImageElement>} image element\n */\nasync function loadImageByUrl(url) {\n    const image = document.createElement(\"img\");\n    return new Promise((resolve, reject) => {\n        image.onload = resolve;\n        image.onerror = reject;\n        image.src = url;\n    }).then(() => image);\n}\nexports.loadImageByUrl = loadImageByUrl;\n/* istanbul ignore next */\n/**\n * Load image file selected in `<input type=\"file\">` element.\n *\n * @param {HTMLInputElement} input the `<input type=\"file\">` element\n * @returns {Promise<HTMLImageElement>} image element\n */\nasync function loadImageFromFileInput(input) {\n    const { files } = input;\n    if (!files || files.length == 0)\n        throw new Error(\"No file is selected\");\n    const url = URL.createObjectURL(files[0]);\n    return loadImageByUrl(url);\n}\nexports.loadImageFromFileInput = loadImageFromFileInput;\n/* istanbul ignore next */\n/**\n * Load image selected in file picker dialog\n *\n * Currently, web specification not supported the case if the dialog is canceled and no file is selected. In this case,\n * the returned promise will never be resolved.\n *\n * @returns {Promise<HTMLImageElement>} image element\n * @protected\n */\nasync function loadImageByDialog() {\n    const input = document.createElement(\"input\");\n    input.style.display = \"none\";\n    input.type = \"file\";\n    input.accept = \"image/*\";\n    // Avoid GC for iOS Safari\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window._webdnn_image_input = input;\n    return new Promise((resolve) => {\n        input.onchange = () => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            delete window._webdnn_image_input;\n            resolve(loadImageFromFileInput(input));\n        };\n        input.click();\n    });\n}\nexports.loadImageByDialog = loadImageByDialog;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/image/image_source.ts?");

/***/ }),

/***/ "./src/descriptor_runner/index.ts":
/*!****************************************!*\
  !*** ./src/descriptor_runner/index.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.load = exports.CPUTensor = exports.Logging = exports.Math = exports.Image = void 0;\nconst Image = __importStar(__webpack_require__(/*! ./image */ \"./src/descriptor_runner/image.ts\"));\nexports.Image = Image;\nconst Math = __importStar(__webpack_require__(/*! ./math */ \"./src/descriptor_runner/math.ts\"));\nexports.Math = Math;\nconst logging_1 = __webpack_require__(/*! ./logging */ \"./src/descriptor_runner/logging.ts\");\nObject.defineProperty(exports, \"Logging\", ({ enumerable: true, get: function () { return logging_1.WebDNNLogging; } }));\nconst runnerImpl_1 = __webpack_require__(/*! ./core/runnerImpl */ \"./src/descriptor_runner/core/runnerImpl.ts\");\nconst cpuContextImpl_1 = __webpack_require__(/*! ./backend/cpu/cpuContextImpl */ \"./src/descriptor_runner/backend/cpu/cpuContextImpl.ts\");\nconst webglContextImpl_1 = __webpack_require__(/*! ./backend/webgl/webglContextImpl */ \"./src/descriptor_runner/backend/webgl/webglContextImpl.ts\");\nconst wasmContextImpl_1 = __webpack_require__(/*! ./backend/wasm/wasmContextImpl */ \"./src/descriptor_runner/backend/wasm/wasmContextImpl.ts\");\nconst webgpuContextImpl_1 = __webpack_require__(/*! ./backend/webgpu/webgpuContextImpl */ \"./src/descriptor_runner/backend/webgpu/webgpuContextImpl.ts\");\nconst worker_1 = __webpack_require__(/*! ./operators/wasm/worker/worker */ \"./src/descriptor_runner/operators/wasm/worker/worker.ts\");\nconst operatorTable_1 = __webpack_require__(/*! ./core/operatorTable */ \"./src/descriptor_runner/core/operatorTable.ts\");\nconst opEntriesStandard_1 = __webpack_require__(/*! ./operators/cpu/opEntriesStandard */ \"./src/descriptor_runner/operators/cpu/opEntriesStandard.ts\");\nconst opEntriesStandard_2 = __webpack_require__(/*! ./operators/wasm/opEntriesStandard */ \"./src/descriptor_runner/operators/wasm/opEntriesStandard.ts\");\nconst opEntriesStandard_3 = __webpack_require__(/*! ./operators/webgl/opEntriesStandard */ \"./src/descriptor_runner/operators/webgl/opEntriesStandard.ts\");\nconst opEntriesStandard_4 = __webpack_require__(/*! ./operators/webgpu/opEntriesStandard */ \"./src/descriptor_runner/operators/webgpu/opEntriesStandard.ts\");\nvar cpuTensorImpl_1 = __webpack_require__(/*! ./backend/cpu/cpuTensorImpl */ \"./src/descriptor_runner/backend/cpu/cpuTensorImpl.ts\");\nObject.defineProperty(exports, \"CPUTensor\", ({ enumerable: true, get: function () { return cpuTensorImpl_1.CPUTensorImpl; } }));\nconst defaultContexts = {\n    cpu: null,\n    wasm: null,\n    webgl: null,\n    webgpu: null,\n};\nasync function load(directory, options = {}) {\n    var _a, _b, _c;\n    const { backendOrder = [\"webgl\", \"wasm\", \"cpu\"], optimized } = options;\n    if (optimized) {\n        throw new Error(\"Currently, webdnn.js does not support optimized model. Use webdnn-core.js instead.\");\n    }\n    if (!defaultContexts.cpu) {\n        defaultContexts.cpu = new cpuContextImpl_1.WebDNNCPUContextImpl();\n        await defaultContexts.cpu.initialize();\n        operatorTable_1.registerOperators(opEntriesStandard_1.getOpEntries());\n    }\n    const cpuContext = defaultContexts.cpu, backendContexts = { cpu: cpuContext };\n    let succeedBackend = null;\n    for (const tryBackend of backendOrder) {\n        switch (tryBackend) {\n            case \"cpu\":\n                succeedBackend = \"cpu\";\n                break;\n            case \"wasm\":\n                {\n                    if (!defaultContexts.wasm) {\n                        try {\n                            const ctx = new wasmContextImpl_1.WebDNNWasmContextImpl(cpuContext, ((_a = options.backendOptions) === null || _a === void 0 ? void 0 : _a.wasm) || {});\n                            await ctx.initialize(worker_1.wasmWorkerSrcUrl);\n                            defaultContexts.wasm = ctx;\n                            operatorTable_1.registerOperators(opEntriesStandard_2.getOpEntries());\n                            succeedBackend = \"wasm\";\n                            backendContexts.wasm = defaultContexts.wasm;\n                            // eslint-disable-next-line no-empty\n                        }\n                        catch (_d) { }\n                    }\n                    else {\n                        succeedBackend = \"wasm\";\n                        backendContexts.wasm = defaultContexts.wasm;\n                    }\n                }\n                break;\n            case \"webgl\":\n                {\n                    if (!defaultContexts.webgl) {\n                        try {\n                            const ctx = new webglContextImpl_1.WebDNNWebGLContextImpl(cpuContext, ((_b = options.backendOptions) === null || _b === void 0 ? void 0 : _b.webgl) || {});\n                            await ctx.initialize();\n                            defaultContexts.webgl = ctx;\n                            operatorTable_1.registerOperators(opEntriesStandard_3.getOpEntries());\n                            succeedBackend = \"webgl\";\n                            backendContexts.webgl = defaultContexts.webgl;\n                            // eslint-disable-next-line no-empty\n                        }\n                        catch (_e) { }\n                    }\n                    else {\n                        succeedBackend = \"webgl\";\n                        backendContexts.webgl = defaultContexts.webgl;\n                    }\n                }\n                break;\n            case \"webgpu\":\n                {\n                    if (!defaultContexts.webgpu) {\n                        try {\n                            const ctx = new webgpuContextImpl_1.WebDNNWebGPUContextImpl(cpuContext, ((_c = options.backendOptions) === null || _c === void 0 ? void 0 : _c.webgpu) || {});\n                            await ctx.initialize();\n                            defaultContexts.webgpu = ctx;\n                            operatorTable_1.registerOperators(opEntriesStandard_4.getOpEntries());\n                            succeedBackend = \"webgpu\";\n                            backendContexts.webgpu = defaultContexts.webgpu;\n                            // eslint-disable-next-line no-empty\n                        }\n                        catch (_f) { }\n                    }\n                    else {\n                        succeedBackend = \"webgpu\";\n                        backendContexts.webgpu = defaultContexts.webgpu;\n                    }\n                }\n                break;\n            default:\n                throw new Error(`Unknown backend ${tryBackend}`);\n        }\n        if (succeedBackend) {\n            break;\n        }\n    }\n    if (!succeedBackend) {\n        throw new Error(\"No backend available\");\n    }\n    const actualBackendOrder = succeedBackend === \"cpu\" ? [\"cpu\"] : [succeedBackend, \"cpu\"], runner = new runnerImpl_1.RunnerImpl(actualBackendOrder, backendContexts);\n    await runner.loadModel(directory, \"model.onnx\", options.progressCallback);\n    return runner;\n}\nexports.load = load;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/index.ts?");

/***/ }),

/***/ "./src/descriptor_runner/interface/core/constants.ts":
/*!***********************************************************!*\
  !*** ./src/descriptor_runner/interface/core/constants.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DataArrayConstructor = exports.backends = exports.backendsWithoutCPU = void 0;\nexports.backendsWithoutCPU = [\n    \"wasm\",\n    \"webgl\",\n    \"webgpu\",\n];\nexports.backends = [\"cpu\", \"wasm\", \"webgl\", \"webgpu\"];\nexports.DataArrayConstructor = {\n    float32: Float32Array,\n    int32: Int32Array,\n    bool: Uint8Array,\n};\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/interface/core/constants.ts?");

/***/ }),

/***/ "./src/descriptor_runner/logging.ts":
/*!******************************************!*\
  !*** ./src/descriptor_runner/logging.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebDNNLogging = void 0;\nclass WebDNNLogger {\n    constructor(category, logging) {\n        this.category = category;\n        this.logging = logging;\n    }\n    debug(message, ...optionalParams) {\n        this.logging.emit(this.category, WebDNNLogging.DEBUG, message, optionalParams);\n    }\n    info(message, ...optionalParams) {\n        this.logging.emit(this.category, WebDNNLogging.INFO, message, optionalParams);\n    }\n    warn(message, ...optionalParams) {\n        this.logging.emit(this.category, WebDNNLogging.WARN, message, optionalParams);\n    }\n    error(message, ...optionalParams) {\n        this.logging.emit(this.category, WebDNNLogging.ERROR, message, optionalParams);\n    }\n    fatal(message, ...optionalParams) {\n        this.logging.emit(this.category, WebDNNLogging.FATAL, message, optionalParams);\n    }\n}\nclass WebDNNLoggingAdapterConsole {\n    emit(category, severity, message, optionalParams) {\n        const messageWithCategory = `${category}: ${message}`;\n        switch (severity) {\n            case WebDNNLogging.FATAL:\n                console.error(messageWithCategory, ...optionalParams);\n                break;\n            case WebDNNLogging.ERROR:\n                console.error(messageWithCategory, ...optionalParams);\n                break;\n            case WebDNNLogging.WARN:\n                console.warn(messageWithCategory, ...optionalParams);\n                break;\n            case WebDNNLogging.INFO:\n                console.info(messageWithCategory, ...optionalParams);\n                break;\n            case WebDNNLogging.DEBUG:\n                console.debug(messageWithCategory, ...optionalParams);\n                break;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    clear() { }\n}\nclass WebDNNLoggingAdapterFile {\n    constructor() {\n        this.buffer = [];\n    }\n    emit(category, severity, message, optionalParams) {\n        this.buffer.push({ category, severity, message, optionalParams });\n    }\n    clear() {\n        this.buffer = [];\n    }\n    saveToLocalFile() {\n        const content = this.buffer.map((item) => JSON.stringify(item) + \"\\n\");\n        const a = document.createElement(\"a\");\n        a.href = URL.createObjectURL(new Blob(content, { type: \"text/plain\" }));\n        a.download = \"logging.log\";\n        a.style.display = \"none\";\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n    }\n}\nclass WebDNNLogging {\n    constructor() {\n        this.adapters = {};\n        this.adapterFactories = {\n            console: () => new WebDNNLoggingAdapterConsole(),\n            file: () => new WebDNNLoggingAdapterFile(),\n        };\n        this.config({\n            adapters: {\n                console: {\n                    adapter: \"console\",\n                    loglevel: {\n                        \"\": WebDNNLogging.WARN,\n                    },\n                },\n            },\n        });\n    }\n    config(config) {\n        // generate adapters\n        this.currentConfig = config;\n        const adapters = config.adapters;\n        this.adapters = {};\n        for (const key of Object.keys(adapters)) {\n            const ad = adapters[key];\n            const factory = this.adapterFactories[ad.adapter];\n            if (!factory) {\n                console.error(`Logging adapter ${ad.adapter} not found.`);\n                continue;\n            }\n            try {\n                const adinstance = factory(...(ad.adapterParams || []));\n                this.adapters[key] = adinstance;\n            }\n            catch (_a) {\n                console.error(`Logging adapter ${ad.adapter} constructor error.`);\n                continue;\n            }\n        }\n    }\n    static getInstance() {\n        return window.WebDNNLoggingManagerInstance;\n    }\n    static getLogger(category, logging) {\n        if (!logging) {\n            logging = WebDNNLogging.getInstance();\n        }\n        return new WebDNNLogger(category, logging);\n    }\n    emit(category, severity, message, optionalParams) {\n        for (const key of Object.keys(this.adapters)) {\n            // TODO: filter by category\n            const ad = this.adapters[key];\n            const config = this.currentConfig.adapters[key];\n            let match = true;\n            const ll = config.loglevel;\n            if (ll) {\n                const rootLoglevel = ll[\"\"];\n                if (rootLoglevel !== undefined) {\n                    if (severity > rootLoglevel) {\n                        // high severity value = unimportant\n                        match = false;\n                    }\n                }\n            }\n            if (match) {\n                ad.emit(category, severity, message, optionalParams);\n            }\n        }\n    }\n    /**\n     * Clear buffered messages\n     */\n    clear() {\n        for (const key of Object.keys(this.adapters)) {\n            const ad = this.adapters[key];\n            ad.clear();\n        }\n    }\n}\nexports.WebDNNLogging = WebDNNLogging;\nWebDNNLogging.FATAL = 0;\nWebDNNLogging.ERROR = 1;\nWebDNNLogging.WARN = 2;\nWebDNNLogging.INFO = 3;\nWebDNNLogging.DEBUG = 4;\nif (typeof window.WebDNNLoggingManagerInstance === \"undefined\") {\n    window.WebDNNLoggingManagerInstance = new WebDNNLogging();\n}\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/logging.ts?");

/***/ }),

/***/ "./src/descriptor_runner/math.ts":
/*!***************************************!*\
  !*** ./src/descriptor_runner/math.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @module webdnn/math\n * @preferred\n *\n * Module `WebDNN.Math` provides basic mathematics operations for pre/post-processing.\n */\n/** Don't Remove This comment block */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./math/argsort */ \"./src/descriptor_runner/math/argsort.ts\"), exports);\n__exportStar(__webpack_require__(/*! ./math/random */ \"./src/descriptor_runner/math/random.ts\"), exports);\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/math.ts?");

/***/ }),

/***/ "./src/descriptor_runner/math/argsort.ts":
/*!***********************************************!*\
  !*** ./src/descriptor_runner/math/argsort.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * @module webdnn/math\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.argmin = exports.argmax = void 0;\n/** Don't Remove This comment block */\n/**\n * Return indices of the top-K largest elements.\n * This implementation is not stable sort.\n *\n * @param {number[]|Float32Array} arr array\n * @param {number} k number of indices\n * @returns {number[]} indices of top-K largest samples\n */\nfunction argmax(arr, k = 1) {\n    // Top-k Quicksort\n    arr = arr.slice();\n    const stack = [[0, arr.length]], workspace = [];\n    for (let i = 0; i < arr.length; i++)\n        workspace[i] = i;\n    while (stack.length > 0) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const [from, to] = stack.pop(), pivot = arr[to - 1];\n        let left = from, right = to - 2, tmp;\n        if (from >= to - 1)\n            continue;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            while (arr[left] > pivot && left <= right)\n                left++;\n            while (arr[right] <= pivot && left <= right)\n                right--;\n            if (left >= right)\n                break;\n            tmp = arr[left];\n            arr[left] = arr[right];\n            arr[right] = tmp;\n            tmp = workspace[left];\n            workspace[left] = workspace[right];\n            workspace[right] = tmp;\n        }\n        arr[to - 1] = arr[left];\n        arr[left] = pivot;\n        tmp = workspace[to - 1];\n        workspace[to - 1] = workspace[left];\n        workspace[left] = tmp;\n        // If partial segment contains top-K elements, append it into stack\n        stack.push([from, left]); // Left (=larger) segment always contains top-K elements\n        if (left + 1 < k)\n            stack.push([left + 1, to]);\n    }\n    const result = [];\n    for (let i = 0; i < k; i++)\n        result.push(workspace[i]);\n    return result;\n}\nexports.argmax = argmax;\n/**\n * Return indices of the top-K smallest elements.\n * This implementation is not stable sort.\n *\n * @param {number[]|Float32Array|Int32Array} arr array\n * @param {number} k number of indices\n * @returns {number[]} indices of top-K smallest samples\n */\nfunction argmin(arr, k = 1) {\n    // Top-k Quicksort\n    arr = arr.slice();\n    const stack = [[0, arr.length]], workspace = [];\n    for (let i = 0; i < arr.length; i++)\n        workspace[i] = i;\n    while (stack.length > 0) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const [from, to] = stack.pop(), pivot = arr[to - 1];\n        let left = from, right = to - 2, tmp;\n        if (from >= to - 1)\n            continue;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            while (arr[left] < pivot && left <= right)\n                left++;\n            while (arr[right] >= pivot && left <= right)\n                right--;\n            if (left >= right)\n                break;\n            tmp = arr[left];\n            arr[left] = arr[right];\n            arr[right] = tmp;\n            tmp = workspace[left];\n            workspace[left] = workspace[right];\n            workspace[right] = tmp;\n        }\n        arr[to - 1] = arr[left];\n        arr[left] = pivot;\n        tmp = workspace[to - 1];\n        workspace[to - 1] = workspace[left];\n        workspace[left] = tmp;\n        // If partial segment contains top-K elements, append it into stack\n        stack.push([from, left]); // Left (=larger) segment always contains top-K elements\n        if (left + 1 < k)\n            stack.push([left + 1, to]);\n    }\n    const result = [];\n    for (let i = 0; i < k; i++)\n        result.push(workspace[i]);\n    return result;\n}\nexports.argmin = argmin;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/math/argsort.ts?");

/***/ }),

/***/ "./src/descriptor_runner/math/random.ts":
/*!**********************************************!*\
  !*** ./src/descriptor_runner/math/random.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Random = void 0;\n/**\n * Random number / vector generator.\n */\nclass Random {\n    constructor(seed = 0) {\n        // Algorithm: XorShift\n        this.x = seed | 0;\n        this.y = 362436069;\n        this.z = 521288629;\n        this.w = 88675123;\n        // skip some initial values to decorrelate seed\n        for (let i = 0; i < 40; i++) {\n            this.randomRaw();\n        }\n    }\n    /**\n     * Generates random integer\n     * @returns Random integer [-2**31, 2**31-1]\n     */\n    randomRaw() {\n        const x = this.x;\n        const t = x ^ (x << 11);\n        this.x = this.y;\n        this.y = this.z;\n        const w = this.w;\n        this.z = w;\n        const nw = w ^ (w >>> 19) ^ (t ^ (t >>> 8));\n        this.w = nw;\n        return nw; // 32bit signed integer\n    }\n    random(size) {\n        if (size == null) {\n            // scalar number\n            let raw = this.randomRaw(); // [-2**31, 2**31-1]\n            raw += 2147483648; // [0, 2**32-1]\n            return raw / 4294967296; // [0, 1)\n        }\n        else {\n            // Float32Array\n            const v = new Float32Array(size);\n            for (let i = 0; i < size; i++) {\n                let raw = this.randomRaw(); // [-2**31, 2**31-1]\n                raw += 2147483648; // [0, 2**32-1]\n                const s = raw / 4294967296; // [0, 1)\n                v[i] = s;\n            }\n            return v;\n        }\n    }\n    normal(size) {\n        // Box–Muller's method\n        if (size == null) {\n            // scalar number\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                const x = this.random();\n                const alpha = Math.sqrt(-2 * Math.log(x));\n                if (!Number.isFinite(alpha)) {\n                    // very rare case\n                    continue;\n                }\n                const y = this.random();\n                const z1 = alpha * Math.cos(Math.PI * 2 * y);\n                return z1;\n            }\n        }\n        else {\n            // Float32Array\n            const v = new Float32Array(size);\n            for (let i = 0; i < size; i += 2) {\n                // eslint-disable-next-line no-constant-condition\n                while (true) {\n                    const x = this.random();\n                    const alpha = Math.sqrt(-2 * Math.log(x));\n                    if (!Number.isFinite(alpha)) {\n                        // very rare case\n                        continue;\n                    }\n                    const y = this.random();\n                    const z1 = alpha * Math.cos(Math.PI * 2 * y);\n                    const z2 = alpha * Math.sin(Math.PI * 2 * y);\n                    v[i] = z1;\n                    if (i + 1 < size) {\n                        v[i + 1] = z2;\n                    }\n                    break;\n                }\n            }\n            return v;\n        }\n    }\n}\nexports.Random = Random;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/math/random.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/base/averagepool.ts":
/*!*************************************************************!*\
  !*** ./src/descriptor_runner/operators/base/averagepool.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AveragePool = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\n// Version 11\nclass AveragePool extends operatorImpl_1.OperatorImpl {\n    constructor(backend) {\n        super(backend);\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.autoPad = operatorUtil_1.getAttrString(attribute, \"auto_pad\", \"NOTSET\");\n        this.ceilMode = operatorUtil_1.getAttrInt(attribute, \"ceil_mode\", 0) !== 0;\n        this.countIncludePad = operatorUtil_1.getAttrInt(attribute, \"count_include_pad\", 0) !== 0;\n        this.kernelShape = operatorUtil_1.getAttrInts(attribute, \"kernel_shape\", []);\n        this.pads = operatorUtil_1.getAttrInts(attribute, \"pads\", []);\n        this.strides = operatorUtil_1.getAttrInts(attribute, \"strides\", []);\n    }\n    calcShape(dimsX) {\n        const batch = dimsX[0], { kernelShape } = this, strides = this.strides.length > 0 ? this.strides : [1, 1], inShape = [dimsX[2], dimsX[3]];\n        let outShape;\n        let pads;\n        if (this.autoPad === \"NOTSET\") {\n            pads = this.pads.length > 0 ? this.pads : [0, 0, 0, 0];\n            if (this.ceilMode) {\n                outShape = [\n                    Math.ceil((inShape[0] + pads[0] + pads[2] - kernelShape[0]) / strides[0]) + 1,\n                    Math.ceil((inShape[1] + pads[1] + pads[3] - kernelShape[1]) / strides[1]) + 1,\n                ];\n            }\n            else {\n                outShape = [\n                    Math.floor((inShape[0] + pads[0] + pads[2] - kernelShape[0]) / strides[0]) + 1,\n                    Math.floor((inShape[1] + pads[1] + pads[3] - kernelShape[1]) / strides[1]) + 1,\n                ];\n            }\n        }\n        else if (this.autoPad === \"SAME_UPPER\" || this.autoPad === \"SAME_LOWER\") {\n            // calculate output shape as if padding is zero\n            outShape = [\n                Math.ceil(inShape[0] / strides[0]),\n                Math.ceil(inShape[1] / strides[1]),\n            ];\n            // calculate needed padding\n            const sumPad = [\n                (outShape[0] - 1) * strides[0] + kernelShape[0] - inShape[0],\n                (outShape[1] - 1) * strides[1] + kernelShape[1] - inShape[1],\n            ];\n            if (this.autoPad === \"SAME_UPPER\") {\n                pads = [\n                    Math.floor(sumPad[0] / 2),\n                    Math.floor(sumPad[1] / 2),\n                    Math.ceil(sumPad[0] / 2),\n                    Math.ceil(sumPad[1] / 2),\n                ];\n            }\n            else if (this.autoPad === \"SAME_LOWER\") {\n                pads = [\n                    Math.ceil(sumPad[0] / 2),\n                    Math.ceil(sumPad[1] / 2),\n                    Math.floor(sumPad[0] / 2),\n                    Math.floor(sumPad[1] / 2),\n                ];\n            }\n            else {\n                throw new Error();\n            }\n        }\n        else if (this.autoPad === \"VALID\") {\n            outShape = [\n                Math.ceil((inShape[0] - kernelShape[0] + 1) / strides[0]),\n                Math.ceil((inShape[1] - kernelShape[1] + 1) / strides[1]),\n            ];\n            pads = [0, 0, 0, 0];\n        }\n        else {\n            throw new Error(`Unknown auto_pad ${this.autoPad} for AveragePool`);\n        }\n        const ch = dimsX[1];\n        return {\n            batch,\n            kernelShape,\n            pads,\n            strides,\n            inShape,\n            outShape,\n            ch,\n        };\n    }\n}\nexports.AveragePool = AveragePool;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/base/averagepool.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/base/conv.ts":
/*!******************************************************!*\
  !*** ./src/descriptor_runner/operators/base/conv.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Conv = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\n// Version 11\nclass Conv extends operatorImpl_1.OperatorImpl {\n    constructor(backend) {\n        super(backend);\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.dilations = operatorUtil_1.getAttrInts(attribute, \"dilations\", []);\n        this.group = operatorUtil_1.getAttrInt(attribute, \"group\", 1);\n        this.kernelShape = operatorUtil_1.getAttrInts(attribute, \"kernel_shape\", []);\n        this.pads = operatorUtil_1.getAttrInts(attribute, \"pads\", []);\n        this.strides = operatorUtil_1.getAttrInts(attribute, \"strides\", []);\n    }\n    calcShape(dimsX, dimsW) {\n        const batch = dimsX[0], dilations = this.dilations.length > 0 ? this.dilations : [1, 1], { group } = this, kernelShape = this.kernelShape.length > 0 ? this.kernelShape : [dimsW[2], dimsW[3]], pads = this.pads.length > 0 ? this.pads : [0, 0, 0, 0], strides = this.strides.length > 0 ? this.strides : [1, 1], inShape = [dimsX[2], dimsX[3]], outShape = [\n            Math.floor((inShape[0] +\n                pads[0] +\n                pads[2] -\n                dilations[0] * (kernelShape[0] - 1) -\n                1) /\n                strides[0]) + 1,\n            Math.floor((inShape[1] +\n                pads[1] +\n                pads[3] -\n                dilations[1] * (kernelShape[1] - 1) -\n                1) /\n                strides[1]) + 1,\n        ], chIn = dimsX[1], chInPerGroup = chIn / group, chOut = dimsW[0], chOutPerGroup = chOut / group;\n        return {\n            batch,\n            dilations,\n            group,\n            kernelShape,\n            pads,\n            strides,\n            inShape,\n            outShape,\n            chIn,\n            chInPerGroup,\n            chOut,\n            chOutPerGroup,\n        };\n    }\n}\nexports.Conv = Conv;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/base/conv.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/base/convtranspose.ts":
/*!***************************************************************!*\
  !*** ./src/descriptor_runner/operators/base/convtranspose.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConvTranspose = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\n// Version 11\nclass ConvTranspose extends operatorImpl_1.OperatorImpl {\n    constructor(backend) {\n        super(backend);\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.autoPad = operatorUtil_1.getAttrString(attribute, \"auto_pad\", \"NOTSET\");\n        this.dilations = operatorUtil_1.getAttrInts(attribute, \"dilations\", []);\n        this.group = operatorUtil_1.getAttrInt(attribute, \"group\", 1);\n        this.kernelShape = operatorUtil_1.getAttrInts(attribute, \"kernel_shape\", []);\n        this.outputPadding = operatorUtil_1.getAttrInts(attribute, \"output_padding\", []);\n        this.outputShape = operatorUtil_1.getAttrInts(attribute, \"output_shape\", []);\n        this.pads = operatorUtil_1.getAttrInts(attribute, \"pads\", []);\n        this.strides = operatorUtil_1.getAttrInts(attribute, \"strides\", []);\n    }\n    calcShape(dimsX, dimsW) {\n        if (this.autoPad !== \"NOTSET\") {\n            throw new Error(\"ConvTranspose: auto_pad !== NOTSET is not yet supported.\");\n        }\n        if (this.outputShape.length > 0) {\n            throw new Error(\"ConvTranspose: explicit output_shape is not yet supported.\");\n        }\n        const batch = dimsX[0], dilations = this.dilations.length > 0 ? this.dilations : [1, 1], { group } = this, kernelShape = this.kernelShape.length > 0 ? this.kernelShape : [dimsW[2], dimsW[3]], pads = this.pads.length > 0 ? this.pads : [0, 0, 0, 0], strides = this.strides.length > 0 ? this.strides : [1, 1], inShape = [dimsX[2], dimsX[3]], outputPadding = this.outputPadding.length > 0 ? this.outputPadding : [0, 0], outShape = [\n            strides[0] * (inShape[0] - 1) +\n                outputPadding[0] +\n                (kernelShape[0] - 1) * dilations[0] +\n                1 -\n                pads[0] -\n                pads[2],\n            strides[1] * (inShape[1] - 1) +\n                outputPadding[1] +\n                (kernelShape[1] - 1) * dilations[1] +\n                1 -\n                pads[1] -\n                pads[3],\n        ], chIn = dimsX[1], chInPerGroup = chIn / group, chOutPerGroup = dimsW[1], chOut = chOutPerGroup * group;\n        return {\n            batch,\n            dilations,\n            group,\n            kernelShape,\n            pads,\n            strides,\n            inShape,\n            outShape,\n            chIn,\n            chInPerGroup,\n            chOut,\n            chOutPerGroup,\n        };\n    }\n}\nexports.ConvTranspose = ConvTranspose;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/base/convtranspose.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/base/flatten.ts":
/*!*********************************************************!*\
  !*** ./src/descriptor_runner/operators/base/flatten.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Flatten = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nclass Flatten extends operatorImpl_1.OperatorImpl {\n    initialize(attribute) {\n        super.initialize(attribute);\n        const axis = operatorUtil_1.getAttrInt(attribute, \"axis\", 1);\n        if (axis !== 1) {\n            throw new Error(`Flatten: only axis === 1 is supported`);\n        }\n    }\n    calcShape(input) {\n        return [input.dims[0], operatorUtil_1.arrayProd(input.dims.slice(1))];\n    }\n}\nexports.Flatten = Flatten;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/base/flatten.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/base/gemm.ts":
/*!******************************************************!*\
  !*** ./src/descriptor_runner/operators/base/gemm.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Gemm = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\n// Version 13\nclass Gemm extends operatorImpl_1.OperatorImpl {\n    constructor(backend) {\n        super(backend);\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.alpha = operatorUtil_1.getAttrFloat(attribute, \"alpha\", 1.0);\n        this.beta = operatorUtil_1.getAttrFloat(attribute, \"beta\", 1.0);\n        this.transA = operatorUtil_1.getAttrInt(attribute, \"transA\", 0);\n        this.transB = operatorUtil_1.getAttrInt(attribute, \"transB\", 0);\n    }\n    calcShape(dimsA, dimsB) {\n        let k, kcheck, m, n, strideA, strideB;\n        if (dimsA.length !== 2 || dimsB.length !== 2) {\n            throw new Error();\n        }\n        if (this.transA) {\n            k = dimsA[0];\n            m = dimsA[1];\n            strideA = [1, m];\n        }\n        else {\n            m = dimsA[0];\n            k = dimsA[1];\n            strideA = [k, 1];\n        }\n        if (this.transB) {\n            n = dimsB[0];\n            kcheck = dimsB[1];\n            strideB = [1, kcheck];\n        }\n        else {\n            kcheck = dimsB[0];\n            n = dimsB[1];\n            strideB = [n, 1];\n        }\n        if (k !== kcheck) {\n            throw new Error();\n        }\n        return { m, n, k, strideA, strideB };\n    }\n}\nexports.Gemm = Gemm;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/base/gemm.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/base/matmul.ts":
/*!********************************************************!*\
  !*** ./src/descriptor_runner/operators/base/matmul.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MatMul = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\n// Version 13\nclass MatMul extends operatorImpl_1.OperatorImpl {\n    calcShape(dimsA, dimsB) {\n        /*\n         *Matmulの出力shape、入力stride計算\n         *matmul((a,b,m,k), (a,b,k,n)) => (a,b,m,n)\n         *\n         *a, bの部分は2個に限らず0~無限個の次元がつけられる。\n         *2行列で各次元のサイズは一致が必要。\n         *broadcastingあり。次元数が少ない側には先頭にサイズ1の次元が付与。\n         *そのうえでサイズ1とそれ以外のサイズがある場合にそれ以外のサイズに合わせbroadcast\n         *\n         *一方の入力が１次元の場合の特例。\n         *(k), (a,b,k,n) => (a,b,n)\n         *(k)を(a,b,1,k)にbroadcastしたうえで計算して、(a,b,1,n)を得て、1の軸を消して(a,b,n)\n         *\n         *(a,b,m,k), (k) => (a,b,m)\n         *(k)を(a,b,k,1)にbroadcastしたうえで計算して、(a,b,m,1)を得て、１の軸を消して(a,b,m)\n         *\n         *両方１次元だと、単純な内積で(1,1)を得て１の軸２つが消え、０次元のスカラー値。\n         */\n        // 出力の次元数（1次元の場合の特例適用前）\n        const totalNDims = Math.max(dimsA.length, dimsB.length, 2), expandedDimsA = dimsA.slice();\n        if (expandedDimsA.length === 0) {\n            throw new Error();\n        }\n        else if (expandedDimsA.length === 1) {\n            expandedDimsA.unshift(1);\n        }\n        while (expandedDimsA.length < totalNDims) {\n            expandedDimsA.unshift(1);\n        }\n        const expandedDimsB = dimsB.slice();\n        if (expandedDimsB.length === 0) {\n            throw new Error();\n        }\n        else if (expandedDimsB.length === 1) {\n            expandedDimsB.push(1);\n        }\n        while (expandedDimsB.length < totalNDims) {\n            expandedDimsB.unshift(1);\n        }\n        const resultDims = [\n            expandedDimsA[expandedDimsA.length - 2],\n            expandedDimsB[expandedDimsB.length - 1],\n        ], innerProductLength = expandedDimsA[expandedDimsA.length - 1];\n        if (innerProductLength !== expandedDimsB[expandedDimsB.length - 2]) {\n            throw new Error();\n        }\n        const stridesA = operatorUtil_1.calcStrides(expandedDimsA), stridesB = operatorUtil_1.calcStrides(expandedDimsB);\n        for (let i = expandedDimsA.length - 3; i >= 0; i--) {\n            const resultDim = Math.max(expandedDimsA[i], expandedDimsB[i]);\n            // Broadcastされた次元はstrideは0 (出力サイズ1の次元でも0にしてOK)\n            if (expandedDimsA[i] === 1) {\n                stridesA[i] = 0;\n            }\n            if (expandedDimsB[i] === 1) {\n                stridesB[i] = 0;\n            }\n            resultDims.unshift(resultDim);\n        }\n        const resultStrides = operatorUtil_1.calcStrides(resultDims), resultLength = resultStrides[0] * resultDims[0], resultDimsAfterSqueeze = resultDims.slice();\n        if (dimsA.length === 1) {\n            resultDimsAfterSqueeze.splice(resultDimsAfterSqueeze.length - 2, 1);\n        }\n        if (dimsB.length === 1) {\n            resultDimsAfterSqueeze.splice(resultDimsAfterSqueeze.length - 1, 1);\n        }\n        return {\n            resultLength,\n            resultDims,\n            resultStrides,\n            resultDimsAfterSqueeze,\n            stridesA,\n            stridesB,\n            innerProductLength,\n        };\n    }\n}\nexports.MatMul = MatMul;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/base/matmul.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/base/maxpool.ts":
/*!*********************************************************!*\
  !*** ./src/descriptor_runner/operators/base/maxpool.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MaxPool = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nclass MaxPool extends operatorImpl_1.OperatorImpl {\n    constructor(backend) {\n        super(backend);\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.autoPad = operatorUtil_1.getAttrString(attribute, \"auto_pad\", \"NOTSET\");\n        this.ceilMode = operatorUtil_1.getAttrInt(attribute, \"ceil_mode\", 0) !== 0;\n        this.dilations = operatorUtil_1.getAttrInts(attribute, \"dilations\", []);\n        this.kernelShape = operatorUtil_1.getAttrInts(attribute, \"kernel_shape\", []);\n        this.pads = operatorUtil_1.getAttrInts(attribute, \"pads\", []);\n        this.strides = operatorUtil_1.getAttrInts(attribute, \"strides\", []);\n        const storageOrder = operatorUtil_1.getAttrInt(attribute, \"storage_order\", 0);\n        if (storageOrder !== 0) {\n            throw new Error(`MaxPool: storage_order !== 0 is not supported.`);\n        }\n    }\n    calcShape(dimsX) {\n        const batch = dimsX[0], dilations = this.dilations.length > 0 ? this.dilations : [1, 1], { kernelShape } = this, strides = this.strides.length > 0 ? this.strides : [1, 1], inShape = [dimsX[2], dimsX[3]];\n        let outShape;\n        let pads;\n        if (this.autoPad === \"NOTSET\") {\n            pads = this.pads.length > 0 ? this.pads : [0, 0, 0, 0];\n            if (this.ceilMode) {\n                outShape = [\n                    Math.ceil((inShape[0] +\n                        pads[0] +\n                        pads[2] -\n                        dilations[0] * (kernelShape[0] - 1) -\n                        1) /\n                        strides[0]) + 1,\n                    Math.ceil((inShape[1] +\n                        pads[1] +\n                        pads[3] -\n                        dilations[1] * (kernelShape[1] - 1) -\n                        1) /\n                        strides[1]) + 1,\n                ];\n            }\n            else {\n                outShape = [\n                    Math.floor((inShape[0] +\n                        pads[0] +\n                        pads[2] -\n                        dilations[0] * (kernelShape[0] - 1) -\n                        1) /\n                        strides[0]) + 1,\n                    Math.floor((inShape[1] +\n                        pads[1] +\n                        pads[3] -\n                        dilations[1] * (kernelShape[1] - 1) -\n                        1) /\n                        strides[1]) + 1,\n                ];\n            }\n        }\n        else if (this.autoPad === \"SAME_UPPER\" || this.autoPad === \"SAME_LOWER\") {\n            // calculate output shape as if padding is zero\n            outShape = [\n                Math.ceil(inShape[0] / strides[0]),\n                Math.ceil(inShape[1] / strides[1]),\n            ];\n            // calculate needed padding\n            const sumPad = [\n                (outShape[0] - 1) * strides[0] +\n                    ((kernelShape[0] - 1) * dilations[0] + 1) -\n                    inShape[0],\n                (outShape[1] - 1) * strides[1] +\n                    ((kernelShape[1] - 1) * dilations[1] + 1) -\n                    inShape[1],\n            ];\n            if (this.autoPad === \"SAME_UPPER\") {\n                pads = [\n                    Math.floor(sumPad[0] / 2),\n                    Math.floor(sumPad[1] / 2),\n                    Math.ceil(sumPad[0] / 2),\n                    Math.ceil(sumPad[1] / 2),\n                ];\n            }\n            else if (this.autoPad === \"SAME_LOWER\") {\n                pads = [\n                    Math.ceil(sumPad[0] / 2),\n                    Math.ceil(sumPad[1] / 2),\n                    Math.floor(sumPad[0] / 2),\n                    Math.floor(sumPad[1] / 2),\n                ];\n            }\n            else {\n                throw new Error();\n            }\n        }\n        else if (this.autoPad === \"VALID\") {\n            outShape = [\n                Math.ceil((inShape[0] - dilations[0] * (kernelShape[0] - 1)) / strides[0]),\n                Math.ceil((inShape[1] - dilations[1] * (kernelShape[1] - 1)) / strides[1]),\n            ];\n            pads = [0, 0, 0, 0];\n        }\n        else {\n            throw new Error(`Unknown auto_pad ${this.autoPad} for MaxPool`);\n        }\n        const ch = dimsX[1];\n        return {\n            batch,\n            dilations,\n            kernelShape,\n            pads,\n            strides,\n            inShape,\n            outShape,\n            ch,\n        };\n    }\n}\nexports.MaxPool = MaxPool;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/base/maxpool.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/base/pad11.ts":
/*!*******************************************************!*\
  !*** ./src/descriptor_runner/operators/base/pad11.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Pad11 = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\n/*\n * Opset 11\n * opset 2は互換性なし\n */\nclass Pad11 extends operatorImpl_1.OperatorImpl {\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.mode = operatorUtil_1.getAttrString(attribute, \"mode\", \"constant\");\n    }\n    getTensorBackendRequirement(nInputs, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    nOutputs) {\n        if (nInputs === 2) {\n            return [this.backend, \"cpu\"];\n        }\n        else {\n            return [this.backend, \"cpu\", \"cpu\"];\n        }\n    }\n    calcShape(input, padTensor) {\n        const outputShape = [];\n        const pads = Array.from(padTensor.data);\n        for (let i = 0; i < input.ndim; i++) {\n            outputShape.push(input.dims[i] + pads[i] + pads[i + input.ndim]);\n        }\n        return { outputShape, pads };\n    }\n}\nexports.Pad11 = Pad11;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/base/pad11.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/base/reshape5.ts":
/*!**********************************************************!*\
  !*** ./src/descriptor_runner/operators/base/reshape5.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Reshape5 = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\n// Opset under 5 takes shape as attribute. not compatible.\nclass Reshape5 extends operatorImpl_1.OperatorImpl {\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.allowzero = operatorUtil_1.getAttrInt(attribute, \"allowzero\", 0) !== 0;\n    }\n    calcShape(input, shapeTensor) {\n        const shapeInput = Array.from(shapeTensor.data);\n        let computedShape;\n        if (this.allowzero) {\n            let explicitProd = 1, minusDim = -1;\n            shapeInput.forEach((s, i) => {\n                if (s > 0) {\n                    explicitProd *= s;\n                }\n                else if (s === -1) {\n                    if (minusDim >= 0) {\n                        throw new Error(\"Reshape: multiple -1 dimensions\");\n                    }\n                    minusDim = i;\n                }\n            });\n            if (minusDim >= 0 && explicitProd <= 0) {\n                throw new Error();\n            }\n            const minusDimValue = input.length / explicitProd;\n            computedShape = shapeInput.map((s) => {\n                if (s >= 0) {\n                    return s;\n                }\n                return minusDimValue;\n            });\n        }\n        else {\n            let explicitProd = 1, minusDim = -1;\n            shapeInput.forEach((s, i) => {\n                if (s > 0) {\n                    explicitProd *= s;\n                }\n                else if (s === 0) {\n                    explicitProd *= input.dims[i];\n                }\n                else {\n                    if (s !== -1) {\n                        throw new Error();\n                    }\n                    if (minusDim >= 0) {\n                        throw new Error(\"Reshape: multiple -1 dimensions\");\n                    }\n                    minusDim = i;\n                }\n            });\n            if (minusDim >= 0 && explicitProd <= 0) {\n                throw new Error();\n            }\n            const minusDimValue = input.length / explicitProd;\n            computedShape = shapeInput.map((s, i) => {\n                if (s > 0) {\n                    return s;\n                }\n                else if (s === 0) {\n                    return input.dims[i];\n                }\n                return minusDimValue;\n            });\n        }\n        return computedShape;\n    }\n}\nexports.Reshape5 = Reshape5;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/base/reshape5.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/base/split.ts":
/*!*******************************************************!*\
  !*** ./src/descriptor_runner/operators/base/split.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Split13 = exports.Split2 = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nclass Split extends operatorImpl_1.OperatorImpl {\n    calcShapeBase(input, nOutputs, splitSrc) {\n        let { axis } = this;\n        if (axis < 0) {\n            axis += input.ndim;\n        }\n        if (axis < 0 || axis >= input.ndim) {\n            throw new Error(`Split: axis ${axis} out of range`);\n        }\n        const axisLength = input.dims[axis], split = splitSrc.length > 0\n            ? splitSrc\n            : Array.from({ length: nOutputs }, () => Math.floor(axisLength / nOutputs)), outerLength = operatorUtil_1.arrayProd(input.dims.slice(0, axis)), innerLength = operatorUtil_1.arrayProd(input.dims.slice(axis + 1)), inOuterStride = input.strides[Math.max(axis - 1, 0)], inConcatStride = input.strides[axis];\n        let offset = 0;\n        const eachOutputParams = [];\n        for (let i = 0; i < nOutputs; i++) {\n            const dim = split[i], outShape = input.dims.slice();\n            outShape[axis] = dim;\n            // Stride of output axis=Math.max(axis-1, 0)\n            const outerStride = operatorUtil_1.arrayProd(outShape.slice(Math.max(axis - 1, 0) + 1)), \n            // Stride of output axis=axis\n            splitStride = operatorUtil_1.arrayProd(outShape.slice(axis + 1));\n            eachOutputParams.push({\n                dim,\n                offset,\n                outShape,\n                outerStride,\n                splitStride,\n            });\n            offset += dim;\n        }\n        return {\n            eachOutputParams,\n            outerLength,\n            innerLength,\n            inOuterStride,\n            inConcatStride,\n        };\n    }\n}\nclass Split2 extends Split {\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.axis = operatorUtil_1.getAttrInt(attribute, \"axis\", 0);\n        this.split = operatorUtil_1.getAttrInts(attribute, \"split\", []);\n    }\n    calcShape(input, nOutputs) {\n        return this.calcShapeBase(input, nOutputs, this.split);\n    }\n}\nexports.Split2 = Split2;\nclass Split13 extends Split {\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.axis = operatorUtil_1.getAttrInt(attribute, \"axis\", 0);\n    }\n    calcShape(input, nOutputs, splitTensor) {\n        return this.calcShapeBase(input, nOutputs, splitTensor ? Array.from(splitTensor.data) : []);\n    }\n}\nexports.Split13 = Split13;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/base/split.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/base/squeeze.ts":
/*!*********************************************************!*\
  !*** ./src/descriptor_runner/operators/base/squeeze.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Squeeze13 = exports.Squeeze1 = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nclass Squeeze extends operatorImpl_1.OperatorImpl {\n    calcShapeBase(inputShape, axes) {\n        if (axes.length === 0) {\n            // remove all dimensions of 1\n            return inputShape.filter((s) => s !== 1);\n        }\n        else {\n            const nonNegativeAxes = axes.map((a) => a >= 0 ? a : a + inputShape.length);\n            return inputShape.filter((_, i) => !nonNegativeAxes.includes(i));\n        }\n    }\n}\nclass Squeeze1 extends Squeeze {\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.axes = operatorUtil_1.getAttrInts(attribute, \"axes\", []);\n    }\n    calcShape(input) {\n        return this.calcShapeBase(input.dims, this.axes);\n    }\n}\nexports.Squeeze1 = Squeeze1;\nclass Squeeze13 extends Squeeze {\n    calcShape(input, axes) {\n        return this.calcShapeBase(input.dims, axes ? Array.from(axes.data) : []);\n    }\n}\nexports.Squeeze13 = Squeeze13;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/base/squeeze.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/base/transpose.ts":
/*!***********************************************************!*\
  !*** ./src/descriptor_runner/operators/base/transpose.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Transpose = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\n// Opset 1 (13はdifferentiableがついただけ)\nclass Transpose extends operatorImpl_1.OperatorImpl {\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.perm = operatorUtil_1.getAttrInts(attribute, \"perm\", []);\n    }\n    calcShape(input) {\n        // Default perm: [ndim-1, ndim-2, ..., 0]\n        const perm = this.perm.length > 0\n            ? this.perm\n            : Array.from({ length: input.ndim }, (v, i) => input.ndim - 1 - i);\n        if (perm.length !== input.ndim) {\n            throw new Error();\n        }\n        const outShape = new Array(input.ndim), inStrides = new Array(input.ndim);\n        for (let outAxis = 0; outAxis < input.ndim; outAxis++) {\n            const inAxis = perm[outAxis];\n            outShape[outAxis] = input.dims[inAxis];\n            inStrides[outAxis] = input.strides[inAxis];\n        }\n        return { outShape, inStrides };\n    }\n}\nexports.Transpose = Transpose;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/base/transpose.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/base/unsqueeze.ts":
/*!***********************************************************!*\
  !*** ./src/descriptor_runner/operators/base/unsqueeze.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Unsqueeze13 = exports.Unsqueeze1 = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nclass Unsqueeze extends operatorImpl_1.OperatorImpl {\n    calcShapeBase(inputShape, axes) {\n        const expandedNdim = inputShape.length + axes.length;\n        const expandedShape = [];\n        let srcIdx = 0;\n        const nonNegativeAxes = axes.map((a) => (a >= 0 ? a : a + expandedNdim));\n        for (let d = 0; d < expandedNdim; d++) {\n            if (nonNegativeAxes.includes(d)) {\n                expandedShape.push(1);\n            }\n            else {\n                expandedShape.push(inputShape[srcIdx++]);\n            }\n        }\n        return expandedShape;\n    }\n}\nclass Unsqueeze1 extends Unsqueeze {\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.axes = operatorUtil_1.getAttrInts(attribute, \"axes\", []);\n    }\n    calcShape(input) {\n        return this.calcShapeBase(input.dims, this.axes);\n    }\n}\nexports.Unsqueeze1 = Unsqueeze1;\nclass Unsqueeze13 extends Unsqueeze {\n    calcShape(input, axes) {\n        return this.calcShapeBase(input.dims, Array.from(axes.data));\n    }\n}\nexports.Unsqueeze13 = Unsqueeze13;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/base/unsqueeze.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/opEntriesStandard.ts":
/*!******************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/opEntriesStandard.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst averagepool_1 = __webpack_require__(/*! ./operators/standard/averagepool */ \"./src/descriptor_runner/operators/cpu/operators/standard/averagepool.ts\");\nconst binary7_1 = __webpack_require__(/*! ./operators/standard/binary7 */ \"./src/descriptor_runner/operators/cpu/operators/standard/binary7.ts\");\nconst cast_1 = __webpack_require__(/*! ./operators/standard/cast */ \"./src/descriptor_runner/operators/cpu/operators/standard/cast.ts\");\nconst clip_1 = __webpack_require__(/*! ./operators/standard/clip */ \"./src/descriptor_runner/operators/cpu/operators/standard/clip.ts\");\nconst concat_1 = __webpack_require__(/*! ./operators/standard/concat */ \"./src/descriptor_runner/operators/cpu/operators/standard/concat.ts\");\nconst constant_1 = __webpack_require__(/*! ./operators/standard/constant */ \"./src/descriptor_runner/operators/cpu/operators/standard/constant.ts\");\nconst constantofshape_1 = __webpack_require__(/*! ./operators/standard/constantofshape */ \"./src/descriptor_runner/operators/cpu/operators/standard/constantofshape.ts\");\nconst conv_1 = __webpack_require__(/*! ./operators/standard/conv */ \"./src/descriptor_runner/operators/cpu/operators/standard/conv.ts\");\nconst convtranspose_1 = __webpack_require__(/*! ./operators/standard/convtranspose */ \"./src/descriptor_runner/operators/cpu/operators/standard/convtranspose.ts\");\nconst dynamicunary_1 = __webpack_require__(/*! ./operators/standard/dynamicunary */ \"./src/descriptor_runner/operators/cpu/operators/standard/dynamicunary.ts\");\nconst eachelementwise_1 = __webpack_require__(/*! ./operators/standard/eachelementwise */ \"./src/descriptor_runner/operators/cpu/operators/standard/eachelementwise.ts\");\nconst flatten_1 = __webpack_require__(/*! ./operators/standard/flatten */ \"./src/descriptor_runner/operators/cpu/operators/standard/flatten.ts\");\nconst gather_1 = __webpack_require__(/*! ./operators/standard/gather */ \"./src/descriptor_runner/operators/cpu/operators/standard/gather.ts\");\nconst gemm_1 = __webpack_require__(/*! ./operators/standard/gemm */ \"./src/descriptor_runner/operators/cpu/operators/standard/gemm.ts\");\nconst globalaveragepool_1 = __webpack_require__(/*! ./operators/standard/globalaveragepool */ \"./src/descriptor_runner/operators/cpu/operators/standard/globalaveragepool.ts\");\nconst instancenormalization_1 = __webpack_require__(/*! ./operators/standard/instancenormalization */ \"./src/descriptor_runner/operators/cpu/operators/standard/instancenormalization.ts\");\nconst matmul_1 = __webpack_require__(/*! ./operators/standard/matmul */ \"./src/descriptor_runner/operators/cpu/operators/standard/matmul.ts\");\nconst maxpool_1 = __webpack_require__(/*! ./operators/standard/maxpool */ \"./src/descriptor_runner/operators/cpu/operators/standard/maxpool.ts\");\nconst pad11_1 = __webpack_require__(/*! ./operators/standard/pad11 */ \"./src/descriptor_runner/operators/cpu/operators/standard/pad11.ts\");\nconst reduce_1 = __webpack_require__(/*! ./operators/standard/reduce */ \"./src/descriptor_runner/operators/cpu/operators/standard/reduce.ts\");\nconst reshape5_1 = __webpack_require__(/*! ./operators/standard/reshape5 */ \"./src/descriptor_runner/operators/cpu/operators/standard/reshape5.ts\");\nconst shape_1 = __webpack_require__(/*! ./operators/standard/shape */ \"./src/descriptor_runner/operators/cpu/operators/standard/shape.ts\");\nconst slice_1 = __webpack_require__(/*! ./operators/standard/slice */ \"./src/descriptor_runner/operators/cpu/operators/standard/slice.ts\");\nconst softmax_1 = __webpack_require__(/*! ./operators/standard/softmax */ \"./src/descriptor_runner/operators/cpu/operators/standard/softmax.ts\");\nconst split_1 = __webpack_require__(/*! ./operators/standard/split */ \"./src/descriptor_runner/operators/cpu/operators/standard/split.ts\");\nconst squeeze_1 = __webpack_require__(/*! ./operators/standard/squeeze */ \"./src/descriptor_runner/operators/cpu/operators/standard/squeeze.ts\");\nconst tile_1 = __webpack_require__(/*! ./operators/standard/tile */ \"./src/descriptor_runner/operators/cpu/operators/standard/tile.ts\");\nconst transpose_1 = __webpack_require__(/*! ./operators/standard/transpose */ \"./src/descriptor_runner/operators/cpu/operators/standard/transpose.ts\");\nconst unary_1 = __webpack_require__(/*! ./operators/standard/unary */ \"./src/descriptor_runner/operators/cpu/operators/standard/unary.ts\");\nconst unsqueeze_1 = __webpack_require__(/*! ./operators/standard/unsqueeze */ \"./src/descriptor_runner/operators/cpu/operators/standard/unsqueeze.ts\");\nfunction getOpEntries() {\n    const entries = [];\n    entries.push(...averagepool_1.getOpEntries());\n    entries.push(...binary7_1.getOpEntries());\n    entries.push(...cast_1.getOpEntries());\n    entries.push(...clip_1.getOpEntries());\n    entries.push(...concat_1.getOpEntries());\n    entries.push(...constant_1.getOpEntries());\n    entries.push(...constantofshape_1.getOpEntries());\n    entries.push(...conv_1.getOpEntries());\n    entries.push(...convtranspose_1.getOpEntries());\n    entries.push(...dynamicunary_1.getOpEntries());\n    entries.push(...eachelementwise_1.getOpEntries());\n    entries.push(...flatten_1.getOpEntries());\n    entries.push(...gather_1.getOpEntries());\n    entries.push(...gemm_1.getOpEntries());\n    entries.push(...globalaveragepool_1.getOpEntries());\n    entries.push(...instancenormalization_1.getOpEntries());\n    entries.push(...matmul_1.getOpEntries());\n    entries.push(...maxpool_1.getOpEntries());\n    entries.push(...pad11_1.getOpEntries());\n    entries.push(...reduce_1.getOpEntries());\n    entries.push(...reshape5_1.getOpEntries());\n    entries.push(...shape_1.getOpEntries());\n    entries.push(...slice_1.getOpEntries());\n    entries.push(...softmax_1.getOpEntries());\n    entries.push(...split_1.getOpEntries());\n    entries.push(...squeeze_1.getOpEntries());\n    entries.push(...tile_1.getOpEntries());\n    entries.push(...transpose_1.getOpEntries());\n    entries.push(...unary_1.getOpEntries());\n    entries.push(...unsqueeze_1.getOpEntries());\n    return entries;\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/opEntriesStandard.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/averagepool.ts":
/*!*******************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/averagepool.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst averagepool_1 = __webpack_require__(/*! ../../rawcomputation/averagepool */ \"./src/descriptor_runner/operators/cpu/rawcomputation/averagepool.ts\");\nconst averagepool_2 = __webpack_require__(/*! ../../../base/averagepool */ \"./src/descriptor_runner/operators/base/averagepool.ts\");\n// Version 1, 7, 10, 11+\nclass CpuAveragePool extends averagepool_2.AveragePool {\n    constructor() {\n        super(\"cpu\");\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const inputX = inputs[0];\n        // TODO: 2D以外対応\n        if (inputX.ndim !== 4) {\n            throw new Error(\"AveragePool other than 2D is not yet supported\");\n        }\n        const { batch, kernelShape, pads, strides, inShape, outShape, ch } = this.calcShape(inputX.dims), outputData = new Float32Array(batch * outShape[0] * outShape[1] * ch);\n        averagepool_1.averagepool(inputX.data, outputData, this.countIncludePad, batch, kernelShape, pads, strides, inShape, outShape, ch);\n        const output = context.emptyTensor([batch, ch, outShape[0], outShape[1]], \"float32\", outputData);\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"AveragePool\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CpuAveragePool(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/averagepool.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/binary7.ts":
/*!***************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/binary7.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nclass Binary7 extends operatorImpl_1.OperatorImpl {\n    constructor(op, allowDataTypes) {\n        super(\"cpu\");\n        this.op = op;\n        this.allowDataTypes = allowDataTypes;\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const inputA = inputs[0], inputB = inputs[1];\n        if (inputA.dataType !== inputB.dataType) {\n            throw new Error(`Binary: input dataTypes mismatch: ${inputA.dataType} !== ${inputB.dataType}`);\n        }\n        if (!this.allowDataTypes.includes(inputA.dataType)) {\n            throw new Error(`Binary: input dataType ${inputA.dataType} is not supported`);\n        }\n        // TODO: broadcast不要の場合に特化したパフォーマンス向上\n        const { dims: outShape, allStrides: inAllStrides } = operatorUtil_1.broadcastMulti([\n            inputA.dims,\n            inputB.dims,\n        ]), output = context.emptyTensor(outShape, inputA.dataType), { op } = this;\n        let func;\n        switch (outShape.length) {\n            case 0:\n                func = this.op0d;\n                break;\n            case 1:\n                func = this.op1d;\n                break;\n            case 2:\n                func = this.op2d;\n                break;\n            case 3:\n                func = this.op3d;\n                break;\n            case 4:\n                func = this.op4d;\n                break;\n            case 5:\n                func = this.op5d;\n                break;\n            case 6:\n                func = this.op6d;\n                break;\n            default:\n                throw new Error(`Binary: input ndim ${outShape.length} > 4 is not yet supported`);\n        }\n        func(inputA.data, inputB.data, output.data, op, outShape, inAllStrides);\n        return [output];\n    }\n    op0d(dL, dR, dO, op, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    outShape, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    inAllStrides) {\n        dO[0] = op(dL[0], dR[0]);\n    }\n    op1d(dL, dR, dO, op, outShape, inAllStrides) {\n        let idx = 0;\n        for (let a0 = 0; a0 < outShape[0]; a0++) {\n            dO[idx++] = op(dL[a0 * inAllStrides[0][0]], dR[a0 * inAllStrides[1][0]]);\n        }\n    }\n    op2d(dL, dR, dO, op, outShape, inAllStrides) {\n        let idx = 0;\n        for (let a0 = 0; a0 < outShape[0]; a0++) {\n            for (let a1 = 0; a1 < outShape[1]; a1++) {\n                dO[idx++] = op(dL[a0 * inAllStrides[0][0] + a1 * inAllStrides[0][1]], dR[a0 * inAllStrides[1][0] + a1 * inAllStrides[1][1]]);\n            }\n        }\n    }\n    op3d(dL, dR, dO, op, outShape, inAllStrides) {\n        let idx = 0;\n        for (let a0 = 0; a0 < outShape[0]; a0++) {\n            for (let a1 = 0; a1 < outShape[1]; a1++) {\n                for (let a2 = 0; a2 < outShape[2]; a2++) {\n                    dO[idx++] = op(dL[a0 * inAllStrides[0][0] +\n                        a1 * inAllStrides[0][1] +\n                        a2 * inAllStrides[0][2]], dR[a0 * inAllStrides[1][0] +\n                        a1 * inAllStrides[1][1] +\n                        a2 * inAllStrides[1][2]]);\n                }\n            }\n        }\n    }\n    op4d(dL, dR, dO, op, outShape, inAllStrides) {\n        let idx = 0;\n        for (let a0 = 0; a0 < outShape[0]; a0++) {\n            for (let a1 = 0; a1 < outShape[1]; a1++) {\n                for (let a2 = 0; a2 < outShape[2]; a2++) {\n                    for (let a3 = 0; a3 < outShape[3]; a3++) {\n                        dO[idx++] = op(dL[a0 * inAllStrides[0][0] +\n                            a1 * inAllStrides[0][1] +\n                            a2 * inAllStrides[0][2] +\n                            a3 * inAllStrides[0][3]], dR[a0 * inAllStrides[1][0] +\n                            a1 * inAllStrides[1][1] +\n                            a2 * inAllStrides[1][2] +\n                            a3 * inAllStrides[1][3]]);\n                    }\n                }\n            }\n        }\n    }\n    op5d(dL, dR, dO, op, outShape, inAllStrides) {\n        let idx = 0;\n        for (let a0 = 0; a0 < outShape[0]; a0++) {\n            for (let a1 = 0; a1 < outShape[1]; a1++) {\n                for (let a2 = 0; a2 < outShape[2]; a2++) {\n                    for (let a3 = 0; a3 < outShape[3]; a3++) {\n                        for (let a4 = 0; a4 < outShape[4]; a4++) {\n                            dO[idx++] = op(dL[a0 * inAllStrides[0][0] +\n                                a1 * inAllStrides[0][1] +\n                                a2 * inAllStrides[0][2] +\n                                a3 * inAllStrides[0][3] +\n                                a4 * inAllStrides[0][4]], dR[a0 * inAllStrides[1][0] +\n                                a1 * inAllStrides[1][1] +\n                                a2 * inAllStrides[1][2] +\n                                a3 * inAllStrides[1][3] +\n                                a4 * inAllStrides[1][4]]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    op6d(dL, dR, dO, op, outShape, inAllStrides) {\n        let idx = 0;\n        for (let a0 = 0; a0 < outShape[0]; a0++) {\n            for (let a1 = 0; a1 < outShape[1]; a1++) {\n                for (let a2 = 0; a2 < outShape[2]; a2++) {\n                    for (let a3 = 0; a3 < outShape[3]; a3++) {\n                        for (let a4 = 0; a4 < outShape[4]; a4++) {\n                            for (let a5 = 0; a5 < outShape[5]; a5++) {\n                                dO[idx++] = op(dL[a0 * inAllStrides[0][0] +\n                                    a1 * inAllStrides[0][1] +\n                                    a2 * inAllStrides[0][2] +\n                                    a3 * inAllStrides[0][3] +\n                                    a4 * inAllStrides[0][4] +\n                                    a5 * inAllStrides[0][5]], dR[a0 * inAllStrides[1][0] +\n                                    a1 * inAllStrides[1][1] +\n                                    a2 * inAllStrides[1][2] +\n                                    a3 * inAllStrides[1][3] +\n                                    a4 * inAllStrides[1][4] +\n                                    a5 * inAllStrides[1][5]]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nfunction getOpEntries() {\n    return [\n        // Add, Sub, Mul, Div, Pow: opset under 7 requires explicit broadcast flag\n        {\n            opType: \"Add\",\n            backend: \"cpu\",\n            opsetMin: 7,\n            factory: () => new Binary7((lhs, rhs) => lhs + rhs, [\"float32\", \"int32\"]),\n        },\n        {\n            opType: \"Sub\",\n            backend: \"cpu\",\n            opsetMin: 7,\n            factory: () => new Binary7((lhs, rhs) => lhs - rhs, [\"float32\", \"int32\"]),\n        },\n        {\n            opType: \"Mul\",\n            backend: \"cpu\",\n            opsetMin: 7,\n            factory: () => new Binary7((lhs, rhs) => lhs * rhs, [\"float32\", \"int32\"]),\n        },\n        {\n            opType: \"Div\",\n            backend: \"cpu\",\n            opsetMin: 7,\n            factory: () => new Binary7((lhs, rhs) => lhs / rhs, [\"float32\", \"int32\"]),\n        },\n        {\n            opType: \"Pow\",\n            backend: \"cpu\",\n            opsetMin: 7,\n            factory: () => new Binary7((lhs, rhs) => lhs ** rhs, [\"float32\", \"int32\"]),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/binary7.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/cast.ts":
/*!************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/cast.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst onnx_proto_1 = __webpack_require__(/*! onnx-proto */ \"./node_modules/onnx-proto/dist/onnx.js\");\nconst constants_1 = __webpack_require__(/*! ../../../../interface/core/constants */ \"./src/descriptor_runner/interface/core/constants.ts\");\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\n// Opset 6+ (opset 1 requires \"to\" is string)\nclass Cast extends operatorImpl_1.OperatorImpl {\n    constructor() {\n        super(\"cpu\");\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.to = operatorUtil_1.getAttrInt(attribute, \"to\", onnx_proto_1.onnx.TensorProto.DataType.FLOAT);\n    }\n    async run(context, inputs) {\n        // TODO: コピー回避\n        context.assertsCPUTensorArray(inputs);\n        const input = inputs[0];\n        let outputDataType;\n        switch (this.to) {\n            case onnx_proto_1.onnx.TensorProto.DataType.FLOAT:\n                outputDataType = \"float32\";\n                break;\n            case onnx_proto_1.onnx.TensorProto.DataType.UINT8: // TODO: clip value\n            case onnx_proto_1.onnx.TensorProto.DataType.INT32:\n            case onnx_proto_1.onnx.TensorProto.DataType.INT64:\n                outputDataType = \"int32\";\n                break;\n            default:\n                throw new Error(`Cast: converting to DataType ${this.to} is not yet supported`);\n        }\n        const newData = new constants_1.DataArrayConstructor[outputDataType](input.data.length);\n        newData.set(input.data);\n        const output = context.emptyTensor(input.dims, outputDataType, newData);\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        { opType: \"Cast\", backend: \"cpu\", opsetMin: 6, factory: () => new Cast() },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/cast.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/clip.ts":
/*!************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/clip.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst constants_1 = __webpack_require__(/*! ../../../../interface/core/constants */ \"./src/descriptor_runner/interface/core/constants.ts\");\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nclass CPUClip extends operatorImpl_1.OperatorImpl {\n    constructor() {\n        super(\"cpu\");\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.clipMax = operatorUtil_1.getAttrFloat(attribute, \"max\", 65536);\n        this.clipMin = operatorUtil_1.getAttrFloat(attribute, \"min\", -65536);\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const input = inputs[0];\n        if (![\"float32\"].includes(input.dataType)) {\n            throw new Error(`Unary: DataType ${input.dataType} not supported`);\n        }\n        const newData = new constants_1.DataArrayConstructor[input.dataType](input.data.length);\n        const { clipMax, clipMin } = this;\n        for (let i = 0; i < newData.length; i++) {\n            newData[i] = Math.min(clipMax, Math.max(input.data[i], clipMin));\n        }\n        const output = context.emptyTensor(input.dims, input.dataType, newData);\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Clip\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            opsetMax: 11,\n            factory: () => new CPUClip(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/clip.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/concat.ts":
/*!**************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/concat.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nclass Concat extends operatorImpl_1.OperatorImpl {\n    constructor() {\n        super(\"cpu\");\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.axis = operatorUtil_1.getAttrInt(attribute, \"axis\", 0);\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const axis = this.axis >= 0 ? this.axis : inputs[0].ndim + this.axis;\n        if (axis < 0 || axis >= inputs[0].ndim) {\n            throw new Error(`Concat: axis ${axis} out of range`);\n        }\n        const inTensors = [];\n        let axisLength = 0;\n        for (let i = 0; i < inputs.length; i++) {\n            const it = inputs[i], dim = it.dims[axis], outerStride = it.strides[Math.max(axis - 1, 0)], concatStride = it.strides[axis], innerStride = 1;\n            inTensors.push([\n                it,\n                axisLength,\n                dim,\n                outerStride,\n                concatStride,\n                innerStride,\n            ]);\n            axisLength += dim;\n        }\n        const outputShape = inputs[0].dims.slice();\n        outputShape[axis] = axisLength;\n        const outerLength = operatorUtil_1.arrayProd(inputs[0].dims.slice(0, axis)), innerLength = operatorUtil_1.arrayProd(inputs[0].dims.slice(axis + 1)), output = context.emptyTensor(outputShape, inputs[0].dataType), outOuterStride = output.strides[Math.max(axis - 1, 0)], outConcatStride = output.strides[axis], outInnerStride = 1;\n        for (const [it, itAxisOffset, itAxisDim, outerStride, concatStride, innerStride,] of inTensors) {\n            for (let c = 0; c < itAxisDim; c++) {\n                for (let outer = 0; outer < outerLength; outer++) {\n                    for (let inner = 0; inner < innerLength; inner++) {\n                        output.data[(c + itAxisOffset) * outConcatStride +\n                            outer * outOuterStride +\n                            inner * outInnerStride] =\n                            it.data[c * concatStride + outer * outerStride + inner * innerStride];\n                    }\n                }\n            }\n        }\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Concat\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new Concat(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/concat.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/constant.ts":
/*!****************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/constant.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nclass Constant extends operatorImpl_1.OperatorImpl {\n    constructor() {\n        super(\"cpu\");\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        const constant = operatorUtil_1.getAttrTensor(attribute, \"value\");\n        if (!constant) {\n            // Sparse_value, value_float etc in opset 12 is not yet supported\n            throw new Error(\"value not exist in Constant\");\n        }\n        this.constant = constant;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async run(context, inputs) {\n        const output = context.emptyTensor(this.constant.dims, this.constant.dataType);\n        output.data.set(this.constant.data);\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Constant\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new Constant(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/constant.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/constantofshape.ts":
/*!***********************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/constantofshape.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nclass ConstantOfShape extends operatorImpl_1.OperatorImpl {\n    constructor() {\n        super(\"cpu\");\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        const constant = operatorUtil_1.getAttrTensor(attribute, \"value\");\n        if (!constant) {\n            throw new Error(\"value not exist in ConstantOfShape\");\n        }\n        this.constant = constant;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const input = Array.from(inputs[0].data);\n        const output = context.emptyTensor(input, this.constant.dataType);\n        output.data.fill(this.constant.data[0]);\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"ConstantOfShape\",\n            backend: \"cpu\",\n            opsetMin: 9,\n            factory: () => new ConstantOfShape(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/constantofshape.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/conv.ts":
/*!************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/conv.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst util_1 = __webpack_require__(/*! ../../../../util */ \"./src/descriptor_runner/util.ts\");\nconst conv_1 = __webpack_require__(/*! ../../../base/conv */ \"./src/descriptor_runner/operators/base/conv.ts\");\n// if number of elements of im2col output exceeds it, split the task by batch dimension.\nconst IM2COL_NUMEL_LIMIT = 511 * 1024 * 1024;\nclass CpuConv extends conv_1.Conv {\n    constructor() {\n        super(\"cpu\");\n    }\n    runSplitBatch(context, inputXFull, inputW, inputB) {\n        if (this.group > 1) {\n            throw new Error(\"Conv: batch splitting with group > 1 is not supported\");\n        }\n        const { batch: allBatch, dilations, group, kernelShape, pads, strides, inShape, outShape, chIn, chInPerGroup, chOut, chOutPerGroup, } = this.calcShape(inputXFull.dims, inputW.dims);\n        const im2colNumelPerBatch = group *\n            outShape[0] *\n            outShape[1] *\n            chInPerGroup *\n            kernelShape[0] *\n            kernelShape[1];\n        const iterBatch = Math.floor(IM2COL_NUMEL_LIMIT / im2colNumelPerBatch);\n        const yShape = [allBatch, chOut, outShape[0], outShape[1]];\n        if (iterBatch <= 0) {\n            throw new Error(`Conv: the size of buffer needed to process single batch exceeds limit. Input shape: ${inputXFull.dims}, weight shape: ${inputW.dims}`);\n        }\n        const output = context.emptyTensor(yShape);\n        for (let i = 0; i < allBatch; i += iterBatch) {\n            const batch = Math.min(iterBatch, allBatch - i);\n            const iterXShape = inputXFull.dims.slice();\n            iterXShape[0] = batch;\n            const xSizePerBatch = util_1.arrayProd(iterXShape.slice(1));\n            const iterXData = new Float32Array(inputXFull.data.buffer, inputXFull.data.byteOffset +\n                i * xSizePerBatch * Float32Array.BYTES_PER_ELEMENT, batch * xSizePerBatch);\n            const inputX = context.emptyTensor(iterXShape, \"float32\", iterXData);\n            const im2colData = new Float32Array(group *\n                batch *\n                outShape[0] *\n                outShape[1] *\n                chInPerGroup *\n                kernelShape[0] *\n                kernelShape[1]), matmulData = new Float32Array(group * batch * outShape[0] * outShape[1] * chOutPerGroup), transposeData = new Float32Array(output.data.buffer, output.data.byteOffset +\n                i *\n                    chOut *\n                    outShape[0] *\n                    outShape[1] *\n                    Float32Array.BYTES_PER_ELEMENT, batch * chOut * outShape[0] * outShape[1]);\n            this.im2col(inputX.data, im2colData, batch, dilations, group, kernelShape, pads, strides, inShape, outShape, chIn, chInPerGroup);\n            this.matmul(im2colData, inputW.data, matmulData, group, batch * outShape[0] * outShape[1], chInPerGroup * kernelShape[0] * kernelShape[1], chOutPerGroup);\n            this.transpose(matmulData, transposeData, group, batch, outShape[0] * outShape[1], chOutPerGroup);\n        }\n        if (inputB) {\n            this.bias(inputB.data, output.data, allBatch, chOut, outShape[0] * outShape[1]);\n        }\n        return [output];\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const inputX = inputs[0], inputW = inputs[1], inputB = inputs[2];\n        // TODO: 2D以外対応\n        if (inputX.ndim !== 4) {\n            throw new Error(\"Conv other than 2D is not yet supported\");\n        }\n        const { batch, dilations, group, kernelShape, pads, strides, inShape, outShape, chIn, chInPerGroup, chOut, chOutPerGroup, } = this.calcShape(inputX.dims, inputW.dims);\n        const im2colNumel = group *\n            batch *\n            outShape[0] *\n            outShape[1] *\n            chInPerGroup *\n            kernelShape[0] *\n            kernelShape[1];\n        if (im2colNumel > IM2COL_NUMEL_LIMIT) {\n            return this.runSplitBatch(context, inputX, inputW, inputB);\n        }\n        const im2colData = new Float32Array(im2colNumel), matmulData = new Float32Array(group * batch * outShape[0] * outShape[1] * chOutPerGroup), transposeData = new Float32Array(batch * chOut * outShape[0] * outShape[1]);\n        this.im2col(inputX.data, im2colData, batch, dilations, group, kernelShape, pads, strides, inShape, outShape, chIn, chInPerGroup);\n        this.matmul(im2colData, inputW.data, matmulData, group, batch * outShape[0] * outShape[1], chInPerGroup * kernelShape[0] * kernelShape[1], chOutPerGroup);\n        this.transpose(matmulData, transposeData, group, batch, outShape[0] * outShape[1], chOutPerGroup);\n        if (inputB) {\n            this.bias(inputB.data, transposeData, batch, chOut, outShape[0] * outShape[1]);\n        }\n        const output = context.emptyTensor([batch, chOut, outShape[0], outShape[1]], \"float32\", transposeData);\n        return [output];\n    }\n    im2col(dX, dI, batch, dilations, group, kernelShape, pads, strides, inShape, outShape, chIn, chInPerGroup) {\n        let idx = 0;\n        for (let g = 0; g < group; g++) {\n            for (let b = 0; b < batch; b++) {\n                for (let oy = 0; oy < outShape[0]; oy++) {\n                    for (let ox = 0; ox < outShape[1]; ox++) {\n                        for (let ci = 0; ci < chInPerGroup; ci++) {\n                            for (let ky = 0; ky < kernelShape[0]; ky++) {\n                                for (let kx = 0; kx < kernelShape[1]; kx++) {\n                                    let v = 0;\n                                    const iny = oy * strides[0] - pads[0] + ky * dilations[0], inx = ox * strides[1] - pads[1] + kx * dilations[1];\n                                    if (iny >= 0 &&\n                                        iny < inShape[0] &&\n                                        inx >= 0 &&\n                                        inx < inShape[1]) {\n                                        v =\n                                            dX[((b * chIn + g * chInPerGroup + ci) * inShape[0] +\n                                                iny) *\n                                                inShape[1] +\n                                                inx];\n                                    }\n                                    dI[idx++] = v;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    matmul(dI, dW, dT, group, bout, cinkhkw, chOutPerGroup) {\n        // DI(group, bout, cinkhkw) * dW(group, coutpergroup, cinkhkw) -> dT(group, bout, coutpergroup)\n        for (let g = 0; g < group; g++) {\n            for (let y = 0; y < bout; y++) {\n                for (let x = 0; x < chOutPerGroup; x++) {\n                    let s = 0;\n                    for (let ip = 0; ip < cinkhkw; ip++) {\n                        s +=\n                            dI[(g * bout + y) * cinkhkw + ip] *\n                                dW[(g * chOutPerGroup + x) * cinkhkw + ip];\n                    }\n                    dT[(g * bout + y) * chOutPerGroup + x] = s;\n                }\n            }\n        }\n    }\n    transpose(dT, dO, group, batch, outarea, chOutPerGroup) {\n        // DT(group, batch, outh, outw, choutpergroup) -> dO(batch, group, choutpergroup, outh, outw)\n        let idx = 0;\n        for (let b = 0; b < batch; b++) {\n            for (let g = 0; g < group; g++) {\n                for (let c = 0; c < chOutPerGroup; c++) {\n                    for (let x = 0; x < outarea; x++) {\n                        dO[idx++] = dT[((g * batch + b) * outarea + x) * chOutPerGroup + c];\n                    }\n                }\n            }\n        }\n    }\n    bias(dB, dO, batch, chOut, outarea) {\n        let idx = 0;\n        for (let b = 0; b < batch; b++) {\n            for (let c = 0; c < chOut; c++) {\n                for (let x = 0; x < outarea; x++) {\n                    dO[idx++] += dB[c];\n                }\n            }\n        }\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Conv\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CpuConv(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/conv.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/convtranspose.ts":
/*!*********************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/convtranspose.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst convtranspose_1 = __webpack_require__(/*! ../../../base/convtranspose */ \"./src/descriptor_runner/operators/base/convtranspose.ts\");\nclass CpuConvTranspose extends convtranspose_1.ConvTranspose {\n    constructor() {\n        super(\"cpu\");\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const inputX = inputs[0], inputW = inputs[1], inputB = inputs[2];\n        // TODO: 2D以外対応\n        if (inputX.ndim !== 4) {\n            throw new Error(\"ConvTranspose other than 2D is not yet supported\");\n        }\n        const { batch, dilations, group, kernelShape, pads, strides, inShape, outShape, chIn, chInPerGroup, chOut, chOutPerGroup, } = this.calcShape(inputX.dims, inputW.dims), \n        // group, batch, inShape[0], inShape[1], chInPerGroup\n        inputTransposeData = new Float32Array(chIn * batch * inShape[0] * inShape[1]), \n        // group, chOutPerGroup, kernelShape[0], kernelShape[1], chInPerGroup\n        weightTransposeData = new Float32Array(chOut * kernelShape[0] * kernelShape[1] * chInPerGroup), \n        // group, batch, inShape[0], inShape[1], chOutPerGroup, kernelShape[0], kernelShape[1]\n        matmulData = new Float32Array(chOut *\n            batch *\n            inShape[0] *\n            inShape[1] *\n            kernelShape[0] *\n            kernelShape[1]), col2ImData = new Float32Array(batch * chOut * outShape[0] * outShape[1]);\n        this.transposeInput(inputX.data, inputTransposeData, group, batch, inShape[0] * inShape[1], chInPerGroup);\n        this.transposeWeight(inputW.data, weightTransposeData, group, chInPerGroup, chOutPerGroup, kernelShape[0] * kernelShape[1]);\n        this.matmul(inputTransposeData, weightTransposeData, matmulData, group, batch * inShape[0] * inShape[1], chOutPerGroup * kernelShape[0] * kernelShape[1], chInPerGroup);\n        this.col2im(matmulData, col2ImData, batch, dilations, group, kernelShape, pads, strides, inShape, outShape, chOutPerGroup);\n        if (inputB) {\n            this.bias(inputB.data, col2ImData, batch, chOut, outShape[0] * outShape[1]);\n        }\n        const output = context.emptyTensor([batch, chOut, outShape[0], outShape[1]], \"float32\", col2ImData);\n        return [output];\n    }\n    col2im(dI, dY, batch, dilations, group, kernelShape, pads, strides, inShape, outShape, chOutPerGroup) {\n        let idx = 0;\n        // dI: group, batch, inShape[0], inShape[1], chOutPerGroup, kernelShape[0], kernelShape[1]\n        // dY: batch, group, chOutPerGroup, outShape[0], outShape[1]\n        for (let b = 0; b < batch; b++) {\n            for (let g = 0; g < group; g++) {\n                for (let co = 0; co < chOutPerGroup; co++) {\n                    for (let o0 = 0; o0 < outShape[0]; o0++) {\n                        for (let o1 = 0; o1 < outShape[1]; o1++) {\n                            let v = 0;\n                            for (let k0 = 0; k0 < kernelShape[0]; k0++) {\n                                for (let k1 = 0; k1 < kernelShape[1]; k1++) {\n                                    const i0s = o0 + pads[0] - k0 * dilations[0];\n                                    const i1s = o1 + pads[1] - k1 * dilations[1];\n                                    if (i0s % strides[0] !== 0 || i1s % strides[1] !== 0) {\n                                        continue;\n                                    }\n                                    const i0 = i0s / strides[0];\n                                    const i1 = i1s / strides[1];\n                                    if (i0 < 0 ||\n                                        i0 >= inShape[0] ||\n                                        i1 < 0 ||\n                                        i1 >= inShape[1]) {\n                                        continue;\n                                    }\n                                    v +=\n                                        dI[(((((g * batch + b) * inShape[0] + i0) * inShape[1] +\n                                            i1) *\n                                            chOutPerGroup +\n                                            co) *\n                                            kernelShape[0] +\n                                            k0) *\n                                            kernelShape[1] +\n                                            k1];\n                                }\n                            }\n                            dY[idx++] = v;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    matmul(dTX, dTW, dI, group, bin, cks, chInPerGroup) {\n        // dTX(group, batch*inShape[0]*inShape[1]=bin, chInPerGroup) * dTW(group, chOutPerGroup*kernelShape[0]*kernelShape[1]=cks, chInPerGroup) -> dI(group, bin, cks)\n        for (let g = 0; g < group; g++) {\n            for (let y = 0; y < bin; y++) {\n                for (let x = 0; x < cks; x++) {\n                    let s = 0;\n                    const dtxofs = (g * bin + y) * chInPerGroup;\n                    const dtwofs = (g * cks + x) * chInPerGroup;\n                    for (let ip = 0; ip < chInPerGroup; ip++) {\n                        s += dTX[dtxofs + ip] * dTW[dtwofs + ip];\n                    }\n                    dI[(g * bin + y) * cks + x] = s;\n                }\n            }\n        }\n    }\n    transposeInput(dX, dTX, group, batch, inarea, chInPerGroup) {\n        // dX(batch, group, chInPerGroup, inShape[0], inShape[1]) -> dTX(group, batch, inShape[0], inShape[1], chInPerGroup)\n        let idx = 0;\n        for (let g = 0; g < group; g++) {\n            for (let b = 0; b < batch; b++) {\n                for (let x = 0; x < inarea; x++) {\n                    for (let c = 0; c < chInPerGroup; c++) {\n                        dTX[idx++] = dX[((b * group + g) * chInPerGroup + c) * inarea + x];\n                    }\n                }\n            }\n        }\n    }\n    transposeWeight(dW, dTW, group, chInPerGroup, chOutPerGroup, karea) {\n        // dW(group, chInPerGroup, chOutPerGroup, kernelShape[0], kernelShape[1]) -> dTW(group, chOutPerGroup, kernelShape[0], kernelShape[1], cInPerGroup)\n        let idx = 0;\n        for (let g = 0; g < group; g++) {\n            for (let co = 0; co < chOutPerGroup; co++) {\n                for (let k = 0; k < karea; k++) {\n                    for (let ci = 0; ci < chInPerGroup; ci++) {\n                        dTW[idx++] =\n                            dW[((g * chInPerGroup + ci) * chOutPerGroup + co) * karea + k];\n                    }\n                }\n            }\n        }\n    }\n    bias(dB, dO, batch, chOut, outarea) {\n        let idx = 0;\n        for (let b = 0; b < batch; b++) {\n            for (let c = 0; c < chOut; c++) {\n                for (let x = 0; x < outarea; x++) {\n                    dO[idx++] += dB[c];\n                }\n            }\n        }\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"ConvTranspose\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CpuConvTranspose(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/convtranspose.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/dynamicunary.ts":
/*!********************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/dynamicunary.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst constants_1 = __webpack_require__(/*! ../../../../interface/core/constants */ \"./src/descriptor_runner/interface/core/constants.ts\");\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nclass DynamicUnary extends operatorImpl_1.OperatorImpl {\n    constructor(opType, allowDataTypes) {\n        super(\"cpu\");\n        this.opType = opType;\n        this.allowDataTypes = allowDataTypes;\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const input = inputs[0];\n        if (!this.allowDataTypes.includes(input.dataType)) {\n            throw new Error(`${this.opType}: DataType ${input.dataType} not supported`);\n        }\n        const newData = new constants_1.DataArrayConstructor[input.dataType](input.data.length), op = this.getUnaryOp();\n        for (let i = 0; i < newData.length; i++) {\n            newData[i] = op(input.data[i]);\n        }\n        const output = context.emptyTensor(input.dims, input.dataType, newData);\n        return [output];\n    }\n}\nclass Elu extends DynamicUnary {\n    constructor() {\n        super(\"Elu\", [\"float32\"]);\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.alpha = operatorUtil_1.getAttrFloat(attribute, \"alpha\", 1.0);\n    }\n    getUnaryOp() {\n        const alpha = this.alpha;\n        return (value) => {\n            return value >= 0 ? value : (Math.exp(value) - 1) * alpha;\n        };\n    }\n}\nclass HardSigmoid extends DynamicUnary {\n    constructor() {\n        super(\"HardSigmoid\", [\"float32\"]);\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.alpha = operatorUtil_1.getAttrFloat(attribute, \"alpha\", 0.2);\n        this.beta = operatorUtil_1.getAttrFloat(attribute, \"beta\", 0.5);\n    }\n    getUnaryOp() {\n        const alpha = this.alpha;\n        const beta = this.beta;\n        return (value) => {\n            return Math.max(0, Math.min(1, value * alpha + beta));\n        };\n    }\n}\nclass LeakyRelu extends DynamicUnary {\n    constructor() {\n        super(\"LeakyRelu\", [\"float32\"]);\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.alpha = operatorUtil_1.getAttrFloat(attribute, \"alpha\", 0.01);\n    }\n    getUnaryOp() {\n        const alpha = this.alpha;\n        return (value) => {\n            return value >= 0 ? value : value * alpha;\n        };\n    }\n}\nclass Selu extends DynamicUnary {\n    constructor() {\n        super(\"Selu\", [\"float32\"]);\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.alpha = operatorUtil_1.getAttrFloat(attribute, \"alpha\", 1.6732632423543772848170429916717);\n        this.gamma = operatorUtil_1.getAttrFloat(attribute, \"gamma\", 1.0507009873554804934193349852946);\n    }\n    getUnaryOp() {\n        const alpha = this.alpha;\n        const gamma = this.gamma;\n        return (value) => {\n            return value > 0\n                ? gamma * value\n                : gamma * (alpha * Math.exp(value) - alpha);\n        };\n    }\n}\nclass ThresholdedRelu extends DynamicUnary {\n    constructor() {\n        super(\"ThresholdedRelu\", [\"float32\"]);\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.alpha = operatorUtil_1.getAttrFloat(attribute, \"alpha\", 1.0);\n    }\n    getUnaryOp() {\n        const alpha = this.alpha;\n        return (value) => {\n            return value > alpha ? value : 0;\n        };\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Elu\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new Elu(),\n        },\n        {\n            opType: \"HardSigmoid\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new HardSigmoid(),\n        },\n        {\n            opType: \"LeakyRelu\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new LeakyRelu(),\n        },\n        {\n            opType: \"Selu\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new Selu(),\n        },\n        {\n            opType: \"ThresholdedRelu\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new ThresholdedRelu(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/dynamicunary.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/eachelementwise.ts":
/*!***********************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/eachelementwise.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nclass EachElementwise extends operatorImpl_1.OperatorImpl {\n    constructor(opType, op, allowDataTypes) {\n        super(\"cpu\");\n        this.opType = opType;\n        this.op = op;\n        this.allowDataTypes = allowDataTypes;\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        for (const inputX of inputs) {\n            if (inputX.dataType !== inputs[0].dataType) {\n                throw new Error(`${this.opType}: input dataTypes mismatch: ${inputX.dataType} !== ${inputs[0].dataType}`);\n            }\n        }\n        if (!this.allowDataTypes.includes(inputs[0].dataType)) {\n            throw new Error(`${this.opType}: input dataType ${inputs[0].dataType} is not supported`);\n        }\n        // TODO: broadcast不要の場合に特化したパフォーマンス向上\n        const { dims: outShape, allStrides: inAllStrides } = operatorUtil_1.broadcastMulti(inputs.map((input) => input.dims)), output = context.emptyTensor(outShape, inputs[0].dataType), { op } = this;\n        const inputDataList = inputs.map((input) => input.data);\n        switch (outShape.length) {\n            case 0:\n                this.op0d(inputDataList, output.data, op, outShape, inAllStrides);\n                break;\n            case 1:\n                this.op1d(inputDataList, output.data, op, outShape, inAllStrides);\n                break;\n            case 2:\n                this.op2d(inputDataList, output.data, op, outShape, inAllStrides);\n                break;\n            case 3:\n                this.op3d(inputDataList, output.data, op, outShape, inAllStrides);\n                break;\n            case 4:\n                this.op4d(inputDataList, output.data, op, outShape, inAllStrides);\n                break;\n            default:\n                throw new Error(`Binary: input ndim > 4 is not yet supported`);\n        }\n        return [output];\n    }\n    op0d(dIs, dO, op, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    outShape, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    inAllStrides) {\n        dO[0] = op(dIs.map((dI) => dI[0]));\n    }\n    op1d(dIs, dO, op, outShape, inAllStrides) {\n        let idx = 0;\n        for (let a0 = 0; a0 < outShape[0]; a0++) {\n            const values = [];\n            for (let i = 0; i < dIs.length; i++) {\n                values.push(dIs[i][a0 * inAllStrides[i][0]]);\n            }\n            dO[idx++] = op(values);\n        }\n    }\n    op2d(dIs, dO, op, outShape, inAllStrides) {\n        let idx = 0;\n        for (let a0 = 0; a0 < outShape[0]; a0++) {\n            for (let a1 = 0; a1 < outShape[1]; a1++) {\n                const values = [];\n                for (let i = 0; i < dIs.length; i++) {\n                    values.push(dIs[i][a0 * inAllStrides[i][0] + a1 * inAllStrides[i][1]]);\n                }\n                dO[idx++] = op(values);\n            }\n        }\n    }\n    op3d(dIs, dO, op, outShape, inAllStrides) {\n        let idx = 0;\n        for (let a0 = 0; a0 < outShape[0]; a0++) {\n            for (let a1 = 0; a1 < outShape[1]; a1++) {\n                for (let a2 = 0; a2 < outShape[2]; a2++) {\n                    const values = [];\n                    for (let i = 0; i < dIs.length; i++) {\n                        values.push(dIs[i][a0 * inAllStrides[i][0] +\n                            a1 * inAllStrides[i][1] +\n                            a2 * inAllStrides[i][2]]);\n                    }\n                    dO[idx++] = op(values);\n                }\n            }\n        }\n    }\n    op4d(dIs, dO, op, outShape, inAllStrides) {\n        let idx = 0;\n        for (let a0 = 0; a0 < outShape[0]; a0++) {\n            for (let a1 = 0; a1 < outShape[1]; a1++) {\n                for (let a2 = 0; a2 < outShape[2]; a2++) {\n                    for (let a3 = 0; a3 < outShape[3]; a3++) {\n                        const values = [];\n                        for (let i = 0; i < dIs.length; i++) {\n                            values.push(dIs[i][a0 * inAllStrides[i][0] +\n                                a1 * inAllStrides[i][1] +\n                                a2 * inAllStrides[i][2] +\n                                a3 * inAllStrides[i][3]]);\n                        }\n                        dO[idx++] = op(values);\n                    }\n                }\n            }\n        }\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Max\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new EachElementwise(\"Max\", (values) => Math.max(...values), [\n                \"float32\",\n                \"int32\",\n            ]),\n        },\n        {\n            opType: \"Mean\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new EachElementwise(\"Mean\", (values) => values.reduce((s, v) => s + v, 0) / values.length, [\"float32\"]),\n        },\n        {\n            opType: \"Min\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new EachElementwise(\"Min\", (values) => Math.min(...values), [\n                \"float32\",\n                \"int32\",\n            ]),\n        },\n        {\n            opType: \"Sum\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new EachElementwise(\"Sum\", (values) => values.reduce((s, v) => s + v, 0), [\"float32\", \"int32\"]),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/eachelementwise.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/flatten.ts":
/*!***************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/flatten.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst flatten_1 = __webpack_require__(/*! ../../../base/flatten */ \"./src/descriptor_runner/operators/base/flatten.ts\");\nclass CPUFlatten extends flatten_1.Flatten {\n    constructor() {\n        super(\"cpu\");\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const input = inputs[0], output = context.emptyTensor(this.calcShape(input), input.dataType, input.data);\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Flatten\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUFlatten(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/flatten.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/gather.ts":
/*!**************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/gather.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nclass Gather extends operatorImpl_1.OperatorImpl {\n    constructor() {\n        super(\"cpu\");\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.axis = operatorUtil_1.getAttrInt(attribute, \"axis\", 0);\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const data = inputs[0], indices = inputs[1], { axis } = this;\n        if (!(data.ndim === 1 && indices.ndim === 0 && axis === 0)) {\n            throw new Error(\"Gather: currently supports data.ndim === 1 && indices.ndim === 0 && axis === 0\");\n        }\n        const output = context.emptyTensor([], data.dataType);\n        output.data[0] = data.data[indices.data[0]];\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Gather\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new Gather(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/gather.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/gemm.ts":
/*!************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/gemm.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nconst gemm_1 = __webpack_require__(/*! ../../../base/gemm */ \"./src/descriptor_runner/operators/base/gemm.ts\");\n// Version 13\nclass CpuGemm extends gemm_1.Gemm {\n    constructor() {\n        super(\"cpu\");\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const inputA = inputs[0], inputB = inputs[1], inputC = inputs[2], { m, n, k, strideA: [strideA0, strideA1], strideB: [strideB0, strideB1], } = this.calcShape(inputA.dims, inputB.dims), newData = new Float32Array(m * n), dA = inputA.data, dB = inputB.data, { alpha } = this;\n        for (let i = 0; i < m; i++) {\n            for (let j = 0; j < n; j++) {\n                let sum = 0;\n                for (let x = 0; x < k; x++) {\n                    sum +=\n                        dA[i * strideA0 + x * strideA1] * dB[x * strideB0 + j * strideB1];\n                }\n                sum *= alpha;\n                newData[i * n + j] = sum;\n            }\n        }\n        if (inputC) {\n            const [strideC0, strideC1] = operatorUtil_1.broadcastUni([m, n], inputC.dims), dC = inputC.data, { beta } = this;\n            for (let i = 0; i < m; i++) {\n                for (let j = 0; j < n; j++) {\n                    newData[i * n + j] += dC[i * strideC0 + j * strideC1] * beta;\n                }\n            }\n        }\n        const output = context.emptyTensor([m, n], \"float32\", newData);\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Gemm\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CpuGemm(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/gemm.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/globalaveragepool.ts":
/*!*************************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/globalaveragepool.ts ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.CpuGlobalAveragePool = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst averagepool_1 = __webpack_require__(/*! ../../rawcomputation/averagepool */ \"./src/descriptor_runner/operators/cpu/rawcomputation/averagepool.ts\");\nclass CpuGlobalAveragePool extends operatorImpl_1.OperatorImpl {\n    constructor() {\n        super(\"cpu\");\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const inputX = inputs[0];\n        // TODO: 2D以外対応\n        if (inputX.ndim !== 4) {\n            throw new Error(\"MaxPool other than 2D is not yet supported\");\n        }\n        const batch = inputX.dims[0], ch = inputX.dims[1], inShape = [inputX.dims[2], inputX.dims[3]], outputData = new Float32Array(batch * ch);\n        averagepool_1.averagepool(inputX.data, outputData, true, // わずかに計算量が減る\n        batch, inShape, [0, 0, 0, 0], [1, 1], inShape, [1, 1], ch);\n        const output = context.emptyTensor([batch, ch, 1, 1], \"float32\", outputData);\n        return [output];\n    }\n}\nexports.CpuGlobalAveragePool = CpuGlobalAveragePool;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"GlobalAveragePool\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CpuGlobalAveragePool(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/globalaveragepool.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/instancenormalization.ts":
/*!*****************************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/instancenormalization.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nconst util_1 = __webpack_require__(/*! ../../../../util */ \"./src/descriptor_runner/util.ts\");\nclass InstanceNormalization extends operatorImpl_1.OperatorImpl {\n    constructor() {\n        super(\"cpu\");\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.epsilon = operatorUtil_1.getAttrInt(attribute, \"epsilon\", 1e-5);\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const [input, scale, bias] = inputs;\n        const reductionLength = util_1.arrayProd(input.dims.slice(2)), output = context.emptyTensor(input.dims, input.dataType), dI = input.data, dO = output.data, dS = scale.data, dB = bias.data;\n        const [dimBatch, dimCh] = input.dims;\n        const [strideBatch, strideCh] = input.strides;\n        for (let batch = 0; batch < dimBatch; batch++) {\n            for (let ch = 0; ch < dimCh; ch++) {\n                const ofs = batch * strideBatch + ch * strideCh;\n                let sum = 0.0;\n                let sqsum = 0.0;\n                for (let r = 0; r < reductionLength; r++) {\n                    const v = dI[ofs + r];\n                    sum += v;\n                    sqsum += v * v;\n                }\n                const mean = sum / reductionLength;\n                const variance = sqsum / reductionLength - mean * mean;\n                const invstd = 1 / Math.sqrt(variance + this.epsilon);\n                const chscale = dS[ch] * invstd;\n                const chbias = -mean * chscale + dB[ch];\n                for (let r = 0; r < reductionLength; r++) {\n                    dO[ofs + r] = dI[ofs + r] * chscale + chbias;\n                }\n            }\n        }\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"InstanceNormalization\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new InstanceNormalization(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/instancenormalization.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/matmul.ts":
/*!**************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/matmul.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst matmul_1 = __webpack_require__(/*! ../../../base/matmul */ \"./src/descriptor_runner/operators/base/matmul.ts\");\nclass CpuMatMul extends matmul_1.MatMul {\n    constructor() {\n        super(\"cpu\");\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const inputA = inputs[0], inputB = inputs[1];\n        if (inputA.dataType !== \"float32\" || inputB.dataType !== \"float32\") {\n            throw new Error(\"only float32 is supported\");\n        }\n        const { resultLength, resultDims, resultStrides, resultDimsAfterSqueeze, stridesA, stridesB, innerProductLength, } = this.calcShape(inputA.dims, inputB.dims), newData = new Float32Array(resultLength);\n        if (resultDims.length === 2) {\n            this.calcDim2(inputA.data, inputB.data, newData, resultDims, resultStrides, stridesA, stridesB, innerProductLength);\n        }\n        else if (resultDims.length === 3) {\n            this.calcDim3(inputA.data, inputB.data, newData, resultDims, resultStrides, stridesA, stridesB, innerProductLength);\n        }\n        else {\n            // TODO: 4次元以上のサポート\n            throw new Error();\n        }\n        const output = context.emptyTensor(resultDimsAfterSqueeze, \"float32\", newData);\n        return [output];\n    }\n    calcDim2(dA, dB, dC, resultDims, resultStrides, stridesA, stridesB, innerProductLength) {\n        for (let m = 0; m < resultDims[0]; m++) {\n            for (let n = 0; n < resultDims[1]; n++) {\n                let sum = 0;\n                for (let k = 0; k < innerProductLength; k++) {\n                    sum +=\n                        dA[m * stridesA[0] + k * stridesA[1]] *\n                            dB[k * stridesB[0] + n * stridesB[1]];\n                }\n                dC[m * resultStrides[0] + n * resultStrides[1]] = sum;\n            }\n        }\n    }\n    calcDim3(dA, dB, dC, resultDims, resultStrides, stridesA, stridesB, innerProductLength) {\n        for (let o0 = 0; o0 < resultDims[0]; o0++) {\n            for (let m = 0; m < resultDims[1]; m++) {\n                for (let n = 0; n < resultDims[2]; n++) {\n                    let sum = 0;\n                    for (let k = 0; k < innerProductLength; k++) {\n                        sum +=\n                            dA[o0 * stridesA[0] + m * stridesA[1] + k * stridesA[2]] *\n                                dB[o0 * stridesB[0] + k * stridesB[1] + n * stridesB[2]];\n                    }\n                    dC[o0 * resultStrides[0] + m * resultStrides[1] + n * resultStrides[2]] = sum;\n                }\n            }\n        }\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"MatMul\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CpuMatMul(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/matmul.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/maxpool.ts":
/*!***************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/maxpool.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst maxpool_1 = __webpack_require__(/*! ../../../base/maxpool */ \"./src/descriptor_runner/operators/base/maxpool.ts\");\n// Version 11\nclass CpuMaxPool extends maxpool_1.MaxPool {\n    constructor() {\n        super(\"cpu\");\n    }\n    async run(context, inputs, nOutputs) {\n        context.assertsCPUTensorArray(inputs);\n        const inputX = inputs[0];\n        if (nOutputs !== 1) {\n            // TODO: Indicesの出力対応\n            throw new Error(\"MaxPool: output indices is not yet supported\");\n        }\n        // TODO: 2D以外対応\n        if (inputX.ndim !== 4) {\n            throw new Error(\"MaxPool other than 2D is not yet supported\");\n        }\n        const { batch, dilations, kernelShape, pads, strides, inShape, outShape, ch, } = this.calcShape(inputX.dims), outputData = new Float32Array(batch * outShape[0] * outShape[1] * ch);\n        this.maxpool(inputX.data, outputData, batch, dilations, kernelShape, pads, strides, inShape, outShape, ch);\n        const output = context.emptyTensor([batch, ch, outShape[0], outShape[1]], \"float32\", outputData);\n        return [output];\n    }\n    maxpool(dX, dI, batch, dilations, kernelShape, pads, strides, inShape, outShape, ch) {\n        /*\n         *Batch,\n         *dilations,\n         *kernelShape,\n         *pads,\n         *strides,\n         *inShape,\n         *outShape,\n         *ch,\n         */\n        let idx = 0;\n        for (let b = 0; b < batch; b++) {\n            for (let c = 0; c < ch; c++) {\n                for (let oy = 0; oy < outShape[0]; oy++) {\n                    for (let ox = 0; ox < outShape[1]; ox++) {\n                        let mv = -Infinity;\n                        for (let ky = 0; ky < kernelShape[0]; ky++) {\n                            for (let kx = 0; kx < kernelShape[1]; kx++) {\n                                const iny = oy * strides[0] - pads[0] + ky * dilations[0], inx = ox * strides[1] - pads[1] + kx * dilations[1];\n                                if (iny >= 0 &&\n                                    iny < inShape[0] &&\n                                    inx >= 0 &&\n                                    inx < inShape[1]) {\n                                    const xidx = ((b * ch + c) * inShape[0] + iny) * inShape[1] + inx, v = dX[xidx];\n                                    if (v > mv) {\n                                        mv = v;\n                                        // Max position: xidxを出力\n                                    }\n                                }\n                            }\n                        }\n                        dI[idx++] = mv;\n                    }\n                }\n            }\n        }\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"MaxPool\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CpuMaxPool(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/maxpool.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/pad11.ts":
/*!*************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/pad11.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst pad11_1 = __webpack_require__(/*! ../../../base/pad11 */ \"./src/descriptor_runner/operators/base/pad11.ts\");\n/*\n * Opset 11\n * opset 2は互換性なし\n */\nclass CPUPad11 extends pad11_1.Pad11 {\n    constructor() {\n        super(\"cpu\");\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const [input, shapeTensor, constantValueTensor] = inputs;\n        const { outputShape, pads } = this.calcShape(input, shapeTensor);\n        let constantValue = 0;\n        if (constantValueTensor) {\n            constantValue = constantValueTensor.data[0];\n        }\n        // edge:\n        // [0,1,2,3] -> pad (3,3) -> [0,0,0,*0,1,2,3*,3,3,3]\n        // [0,1,2,3] -> pad (6,6) -> [0,0,0,0,0,0,*0,1,2,3*,3,3,3,3,3,3]\n        // reflect:\n        // [0,1,2,3] -> pad (3,3) -> [3,2,1,*0,1,2,3*,2,1,0]\n        // [0,1,2,3] -> pad (6,6) -> [0,1,2,3,2,1,*0,1,2,3*,2,1,0,1,2,3]\n        // [0,1,2,3] -> pad (8,8) -> [2,1,0,1,2,3,2,1,*0,1,2,3*,2,1,0,1,2,3,2,1]\n        const output = context.emptyTensor(outputShape, input.dataType);\n        let func;\n        switch (this.mode) {\n            case \"constant\":\n                switch (input.ndim) {\n                    case 1:\n                        func = this.constCopy1d;\n                        break;\n                    case 2:\n                        func = this.constCopy2d;\n                        break;\n                    case 3:\n                        func = this.constCopy3d;\n                        break;\n                    case 4:\n                        func = this.constCopy4d;\n                        break;\n                    case 5:\n                        func = this.constCopy5d;\n                        break;\n                    case 6:\n                        func = this.constCopy6d;\n                        break;\n                    default:\n                        throw new Error(`Pad: input.ndim = ${input.ndim} > 6 is not yet supported`);\n                }\n                break;\n            case \"reflect\":\n                switch (input.ndim) {\n                    case 1:\n                        func = this.reflectCopy1d;\n                        break;\n                    case 2:\n                        func = this.reflectCopy2d;\n                        break;\n                    case 3:\n                        func = this.reflectCopy3d;\n                        break;\n                    case 4:\n                        func = this.reflectCopy4d;\n                        break;\n                    case 5:\n                        func = this.reflectCopy5d;\n                        break;\n                    case 6:\n                        func = this.reflectCopy6d;\n                        break;\n                    default:\n                        throw new Error(`Pad: input.ndim = ${input.ndim} > 6 is not yet supported`);\n                }\n                break;\n            case \"edge\":\n                switch (input.ndim) {\n                    case 1:\n                        func = this.edgeCopy1d;\n                        break;\n                    case 2:\n                        func = this.edgeCopy2d;\n                        break;\n                    case 3:\n                        func = this.edgeCopy3d;\n                        break;\n                    case 4:\n                        func = this.edgeCopy4d;\n                        break;\n                    case 5:\n                        func = this.edgeCopy5d;\n                        break;\n                    case 6:\n                        func = this.edgeCopy6d;\n                        break;\n                    default:\n                        throw new Error(`Pad: input.ndim = ${input.ndim} > 6 is not yet supported`);\n                }\n                break;\n        }\n        func(input.data, output.data, input.dims, outputShape, input.strides, output.strides, pads, constantValue);\n        return [output];\n    }\n    constCopy1d(dI, dO, inputShape, outputShape, inputStrides, outputStrides, pads, constantValue) {\n        for (let d0 = 0; d0 < outputShape[0]; d0++) {\n            const i0 = d0 - pads[0];\n            let v;\n            if (i0 < 0 || i0 >= inputShape[0]) {\n                v = constantValue;\n            }\n            else {\n                v = dI[i0 * inputStrides[0]];\n            }\n            dO[d0 * outputStrides[0]] = v;\n        }\n    }\n    constCopy2d(dI, dO, inputShape, outputShape, inputStrides, outputStrides, pads, constantValue) {\n        for (let d0 = 0; d0 < outputShape[0]; d0++) {\n            for (let d1 = 0; d1 < outputShape[1]; d1++) {\n                const i0 = d0 - pads[0], i1 = d1 - pads[1];\n                let v;\n                if (i0 < 0 || i0 >= inputShape[0] || i1 < 0 || i1 >= inputShape[1]) {\n                    v = constantValue;\n                }\n                else {\n                    v = dI[i0 * inputStrides[0] + i1 * inputStrides[1]];\n                }\n                dO[d0 * outputStrides[0] + d1 * outputStrides[1]] = v;\n            }\n        }\n    }\n    constCopy3d(dI, dO, inputShape, outputShape, inputStrides, outputStrides, pads, constantValue) {\n        for (let d0 = 0; d0 < outputShape[0]; d0++) {\n            for (let d1 = 0; d1 < outputShape[1]; d1++) {\n                for (let d2 = 0; d2 < outputShape[2]; d2++) {\n                    const i0 = d0 - pads[0], i1 = d1 - pads[1], i2 = d2 - pads[2];\n                    let v;\n                    if (i0 < 0 ||\n                        i0 >= inputShape[0] ||\n                        i1 < 0 ||\n                        i1 >= inputShape[1] ||\n                        i2 < 0 ||\n                        i2 >= inputShape[2]) {\n                        v = constantValue;\n                    }\n                    else {\n                        v =\n                            dI[i0 * inputStrides[0] +\n                                i1 * inputStrides[1] +\n                                i2 * inputStrides[2]];\n                    }\n                    dO[d0 * outputStrides[0] +\n                        d1 * outputStrides[1] +\n                        d2 * outputStrides[2]] = v;\n                }\n            }\n        }\n    }\n    constCopy4d(dI, dO, inputShape, outputShape, inputStrides, outputStrides, pads, constantValue) {\n        for (let d0 = 0; d0 < outputShape[0]; d0++) {\n            for (let d1 = 0; d1 < outputShape[1]; d1++) {\n                for (let d2 = 0; d2 < outputShape[2]; d2++) {\n                    for (let d3 = 0; d3 < outputShape[3]; d3++) {\n                        const i0 = d0 - pads[0], i1 = d1 - pads[1], i2 = d2 - pads[2], i3 = d3 - pads[3];\n                        let v;\n                        if (i0 < 0 ||\n                            i0 >= inputShape[0] ||\n                            i1 < 0 ||\n                            i1 >= inputShape[1] ||\n                            i2 < 0 ||\n                            i2 >= inputShape[2] ||\n                            i3 < 0 ||\n                            i3 >= inputShape[3]) {\n                            v = constantValue;\n                        }\n                        else {\n                            v =\n                                dI[i0 * inputStrides[0] +\n                                    i1 * inputStrides[1] +\n                                    i2 * inputStrides[2] +\n                                    i3 * inputStrides[3]];\n                        }\n                        dO[d0 * outputStrides[0] +\n                            d1 * outputStrides[1] +\n                            d2 * outputStrides[2] +\n                            d3 * outputStrides[3]] = v;\n                    }\n                }\n            }\n        }\n    }\n    constCopy5d(dI, dO, inputShape, outputShape, inputStrides, outputStrides, pads, constantValue) {\n        for (let d0 = 0; d0 < outputShape[0]; d0++) {\n            for (let d1 = 0; d1 < outputShape[1]; d1++) {\n                for (let d2 = 0; d2 < outputShape[2]; d2++) {\n                    for (let d3 = 0; d3 < outputShape[3]; d3++) {\n                        for (let d4 = 0; d4 < outputShape[4]; d4++) {\n                            const i0 = d0 - pads[0], i1 = d1 - pads[1], i2 = d2 - pads[2], i3 = d3 - pads[3], i4 = d4 - pads[4];\n                            let v;\n                            if (i0 < 0 ||\n                                i0 >= inputShape[0] ||\n                                i1 < 0 ||\n                                i1 >= inputShape[1] ||\n                                i2 < 0 ||\n                                i2 >= inputShape[2] ||\n                                i3 < 0 ||\n                                i3 >= inputShape[3] ||\n                                i4 < 0 ||\n                                i4 >= inputShape[4]) {\n                                v = constantValue;\n                            }\n                            else {\n                                v =\n                                    dI[i0 * inputStrides[0] +\n                                        i1 * inputStrides[1] +\n                                        i2 * inputStrides[2] +\n                                        i3 * inputStrides[3] +\n                                        i4 * inputStrides[4]];\n                            }\n                            dO[d0 * outputStrides[0] +\n                                d1 * outputStrides[1] +\n                                d2 * outputStrides[2] +\n                                d3 * outputStrides[3] +\n                                d4 * outputStrides[4]] = v;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    constCopy6d(dI, dO, inputShape, outputShape, inputStrides, outputStrides, pads, constantValue) {\n        for (let d0 = 0; d0 < outputShape[0]; d0++) {\n            for (let d1 = 0; d1 < outputShape[1]; d1++) {\n                for (let d2 = 0; d2 < outputShape[2]; d2++) {\n                    for (let d3 = 0; d3 < outputShape[3]; d3++) {\n                        for (let d4 = 0; d4 < outputShape[4]; d4++) {\n                            for (let d5 = 0; d5 < outputShape[5]; d5++) {\n                                const i0 = d0 - pads[0], i1 = d1 - pads[1], i2 = d2 - pads[2], i3 = d3 - pads[3], i4 = d4 - pads[4], i5 = d5 - pads[5];\n                                let v;\n                                if (i0 < 0 ||\n                                    i0 >= inputShape[0] ||\n                                    i1 < 0 ||\n                                    i1 >= inputShape[1] ||\n                                    i2 < 0 ||\n                                    i2 >= inputShape[2] ||\n                                    i3 < 0 ||\n                                    i3 >= inputShape[3] ||\n                                    i4 < 0 ||\n                                    i4 >= inputShape[4] ||\n                                    i5 < 0 ||\n                                    i5 >= inputShape[5]) {\n                                    v = constantValue;\n                                }\n                                else {\n                                    v =\n                                        dI[i0 * inputStrides[0] +\n                                            i1 * inputStrides[1] +\n                                            i2 * inputStrides[2] +\n                                            i3 * inputStrides[3] +\n                                            i4 * inputStrides[4] +\n                                            i5 * inputStrides[5]];\n                                }\n                                dO[d0 * outputStrides[0] +\n                                    d1 * outputStrides[1] +\n                                    d2 * outputStrides[2] +\n                                    d3 * outputStrides[3] +\n                                    d4 * outputStrides[4] +\n                                    d5 * outputStrides[5]] = v;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    reflectCopy1d(dI, dO, inputShape, outputShape, inputStrides, outputStrides, pads) {\n        const [inputShape0] = inputShape;\n        const [outputShape0] = outputShape;\n        const [inputStrides0] = inputStrides;\n        const [outputStrides0] = outputStrides;\n        const [pads0] = pads;\n        for (let d0 = 0; d0 < outputShape0; d0++) {\n            let i0 = d0 - pads0;\n            if (i0 < 0) {\n                i0 = -i0 % (inputShape0 * 2 - 2);\n                if (i0 >= inputShape0) {\n                    i0 = inputShape0 * 2 - i0 - 2;\n                }\n            }\n            else if (i0 >= inputShape0) {\n                i0 = i0 % (inputShape0 * 2 - 2);\n                if (i0 >= inputShape0) {\n                    i0 = inputShape0 * 2 - i0 - 2;\n                }\n            }\n            const v = dI[i0 * inputStrides0];\n            dO[d0 * outputStrides0] = v;\n        }\n    }\n    reflectCopy2d(dI, dO, inputShape, outputShape, inputStrides, outputStrides, pads) {\n        const [inputShape0, inputShape1] = inputShape;\n        const [outputShape0, outputShape1] = outputShape;\n        const [inputStrides0, inputStrides1] = inputStrides;\n        const [outputStrides0, outputStrides1] = outputStrides;\n        const [pads0, pads1] = pads;\n        for (let d0 = 0; d0 < outputShape0; d0++) {\n            for (let d1 = 0; d1 < outputShape1; d1++) {\n                let i0 = d0 - pads0, i1 = d1 - pads1;\n                if (i0 < 0) {\n                    i0 = -i0 % (inputShape0 * 2 - 2);\n                    if (i0 >= inputShape0) {\n                        i0 = inputShape0 * 2 - i0 - 2;\n                    }\n                }\n                else if (i0 >= inputShape0) {\n                    i0 = i0 % (inputShape0 * 2 - 2);\n                    if (i0 >= inputShape0) {\n                        i0 = inputShape0 * 2 - i0 - 2;\n                    }\n                }\n                if (i1 < 0) {\n                    i1 = -i1 % (inputShape1 * 2 - 2);\n                    if (i1 >= inputShape1) {\n                        i1 = inputShape1 * 2 - i1 - 2;\n                    }\n                }\n                else if (i1 >= inputShape1) {\n                    i1 = i1 % (inputShape1 * 2 - 2);\n                    if (i1 >= inputShape1) {\n                        i1 = inputShape1 * 2 - i1 - 2;\n                    }\n                }\n                const v = dI[i0 * inputStrides0 + i1 * inputStrides1];\n                dO[d0 * outputStrides0 + d1 * outputStrides1] = v;\n            }\n        }\n    }\n    reflectCopy3d(dI, dO, inputShape, outputShape, inputStrides, outputStrides, pads) {\n        const [inputShape0, inputShape1, inputShape2] = inputShape;\n        const [outputShape0, outputShape1, outputShape2] = outputShape;\n        const [inputStrides0, inputStrides1, inputStrides2] = inputStrides;\n        const [outputStrides0, outputStrides1, outputStrides2] = outputStrides;\n        const [pads0, pads1, pads2] = pads;\n        for (let d0 = 0; d0 < outputShape0; d0++) {\n            for (let d1 = 0; d1 < outputShape1; d1++) {\n                for (let d2 = 0; d2 < outputShape2; d2++) {\n                    let i0 = d0 - pads0, i1 = d1 - pads1, i2 = d2 - pads2;\n                    if (i0 < 0) {\n                        i0 = -i0 % (inputShape0 * 2 - 2);\n                        if (i0 >= inputShape0) {\n                            i0 = inputShape0 * 2 - i0 - 2;\n                        }\n                    }\n                    else if (i0 >= inputShape0) {\n                        i0 = i0 % (inputShape0 * 2 - 2);\n                        if (i0 >= inputShape0) {\n                            i0 = inputShape0 * 2 - i0 - 2;\n                        }\n                    }\n                    if (i1 < 0) {\n                        i1 = -i1 % (inputShape1 * 2 - 2);\n                        if (i1 >= inputShape1) {\n                            i1 = inputShape1 * 2 - i1 - 2;\n                        }\n                    }\n                    else if (i1 >= inputShape1) {\n                        i1 = i1 % (inputShape1 * 2 - 2);\n                        if (i1 >= inputShape1) {\n                            i1 = inputShape1 * 2 - i1 - 2;\n                        }\n                    }\n                    if (i2 < 0) {\n                        i2 = -i2 % (inputShape2 * 2 - 2);\n                        if (i2 >= inputShape2) {\n                            i2 = inputShape2 * 2 - i2 - 2;\n                        }\n                    }\n                    else if (i2 >= inputShape2) {\n                        i2 = i2 % (inputShape2 * 2 - 2);\n                        if (i2 >= inputShape2) {\n                            i2 = inputShape2 * 2 - i2 - 2;\n                        }\n                    }\n                    const v = dI[i0 * inputStrides0 + i1 * inputStrides1 + i2 * inputStrides2];\n                    dO[d0 * outputStrides0 + d1 * outputStrides1 + d2 * outputStrides2] =\n                        v;\n                }\n            }\n        }\n    }\n    reflectCopy4d(dI, dO, inputShape, outputShape, inputStrides, outputStrides, pads) {\n        const [inputShape0, inputShape1, inputShape2, inputShape3] = inputShape;\n        const [outputShape0, outputShape1, outputShape2, outputShape3] = outputShape;\n        const [inputStrides0, inputStrides1, inputStrides2, inputStrides3] = inputStrides;\n        const [outputStrides0, outputStrides1, outputStrides2, outputStrides3] = outputStrides;\n        const [pads0, pads1, pads2, pads3] = pads;\n        for (let d0 = 0; d0 < outputShape0; d0++) {\n            for (let d1 = 0; d1 < outputShape1; d1++) {\n                for (let d2 = 0; d2 < outputShape2; d2++) {\n                    for (let d3 = 0; d3 < outputShape3; d3++) {\n                        let i0 = d0 - pads0, i1 = d1 - pads1, i2 = d2 - pads2, i3 = d3 - pads3;\n                        if (i0 < 0) {\n                            i0 = -i0 % (inputShape0 * 2 - 2);\n                            if (i0 >= inputShape0) {\n                                i0 = inputShape0 * 2 - i0 - 2;\n                            }\n                        }\n                        else if (i0 >= inputShape0) {\n                            i0 = i0 % (inputShape0 * 2 - 2);\n                            if (i0 >= inputShape0) {\n                                i0 = inputShape0 * 2 - i0 - 2;\n                            }\n                        }\n                        if (i1 < 0) {\n                            i1 = -i1 % (inputShape1 * 2 - 2);\n                            if (i1 >= inputShape1) {\n                                i1 = inputShape1 * 2 - i1 - 2;\n                            }\n                        }\n                        else if (i1 >= inputShape1) {\n                            i1 = i1 % (inputShape1 * 2 - 2);\n                            if (i1 >= inputShape1) {\n                                i1 = inputShape1 * 2 - i1 - 2;\n                            }\n                        }\n                        if (i2 < 0) {\n                            i2 = -i2 % (inputShape2 * 2 - 2);\n                            if (i2 >= inputShape2) {\n                                i2 = inputShape2 * 2 - i2 - 2;\n                            }\n                        }\n                        else if (i2 >= inputShape2) {\n                            i2 = i2 % (inputShape2 * 2 - 2);\n                            if (i2 >= inputShape2) {\n                                i2 = inputShape2 * 2 - i2 - 2;\n                            }\n                        }\n                        if (i3 < 0) {\n                            i3 = -i3 % (inputShape3 * 2 - 2);\n                            if (i3 >= inputShape3) {\n                                i3 = inputShape3 * 2 - i3 - 2;\n                            }\n                        }\n                        else if (i3 >= inputShape3) {\n                            i3 = i3 % (inputShape3 * 2 - 2);\n                            if (i3 >= inputShape3) {\n                                i3 = inputShape3 * 2 - i3 - 2;\n                            }\n                        }\n                        const v = dI[i0 * inputStrides0 +\n                            i1 * inputStrides1 +\n                            i2 * inputStrides2 +\n                            i3 * inputStrides3];\n                        dO[d0 * outputStrides0 +\n                            d1 * outputStrides1 +\n                            d2 * outputStrides2 +\n                            d3 * outputStrides3] = v;\n                    }\n                }\n            }\n        }\n    }\n    reflectCopy5d(dI, dO, inputShape, outputShape, inputStrides, outputStrides, pads) {\n        const [inputShape0, inputShape1, inputShape2, inputShape3, inputShape4] = inputShape;\n        const [outputShape0, outputShape1, outputShape2, outputShape3, outputShape4,] = outputShape;\n        const [inputStrides0, inputStrides1, inputStrides2, inputStrides3, inputStrides4,] = inputStrides;\n        const [outputStrides0, outputStrides1, outputStrides2, outputStrides3, outputStrides4,] = outputStrides;\n        const [pads0, pads1, pads2, pads3, pads4] = pads;\n        for (let d0 = 0; d0 < outputShape0; d0++) {\n            for (let d1 = 0; d1 < outputShape1; d1++) {\n                for (let d2 = 0; d2 < outputShape2; d2++) {\n                    for (let d3 = 0; d3 < outputShape3; d3++) {\n                        for (let d4 = 0; d4 < outputShape4; d4++) {\n                            let i0 = d0 - pads0, i1 = d1 - pads1, i2 = d2 - pads2, i3 = d3 - pads3, i4 = d4 - pads4;\n                            if (i0 < 0) {\n                                i0 = -i0 % (inputShape0 * 2 - 2);\n                                if (i0 >= inputShape0) {\n                                    i0 = inputShape0 * 2 - i0 - 2;\n                                }\n                            }\n                            else if (i0 >= inputShape0) {\n                                i0 = i0 % (inputShape0 * 2 - 2);\n                                if (i0 >= inputShape0) {\n                                    i0 = inputShape0 * 2 - i0 - 2;\n                                }\n                            }\n                            if (i1 < 0) {\n                                i1 = -i1 % (inputShape1 * 2 - 2);\n                                if (i1 >= inputShape1) {\n                                    i1 = inputShape1 * 2 - i1 - 2;\n                                }\n                            }\n                            else if (i1 >= inputShape1) {\n                                i1 = i1 % (inputShape1 * 2 - 2);\n                                if (i1 >= inputShape1) {\n                                    i1 = inputShape1 * 2 - i1 - 2;\n                                }\n                            }\n                            if (i2 < 0) {\n                                i2 = -i2 % (inputShape2 * 2 - 2);\n                                if (i2 >= inputShape2) {\n                                    i2 = inputShape2 * 2 - i2 - 2;\n                                }\n                            }\n                            else if (i2 >= inputShape2) {\n                                i2 = i2 % (inputShape2 * 2 - 2);\n                                if (i2 >= inputShape2) {\n                                    i2 = inputShape2 * 2 - i2 - 2;\n                                }\n                            }\n                            if (i3 < 0) {\n                                i3 = -i3 % (inputShape3 * 2 - 2);\n                                if (i3 >= inputShape3) {\n                                    i3 = inputShape3 * 2 - i3 - 2;\n                                }\n                            }\n                            else if (i3 >= inputShape3) {\n                                i3 = i3 % (inputShape3 * 2 - 2);\n                                if (i3 >= inputShape3) {\n                                    i3 = inputShape3 * 2 - i3 - 2;\n                                }\n                            }\n                            if (i4 < 0) {\n                                i4 = -i4 % (inputShape4 * 2 - 2);\n                                if (i4 >= inputShape4) {\n                                    i4 = inputShape4 * 2 - i4 - 2;\n                                }\n                            }\n                            else if (i4 >= inputShape4) {\n                                i4 = i4 % (inputShape4 * 2 - 2);\n                                if (i4 >= inputShape4) {\n                                    i4 = inputShape4 * 2 - i4 - 2;\n                                }\n                            }\n                            const v = dI[i0 * inputStrides0 +\n                                i1 * inputStrides1 +\n                                i2 * inputStrides2 +\n                                i3 * inputStrides3 +\n                                i4 * inputStrides4];\n                            dO[d0 * outputStrides0 +\n                                d1 * outputStrides1 +\n                                d2 * outputStrides2 +\n                                d3 * outputStrides3 +\n                                d4 * outputStrides4] = v;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    reflectCopy6d(dI, dO, inputShape, outputShape, inputStrides, outputStrides, pads) {\n        const [inputShape0, inputShape1, inputShape2, inputShape3, inputShape4, inputShape5,] = inputShape;\n        const [outputShape0, outputShape1, outputShape2, outputShape3, outputShape4, outputShape5,] = outputShape;\n        const [inputStrides0, inputStrides1, inputStrides2, inputStrides3, inputStrides4, inputStrides5,] = inputStrides;\n        const [outputStrides0, outputStrides1, outputStrides2, outputStrides3, outputStrides4, outputStrides5,] = outputStrides;\n        const [pads0, pads1, pads2, pads3, pads4, pads5] = pads;\n        for (let d0 = 0; d0 < outputShape0; d0++) {\n            for (let d1 = 0; d1 < outputShape1; d1++) {\n                for (let d2 = 0; d2 < outputShape2; d2++) {\n                    for (let d3 = 0; d3 < outputShape3; d3++) {\n                        for (let d4 = 0; d4 < outputShape4; d4++) {\n                            for (let d5 = 0; d5 < outputShape5; d5++) {\n                                let i0 = d0 - pads0, i1 = d1 - pads1, i2 = d2 - pads2, i3 = d3 - pads3, i4 = d4 - pads4, i5 = d5 - pads5;\n                                if (i0 < 0) {\n                                    i0 = -i0 % (inputShape0 * 2 - 2);\n                                    if (i0 >= inputShape0) {\n                                        i0 = inputShape0 * 2 - i0 - 2;\n                                    }\n                                }\n                                else if (i0 >= inputShape0) {\n                                    i0 = i0 % (inputShape0 * 2 - 2);\n                                    if (i0 >= inputShape0) {\n                                        i0 = inputShape0 * 2 - i0 - 2;\n                                    }\n                                }\n                                if (i1 < 0) {\n                                    i1 = -i1 % (inputShape1 * 2 - 2);\n                                    if (i1 >= inputShape1) {\n                                        i1 = inputShape1 * 2 - i1 - 2;\n                                    }\n                                }\n                                else if (i1 >= inputShape1) {\n                                    i1 = i1 % (inputShape1 * 2 - 2);\n                                    if (i1 >= inputShape1) {\n                                        i1 = inputShape1 * 2 - i1 - 2;\n                                    }\n                                }\n                                if (i2 < 0) {\n                                    i2 = -i2 % (inputShape2 * 2 - 2);\n                                    if (i2 >= inputShape2) {\n                                        i2 = inputShape2 * 2 - i2 - 2;\n                                    }\n                                }\n                                else if (i2 >= inputShape2) {\n                                    i2 = i2 % (inputShape2 * 2 - 2);\n                                    if (i2 >= inputShape2) {\n                                        i2 = inputShape2 * 2 - i2 - 2;\n                                    }\n                                }\n                                if (i3 < 0) {\n                                    i3 = -i3 % (inputShape3 * 2 - 2);\n                                    if (i3 >= inputShape3) {\n                                        i3 = inputShape3 * 2 - i3 - 2;\n                                    }\n                                }\n                                else if (i3 >= inputShape3) {\n                                    i3 = i3 % (inputShape3 * 2 - 2);\n                                    if (i3 >= inputShape3) {\n                                        i3 = inputShape3 * 2 - i3 - 2;\n                                    }\n                                }\n                                if (i4 < 0) {\n                                    i4 = -i4 % (inputShape4 * 2 - 2);\n                                    if (i4 >= inputShape4) {\n                                        i4 = inputShape4 * 2 - i4 - 2;\n                                    }\n                                }\n                                else if (i4 >= inputShape4) {\n                                    i4 = i4 % (inputShape4 * 2 - 2);\n                                    if (i4 >= inputShape4) {\n                                        i4 = inputShape4 * 2 - i4 - 2;\n                                    }\n                                }\n                                if (i5 < 0) {\n                                    i5 = -i5 % (inputShape5 * 2 - 2);\n                                    if (i5 >= inputShape5) {\n                                        i5 = inputShape5 * 2 - i5 - 2;\n                                    }\n                                }\n                                else if (i5 >= inputShape5) {\n                                    i5 = i5 % (inputShape5 * 2 - 2);\n                                    if (i5 >= inputShape5) {\n                                        i5 = inputShape5 * 2 - i5 - 2;\n                                    }\n                                }\n                                const v = dI[i0 * inputStrides0 +\n                                    i1 * inputStrides1 +\n                                    i2 * inputStrides2 +\n                                    i3 * inputStrides3 +\n                                    i4 * inputStrides4 +\n                                    i5 * inputStrides5];\n                                dO[d0 * outputStrides0 +\n                                    d1 * outputStrides1 +\n                                    d2 * outputStrides2 +\n                                    d3 * outputStrides3 +\n                                    d4 * outputStrides4 +\n                                    d5 * outputStrides5] = v;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    edgeCopy1d(dI, dO, inputShape, outputShape, inputStrides, outputStrides, pads) {\n        const [inputShape0] = inputShape;\n        const [outputShape0] = outputShape;\n        const [inputStrides0] = inputStrides;\n        const [outputStrides0] = outputStrides;\n        const [pads0] = pads;\n        for (let d0 = 0; d0 < outputShape0; d0++) {\n            let i0 = d0 - pads0;\n            if (i0 < 0) {\n                i0 = 0;\n            }\n            else if (i0 >= inputShape0) {\n                i0 = inputShape0 - 1;\n            }\n            const v = dI[i0 * inputStrides0];\n            dO[d0 * outputStrides0] = v;\n        }\n    }\n    edgeCopy2d(dI, dO, inputShape, outputShape, inputStrides, outputStrides, pads) {\n        const [inputShape0, inputShape1] = inputShape;\n        const [outputShape0, outputShape1] = outputShape;\n        const [inputStrides0, inputStrides1] = inputStrides;\n        const [outputStrides0, outputStrides1] = outputStrides;\n        const [pads0, pads1] = pads;\n        for (let d0 = 0; d0 < outputShape0; d0++) {\n            for (let d1 = 0; d1 < outputShape1; d1++) {\n                let i0 = d0 - pads0, i1 = d1 - pads1;\n                if (i0 < 0) {\n                    i0 = 0;\n                }\n                else if (i0 >= inputShape0) {\n                    i0 = inputShape0 - 1;\n                }\n                if (i1 < 0) {\n                    i1 = 0;\n                }\n                else if (i1 >= inputShape1) {\n                    i1 = inputShape1 - 1;\n                }\n                const v = dI[i0 * inputStrides0 + i1 * inputStrides1];\n                dO[d0 * outputStrides0 + d1 * outputStrides1] = v;\n            }\n        }\n    }\n    edgeCopy3d(dI, dO, inputShape, outputShape, inputStrides, outputStrides, pads) {\n        const [inputShape0, inputShape1, inputShape2] = inputShape;\n        const [outputShape0, outputShape1, outputShape2] = outputShape;\n        const [inputStrides0, inputStrides1, inputStrides2] = inputStrides;\n        const [outputStrides0, outputStrides1, outputStrides2] = outputStrides;\n        const [pads0, pads1, pads2] = pads;\n        for (let d0 = 0; d0 < outputShape0; d0++) {\n            for (let d1 = 0; d1 < outputShape1; d1++) {\n                for (let d2 = 0; d2 < outputShape2; d2++) {\n                    let i0 = d0 - pads0, i1 = d1 - pads1, i2 = d2 - pads2;\n                    if (i0 < 0) {\n                        i0 = 0;\n                    }\n                    else if (i0 >= inputShape0) {\n                        i0 = inputShape0 - 1;\n                    }\n                    if (i1 < 0) {\n                        i1 = 0;\n                    }\n                    else if (i1 >= inputShape1) {\n                        i1 = inputShape1 - 1;\n                    }\n                    if (i2 < 0) {\n                        i2 = 0;\n                    }\n                    else if (i2 >= inputShape2) {\n                        i2 = inputShape2 - 1;\n                    }\n                    const v = dI[i0 * inputStrides0 + i1 * inputStrides1 + i2 * inputStrides2];\n                    dO[d0 * outputStrides0 + d1 * outputStrides1 + d2 * outputStrides2] =\n                        v;\n                }\n            }\n        }\n    }\n    edgeCopy4d(dI, dO, inputShape, outputShape, inputStrides, outputStrides, pads) {\n        const [inputShape0, inputShape1, inputShape2, inputShape3] = inputShape;\n        const [outputShape0, outputShape1, outputShape2, outputShape3] = outputShape;\n        const [inputStrides0, inputStrides1, inputStrides2, inputStrides3] = inputStrides;\n        const [outputStrides0, outputStrides1, outputStrides2, outputStrides3] = outputStrides;\n        const [pads0, pads1, pads2, pads3] = pads;\n        for (let d0 = 0; d0 < outputShape0; d0++) {\n            for (let d1 = 0; d1 < outputShape1; d1++) {\n                for (let d2 = 0; d2 < outputShape2; d2++) {\n                    for (let d3 = 0; d3 < outputShape3; d3++) {\n                        let i0 = d0 - pads0, i1 = d1 - pads1, i2 = d2 - pads2, i3 = d3 - pads3;\n                        if (i0 < 0) {\n                            i0 = 0;\n                        }\n                        else if (i0 >= inputShape0) {\n                            i0 = inputShape0 - 1;\n                        }\n                        if (i1 < 0) {\n                            i1 = 0;\n                        }\n                        else if (i1 >= inputShape1) {\n                            i1 = inputShape1 - 1;\n                        }\n                        if (i2 < 0) {\n                            i2 = 0;\n                        }\n                        else if (i2 >= inputShape2) {\n                            i2 = inputShape2 - 1;\n                        }\n                        if (i3 < 0) {\n                            i3 = 0;\n                        }\n                        else if (i3 >= inputShape3) {\n                            i3 = inputShape3 - 1;\n                        }\n                        const v = dI[i0 * inputStrides0 +\n                            i1 * inputStrides1 +\n                            i2 * inputStrides2 +\n                            i3 * inputStrides3];\n                        dO[d0 * outputStrides0 +\n                            d1 * outputStrides1 +\n                            d2 * outputStrides2 +\n                            d3 * outputStrides3] = v;\n                    }\n                }\n            }\n        }\n    }\n    edgeCopy5d(dI, dO, inputShape, outputShape, inputStrides, outputStrides, pads) {\n        const [inputShape0, inputShape1, inputShape2, inputShape3, inputShape4] = inputShape;\n        const [outputShape0, outputShape1, outputShape2, outputShape3, outputShape4,] = outputShape;\n        const [inputStrides0, inputStrides1, inputStrides2, inputStrides3, inputStrides4,] = inputStrides;\n        const [outputStrides0, outputStrides1, outputStrides2, outputStrides3, outputStrides4,] = outputStrides;\n        const [pads0, pads1, pads2, pads3, pads4] = pads;\n        for (let d0 = 0; d0 < outputShape0; d0++) {\n            for (let d1 = 0; d1 < outputShape1; d1++) {\n                for (let d2 = 0; d2 < outputShape2; d2++) {\n                    for (let d3 = 0; d3 < outputShape3; d3++) {\n                        for (let d4 = 0; d4 < outputShape4; d4++) {\n                            let i0 = d0 - pads0, i1 = d1 - pads1, i2 = d2 - pads2, i3 = d3 - pads3, i4 = d4 - pads4;\n                            if (i0 < 0) {\n                                i0 = 0;\n                            }\n                            else if (i0 >= inputShape0) {\n                                i0 = inputShape0 - 1;\n                            }\n                            if (i1 < 0) {\n                                i1 = 0;\n                            }\n                            else if (i1 >= inputShape1) {\n                                i1 = inputShape1 - 1;\n                            }\n                            if (i2 < 0) {\n                                i2 = 0;\n                            }\n                            else if (i2 >= inputShape2) {\n                                i2 = inputShape2 - 1;\n                            }\n                            if (i3 < 0) {\n                                i3 = 0;\n                            }\n                            else if (i3 >= inputShape3) {\n                                i3 = inputShape3 - 1;\n                            }\n                            if (i4 < 0) {\n                                i4 = 0;\n                            }\n                            else if (i4 >= inputShape4) {\n                                i4 = inputShape4 - 1;\n                            }\n                            const v = dI[i0 * inputStrides0 +\n                                i1 * inputStrides1 +\n                                i2 * inputStrides2 +\n                                i3 * inputStrides3 +\n                                i4 * inputStrides4];\n                            dO[d0 * outputStrides0 +\n                                d1 * outputStrides1 +\n                                d2 * outputStrides2 +\n                                d3 * outputStrides3 +\n                                d4 * outputStrides4] = v;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    edgeCopy6d(dI, dO, inputShape, outputShape, inputStrides, outputStrides, pads) {\n        const [inputShape0, inputShape1, inputShape2, inputShape3, inputShape4, inputShape5,] = inputShape;\n        const [outputShape0, outputShape1, outputShape2, outputShape3, outputShape4, outputShape5,] = outputShape;\n        const [inputStrides0, inputStrides1, inputStrides2, inputStrides3, inputStrides4, inputStrides5,] = inputStrides;\n        const [outputStrides0, outputStrides1, outputStrides2, outputStrides3, outputStrides4, outputStrides5,] = outputStrides;\n        const [pads0, pads1, pads2, pads3, pads4, pads5] = pads;\n        for (let d0 = 0; d0 < outputShape0; d0++) {\n            for (let d1 = 0; d1 < outputShape1; d1++) {\n                for (let d2 = 0; d2 < outputShape2; d2++) {\n                    for (let d3 = 0; d3 < outputShape3; d3++) {\n                        for (let d4 = 0; d4 < outputShape4; d4++) {\n                            for (let d5 = 0; d5 < outputShape5; d5++) {\n                                let i0 = d0 - pads0, i1 = d1 - pads1, i2 = d2 - pads2, i3 = d3 - pads3, i4 = d4 - pads4, i5 = d5 - pads5;\n                                if (i0 < 0) {\n                                    i0 = 0;\n                                }\n                                else if (i0 >= inputShape0) {\n                                    i0 = inputShape0 - 1;\n                                }\n                                if (i1 < 0) {\n                                    i1 = 0;\n                                }\n                                else if (i1 >= inputShape1) {\n                                    i1 = inputShape1 - 1;\n                                }\n                                if (i2 < 0) {\n                                    i2 = 0;\n                                }\n                                else if (i2 >= inputShape2) {\n                                    i2 = inputShape2 - 1;\n                                }\n                                if (i3 < 0) {\n                                    i3 = 0;\n                                }\n                                else if (i3 >= inputShape3) {\n                                    i3 = inputShape3 - 1;\n                                }\n                                if (i4 < 0) {\n                                    i4 = 0;\n                                }\n                                else if (i4 >= inputShape4) {\n                                    i4 = inputShape4 - 1;\n                                }\n                                if (i5 < 0) {\n                                    i5 = 0;\n                                }\n                                else if (i5 >= inputShape5) {\n                                    i5 = inputShape5 - 1;\n                                }\n                                const v = dI[i0 * inputStrides0 +\n                                    i1 * inputStrides1 +\n                                    i2 * inputStrides2 +\n                                    i3 * inputStrides3 +\n                                    i4 * inputStrides4 +\n                                    i5 * inputStrides5];\n                                dO[d0 * outputStrides0 +\n                                    d1 * outputStrides1 +\n                                    d2 * outputStrides2 +\n                                    d3 * outputStrides3 +\n                                    d4 * outputStrides4 +\n                                    d5 * outputStrides5] = v;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Pad\",\n            backend: \"cpu\",\n            opsetMin: 11,\n            factory: () => new CPUPad11(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/pad11.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/reduce.ts":
/*!**************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/reduce.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nconst constants_1 = __webpack_require__(/*! ../../../../interface/core/constants */ \"./src/descriptor_runner/interface/core/constants.ts\");\nconst util_1 = __webpack_require__(/*! ../../../../util */ \"./src/descriptor_runner/util.ts\");\n// Opset 1\nclass ReduceOp extends operatorImpl_1.OperatorImpl {\n    constructor(opType, opNotFinalAxis, opFinalAxis) {\n        super(\"cpu\");\n        this.opType = opType;\n        this.opNotFinalAxis = opNotFinalAxis;\n        this.opFinalAxis = opFinalAxis;\n    }\n    async runCore(context, input, sortedAxes) {\n        let lastOutputData = input.data;\n        let lastShape = input.dims;\n        let totalReductionLength = 1;\n        for (let i = 0; i < sortedAxes.length; i++) {\n            const axis = sortedAxes[i];\n            const newShape = lastShape.slice();\n            newShape[axis] = 1;\n            const reductionLength = lastShape[axis];\n            totalReductionLength *= reductionLength;\n            const outerLength = util_1.arrayProd(lastShape.slice(0, axis));\n            const innerLength = util_1.arrayProd(lastShape.slice(axis + 1));\n            const newOutputData = new constants_1.DataArrayConstructor[input.dataType](outerLength * innerLength);\n            if (i < sortedAxes.length - 1) {\n                this.opNotFinalAxis(lastOutputData, newOutputData, outerLength, innerLength, reductionLength);\n            }\n            else {\n                if (this.opFinalAxis) {\n                    this.opFinalAxis(lastOutputData, newOutputData, outerLength, innerLength, reductionLength, totalReductionLength);\n                }\n                else {\n                    this.opNotFinalAxis(lastOutputData, newOutputData, outerLength, innerLength, reductionLength);\n                }\n            }\n            lastOutputData = newOutputData;\n            lastShape = newShape;\n        }\n        let finalShape;\n        if (this.keepdims) {\n            finalShape = lastShape;\n        }\n        else {\n            finalShape = lastShape.filter((_, i) => !sortedAxes.includes(i));\n        }\n        const output = context.emptyTensor(finalShape, input.dataType, lastOutputData);\n        return [output];\n    }\n}\nclass ReduceOp1 extends ReduceOp {\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.axes = operatorUtil_1.getAttrInts(attribute, \"axes\", []);\n        this.keepdims = operatorUtil_1.getAttrInt(attribute, \"keepdims\", 1) !== 0;\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const input = inputs[0];\n        let sortedAxes;\n        if (this.axes.length > 0) {\n            sortedAxes = this.axes.map((a) => (a >= 0 ? a : input.ndim + a));\n            sortedAxes.sort((a, b) => a - b);\n        }\n        else {\n            sortedAxes = [];\n            for (let i = 0; i < input.ndim; i++) {\n                sortedAxes.push(i);\n            }\n        }\n        return this.runCore(context, input, sortedAxes);\n    }\n}\n// Only ReduceSum has backward-incompatible opset 13\nclass ReduceSum13 extends ReduceOp {\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.keepdims = operatorUtil_1.getAttrInt(attribute, \"keepdims\", 1) !== 0;\n        this.noopWithEmptyAxes =\n            operatorUtil_1.getAttrInt(attribute, \"noop_with_empty_axes\", 0) !== 0;\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const input = inputs[0], axes = inputs[1];\n        let sortedAxes;\n        if (axes.length > 0) {\n            sortedAxes = Array.from(axes.data).map((a) => a >= 0 ? a : input.ndim + a);\n            sortedAxes.sort((a, b) => a - b);\n        }\n        else {\n            sortedAxes = [];\n            if (!this.noopWithEmptyAxes) {\n                for (let i = 0; i < input.ndim; i++) {\n                    sortedAxes.push(i);\n                }\n            }\n        }\n        return this.runCore(context, input, sortedAxes);\n    }\n}\nfunction getOpEntries() {\n    const opEntries = [];\n    const addOps = (opType, opNotFinalAxis, opFinalAxis, reduceSum13) => {\n        opEntries.push({\n            opType: opType,\n            backend: \"cpu\",\n            opsetMin: 1,\n            opsetMax: reduceSum13 ? 13 : undefined,\n            factory: () => new ReduceOp1(opType, opNotFinalAxis, opFinalAxis),\n        });\n        if (reduceSum13) {\n            opEntries.push({\n                opType: opType,\n                backend: \"cpu\",\n                opsetMin: 13,\n                factory: () => new ReduceSum13(opType, opNotFinalAxis, opFinalAxis),\n            });\n        }\n    };\n    addOps(\"ReduceL1\", (dI, dO, outerLength, innerLength, reductionLength) => {\n        for (let outer = 0; outer < outerLength; outer++) {\n            for (let inner = 0; inner < innerLength; inner++) {\n                let s = 0;\n                for (let r = 0; r < reductionLength; r++) {\n                    s += Math.abs(dI[(outer * reductionLength + r) * innerLength + inner]);\n                }\n                dO[outer * innerLength + inner] = s;\n            }\n        }\n    });\n    addOps(\"ReduceL2\", (dI, dO, outerLength, innerLength, reductionLength) => {\n        for (let outer = 0; outer < outerLength; outer++) {\n            for (let inner = 0; inner < innerLength; inner++) {\n                let s = 0;\n                for (let r = 0; r < reductionLength; r++) {\n                    const v = dI[(outer * reductionLength + r) * innerLength + inner];\n                    s += v * v;\n                }\n                dO[outer * innerLength + inner] = s;\n            }\n        }\n    }, (dI, dO, outerLength, innerLength, reductionLength) => {\n        for (let outer = 0; outer < outerLength; outer++) {\n            for (let inner = 0; inner < innerLength; inner++) {\n                let s = 0;\n                for (let r = 0; r < reductionLength; r++) {\n                    const v = dI[(outer * reductionLength + r) * innerLength + inner];\n                    s += v * v;\n                }\n                dO[outer * innerLength + inner] = Math.sqrt(s);\n            }\n        }\n    });\n    addOps(\"ReduceLogSum\", (dI, dO, outerLength, innerLength, reductionLength) => {\n        for (let outer = 0; outer < outerLength; outer++) {\n            for (let inner = 0; inner < innerLength; inner++) {\n                let s = 0;\n                for (let r = 0; r < reductionLength; r++) {\n                    s += dI[outer * reductionLength + r];\n                }\n                dO[outer * innerLength + inner] = s;\n            }\n        }\n    }, (dI, dO, outerLength, innerLength, reductionLength) => {\n        for (let outer = 0; outer < outerLength; outer++) {\n            for (let inner = 0; inner < innerLength; inner++) {\n                let s = 0;\n                for (let r = 0; r < reductionLength; r++) {\n                    s += dI[outer * reductionLength + r];\n                }\n                dO[outer * innerLength + inner] = Math.log(s);\n            }\n        }\n    });\n    addOps(\"ReduceLogSumExp\", (dI, dO, outerLength, innerLength, reductionLength) => {\n        for (let outer = 0; outer < outerLength; outer++) {\n            for (let inner = 0; inner < innerLength; inner++) {\n                let s = 0;\n                for (let r = 0; r < reductionLength; r++) {\n                    s += Math.exp(dI[(outer * reductionLength + r) * innerLength + inner]);\n                }\n                dO[outer * innerLength + inner] = s;\n            }\n        }\n    }, (dI, dO, outerLength, innerLength, reductionLength) => {\n        for (let outer = 0; outer < outerLength; outer++) {\n            for (let inner = 0; inner < innerLength; inner++) {\n                let s = 0;\n                for (let r = 0; r < reductionLength; r++) {\n                    s += Math.exp(dI[(outer * reductionLength + r) * innerLength + inner]);\n                }\n                dO[outer * innerLength + inner] = Math.log(s);\n            }\n        }\n    });\n    addOps(\"ReduceMax\", (dI, dO, outerLength, innerLength, reductionLength) => {\n        for (let outer = 0; outer < outerLength; outer++) {\n            for (let inner = 0; inner < innerLength; inner++) {\n                let s = dI[outer * reductionLength * innerLength + inner];\n                for (let r = 1; r < reductionLength; r++) {\n                    const v = dI[(outer * reductionLength + r) * innerLength + inner];\n                    if (v > s) {\n                        s = v;\n                    }\n                }\n                dO[outer * innerLength + inner] = s;\n            }\n        }\n    });\n    addOps(\"ReduceMean\", (dI, dO, outerLength, innerLength, reductionLength) => {\n        for (let outer = 0; outer < outerLength; outer++) {\n            for (let inner = 0; inner < innerLength; inner++) {\n                let s = 0;\n                for (let r = 0; r < reductionLength; r++) {\n                    s += dI[(outer * reductionLength + r) * innerLength + inner];\n                }\n                dO[outer * innerLength + inner] = s;\n            }\n        }\n    }, (dI, dO, outerLength, innerLength, reductionLength, totalReductionLength) => {\n        for (let outer = 0; outer < outerLength; outer++) {\n            for (let inner = 0; inner < innerLength; inner++) {\n                let s = 0;\n                for (let r = 0; r < reductionLength; r++) {\n                    s += dI[(outer * reductionLength + r) * innerLength + inner];\n                }\n                dO[outer * innerLength + inner] = s / totalReductionLength;\n            }\n        }\n    });\n    addOps(\"ReduceMin\", (dI, dO, outerLength, innerLength, reductionLength) => {\n        for (let outer = 0; outer < outerLength; outer++) {\n            for (let inner = 0; inner < innerLength; inner++) {\n                let s = dI[outer * reductionLength * innerLength + inner];\n                for (let r = 1; r < reductionLength; r++) {\n                    const v = dI[(outer * reductionLength + r) * innerLength + inner];\n                    if (v < s) {\n                        s = v;\n                    }\n                }\n                dO[outer * innerLength + inner] = s;\n            }\n        }\n    });\n    addOps(\"ReduceProd\", (dI, dO, outerLength, innerLength, reductionLength) => {\n        for (let outer = 0; outer < outerLength; outer++) {\n            for (let inner = 0; inner < innerLength; inner++) {\n                let s = 1;\n                for (let r = 0; r < reductionLength; r++) {\n                    s *= dI[(outer * reductionLength + r) * innerLength + inner];\n                }\n                dO[outer * innerLength + inner] = s;\n            }\n        }\n    });\n    addOps(\"ReduceSum\", (dI, dO, outerLength, innerLength, reductionLength) => {\n        for (let outer = 0; outer < outerLength; outer++) {\n            for (let inner = 0; inner < innerLength; inner++) {\n                let s = 0;\n                for (let r = 0; r < reductionLength; r++) {\n                    s += dI[(outer * reductionLength + r) * innerLength + inner];\n                }\n                dO[outer * innerLength + inner] = s;\n            }\n        }\n    }, undefined, true);\n    addOps(\"ReduceSumSquare\", (dI, dO, outerLength, innerLength, reductionLength) => {\n        for (let outer = 0; outer < outerLength; outer++) {\n            for (let inner = 0; inner < innerLength; inner++) {\n                let s = 0;\n                for (let r = 0; r < reductionLength; r++) {\n                    const v = dI[(outer * reductionLength + r) * innerLength + inner];\n                    s += v * v;\n                }\n                dO[outer * innerLength + inner] = s;\n            }\n        }\n    });\n    return opEntries;\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/reduce.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/reshape5.ts":
/*!****************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/reshape5.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst reshape5_1 = __webpack_require__(/*! ../../../base/reshape5 */ \"./src/descriptor_runner/operators/base/reshape5.ts\");\nclass CPUReshape5 extends reshape5_1.Reshape5 {\n    constructor() {\n        super(\"cpu\");\n    }\n    getTensorBackendRequirement(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    nInputs, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    nOutputs) {\n        return [\"cpu\", \"cpu\"];\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const input = inputs[0], shapeTensor = inputs[1], computedShape = this.calcShape(input, shapeTensor), output = context.emptyTensor(computedShape, input.dataType, input.data);\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Reshape\",\n            backend: \"cpu\",\n            opsetMin: 5,\n            factory: () => new CPUReshape5(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/reshape5.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/shape.ts":
/*!*************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/shape.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nclass Shape extends operatorImpl_1.OperatorImpl {\n    constructor() {\n        super(\"cpu\");\n    }\n    async run(context, inputs) {\n        // メタデータしか使わないので、どのバックエンドに存在してもよい\n        const input = inputs[0], shapeData = new Int32Array(input.dims), output = context.emptyTensor([shapeData.length], \"int32\", shapeData);\n        return [output];\n    }\n    getTensorBackendRequirement(nInputs, nOutputs) {\n        // メタデータしか使わないので、どのバックエンドに存在してもよい\n        return [null];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Shape\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new Shape(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/shape.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/slice.ts":
/*!*************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/slice.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nclass Slice10 extends operatorImpl_1.OperatorImpl {\n    constructor() {\n        super(\"cpu\");\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const data = inputs[0], starts = inputs[1], ends = inputs[2], axesTensor = inputs[3];\n        let steps = inputs[4];\n        let axes;\n        if (axesTensor) {\n            axes = Array.from(axesTensor.data);\n            for (let i = 0; i < axes.length; i++) {\n                if (axes[i] < 0) {\n                    axes[i] += data.ndim;\n                }\n            }\n        }\n        else {\n            axes = [];\n            for (let i = 0; i < data.ndim; i++) {\n                axes.push(i);\n            }\n        }\n        // Currently, only common usage is supported\n        if (!steps) {\n            steps = context.emptyTensor([axes.length], \"int32\");\n            steps.data.fill(1);\n        }\n        const ranges = data.dims.map((d) => [0, d, 1, d]); // Start, stop, step, srcsize\n        for (let i = 0; i < axes.length; i++) {\n            ranges[axes[i]] = [\n                starts.data[i],\n                ends.data[i],\n                steps.data[i],\n                data.dims[axes[i]],\n            ];\n        }\n        const rangesWithSize = ranges.map(([start, stop, step, srcsize]) => {\n            if (start < 0) {\n                start += srcsize;\n            }\n            start = Math.max(Math.min(start, srcsize - 1), 0);\n            if (stop < 0) {\n                stop += srcsize;\n            }\n            stop = Math.max(Math.min(stop, srcsize), -1);\n            const dstsize = Math.max(Math.ceil((stop - start) / step), 0);\n            return [start, stop, step, srcsize, dstsize];\n        }), output = context.emptyTensor(rangesWithSize.map(([, , , , dstsize]) => dstsize), data.dataType);\n        let func;\n        switch (data.ndim) {\n            case 1:\n                func = this.copy1d;\n                break;\n            case 2:\n                func = this.copy2d;\n                break;\n            case 3:\n                func = this.copy3d;\n                break;\n            case 4:\n                func = this.copy4d;\n                break;\n            case 5:\n                func = this.copy5d;\n                break;\n            case 6:\n                func = this.copy6d;\n                break;\n            default:\n                throw new Error(`Slice: input dimension ${data.ndim} > 6 is not yet supported`);\n        }\n        func(data.data, output.data, rangesWithSize, data.strides, output.strides);\n        return [output];\n    }\n    copy1d(dI, dO, rangesWithSize, srcStrides, dstStrides) {\n        for (let x = 0; x < rangesWithSize[0][4]; x++) {\n            dO[x * dstStrides[0]] =\n                dI[(rangesWithSize[0][0] + x * rangesWithSize[0][2]) * srcStrides[0]];\n        }\n    }\n    copy2d(dI, dO, rangesWithSize, srcStrides, dstStrides) {\n        for (let y = 0; y < rangesWithSize[0][4]; y++) {\n            for (let x = 0; x < rangesWithSize[1][4]; x++) {\n                dO[y * dstStrides[0] + x * dstStrides[1]] =\n                    dI[(rangesWithSize[0][0] + y * rangesWithSize[0][2]) * srcStrides[0] +\n                        (rangesWithSize[1][0] + x * rangesWithSize[1][2]) * srcStrides[1]];\n            }\n        }\n    }\n    copy3d(dI, dO, rangesWithSize, srcStrides, dstStrides) {\n        for (let d0 = 0; d0 < rangesWithSize[0][4]; d0++) {\n            for (let d1 = 0; d1 < rangesWithSize[1][4]; d1++) {\n                for (let d2 = 0; d2 < rangesWithSize[2][4]; d2++) {\n                    dO[d0 * dstStrides[0] + d1 * dstStrides[1] + d2 * dstStrides[2]] =\n                        dI[(rangesWithSize[0][0] + d0 * rangesWithSize[0][2]) *\n                            srcStrides[0] +\n                            (rangesWithSize[1][0] + d1 * rangesWithSize[1][2]) *\n                                srcStrides[1] +\n                            (rangesWithSize[2][0] + d2 * rangesWithSize[2][2]) *\n                                srcStrides[2]];\n                }\n            }\n        }\n    }\n    copy4d(dI, dO, rangesWithSize, srcStrides, dstStrides) {\n        for (let d0 = 0; d0 < rangesWithSize[0][4]; d0++) {\n            for (let d1 = 0; d1 < rangesWithSize[1][4]; d1++) {\n                for (let d2 = 0; d2 < rangesWithSize[2][4]; d2++) {\n                    for (let d3 = 0; d3 < rangesWithSize[3][4]; d3++) {\n                        dO[d0 * dstStrides[0] +\n                            d1 * dstStrides[1] +\n                            d2 * dstStrides[2] +\n                            d3 * dstStrides[3]] =\n                            dI[(rangesWithSize[0][0] + d0 * rangesWithSize[0][2]) *\n                                srcStrides[0] +\n                                (rangesWithSize[1][0] + d1 * rangesWithSize[1][2]) *\n                                    srcStrides[1] +\n                                (rangesWithSize[2][0] + d2 * rangesWithSize[2][2]) *\n                                    srcStrides[2] +\n                                (rangesWithSize[3][0] + d3 * rangesWithSize[3][2]) *\n                                    srcStrides[3]];\n                    }\n                }\n            }\n        }\n    }\n    copy5d(dI, dO, rangesWithSize, srcStrides, dstStrides) {\n        for (let d0 = 0; d0 < rangesWithSize[0][4]; d0++) {\n            for (let d1 = 0; d1 < rangesWithSize[1][4]; d1++) {\n                for (let d2 = 0; d2 < rangesWithSize[2][4]; d2++) {\n                    for (let d3 = 0; d3 < rangesWithSize[3][4]; d3++) {\n                        for (let d4 = 0; d4 < rangesWithSize[4][4]; d4++) {\n                            dO[d0 * dstStrides[0] +\n                                d1 * dstStrides[1] +\n                                d2 * dstStrides[2] +\n                                d3 * dstStrides[3] +\n                                d4 * dstStrides[4]] =\n                                dI[(rangesWithSize[0][0] + d0 * rangesWithSize[0][2]) *\n                                    srcStrides[0] +\n                                    (rangesWithSize[1][0] + d1 * rangesWithSize[1][2]) *\n                                        srcStrides[1] +\n                                    (rangesWithSize[2][0] + d2 * rangesWithSize[2][2]) *\n                                        srcStrides[2] +\n                                    (rangesWithSize[3][0] + d3 * rangesWithSize[3][2]) *\n                                        srcStrides[3] +\n                                    (rangesWithSize[4][0] + d4 * rangesWithSize[4][2]) *\n                                        srcStrides[4]];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    copy6d(dI, dO, rangesWithSize, srcStrides, dstStrides) {\n        for (let d0 = 0; d0 < rangesWithSize[0][4]; d0++) {\n            for (let d1 = 0; d1 < rangesWithSize[1][4]; d1++) {\n                for (let d2 = 0; d2 < rangesWithSize[2][4]; d2++) {\n                    for (let d3 = 0; d3 < rangesWithSize[3][4]; d3++) {\n                        for (let d4 = 0; d4 < rangesWithSize[4][4]; d4++) {\n                            for (let d5 = 0; d5 < rangesWithSize[5][4]; d5++) {\n                                dO[d0 * dstStrides[0] +\n                                    d1 * dstStrides[1] +\n                                    d2 * dstStrides[2] +\n                                    d3 * dstStrides[3] +\n                                    d4 * dstStrides[4] +\n                                    d5 * dstStrides[5]] =\n                                    dI[(rangesWithSize[0][0] + d0 * rangesWithSize[0][2]) *\n                                        srcStrides[0] +\n                                        (rangesWithSize[1][0] + d1 * rangesWithSize[1][2]) *\n                                            srcStrides[1] +\n                                        (rangesWithSize[2][0] + d2 * rangesWithSize[2][2]) *\n                                            srcStrides[2] +\n                                        (rangesWithSize[3][0] + d3 * rangesWithSize[3][2]) *\n                                            srcStrides[3] +\n                                        (rangesWithSize[4][0] + d4 * rangesWithSize[4][2]) *\n                                            srcStrides[4] +\n                                        (rangesWithSize[5][0] + d5 * rangesWithSize[5][2]) *\n                                            srcStrides[5]];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Slice\",\n            backend: \"cpu\",\n            opsetMin: 10,\n            factory: () => new Slice10(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/slice.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/softmax.ts":
/*!***************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/softmax.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nclass Softmax extends operatorImpl_1.OperatorImpl {\n    constructor() {\n        super(\"cpu\");\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        // TODO: support axis, whose default is different between opsets\n        this.axis = operatorUtil_1.getAttrInt(attribute, \"axis\", -1);\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const input = inputs[0];\n        let { axis } = this;\n        if (axis < 0) {\n            axis += input.ndim;\n        }\n        if (axis !== input.ndim - 1) {\n            throw new Error(\"Softmax: currently only reducing final axis is supported\");\n        }\n        // 最終軸のreductionに特化した実装\n        const reductionLength = input.dims[axis], outerLength = input.length / reductionLength, output = context.emptyTensor(input.dims, input.dataType), dI = input.data, dO = output.data;\n        for (let outer = 0; outer < outerLength; outer++) {\n            let max = -Infinity;\n            for (let r = 0; r < reductionLength; r++) {\n                const v = dI[outer * reductionLength + r];\n                if (v > max) {\n                    max = v;\n                }\n            }\n            let expsum = 0;\n            for (let r = 0; r < reductionLength; r++) {\n                const v = dI[outer * reductionLength + r], exp = Math.exp(v - max);\n                dO[outer * reductionLength + r] = exp;\n                expsum += exp;\n            }\n            for (let r = 0; r < reductionLength; r++) {\n                dO[outer * reductionLength + r] /= expsum;\n            }\n        }\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Softmax\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new Softmax(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/softmax.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/split.ts":
/*!*************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/split.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst split_1 = __webpack_require__(/*! ../../../base/split */ \"./src/descriptor_runner/operators/base/split.ts\");\nclass CPUSplit2 extends split_1.Split2 {\n    constructor() {\n        super(\"cpu\");\n    }\n    async run(context, inputs, nOutputs) {\n        context.assertsCPUTensorArray(inputs);\n        const input = inputs[0], { eachOutputParams, outerLength, innerLength, inOuterStride, inConcatStride, } = this.calcShape(input, nOutputs), outputs = [];\n        for (let i = 0; i < nOutputs; i++) {\n            const { dim, offset, outShape, outerStride, splitStride } = eachOutputParams[i], ot = context.emptyTensor(outShape, input.dataType);\n            for (let c = 0; c < dim; c++) {\n                for (let outer = 0; outer < outerLength; outer++) {\n                    for (let inner = 0; inner < innerLength; inner++) {\n                        ot.data[c * splitStride + outer * outerStride + inner] =\n                            input.data[(c + offset) * inConcatStride + outer * inOuterStride + inner];\n                    }\n                }\n            }\n            outputs.push(ot);\n        }\n        return outputs;\n    }\n}\nclass CPUSplit13 extends split_1.Split13 {\n    constructor() {\n        super(\"cpu\");\n    }\n    async run(context, inputs, nOutputs) {\n        context.assertsCPUTensorArray(inputs);\n        const input = inputs[0], splitTensor = inputs[1], { eachOutputParams, outerLength, innerLength, inOuterStride, inConcatStride, } = this.calcShape(input, nOutputs, splitTensor), outputs = [];\n        for (let i = 0; i < nOutputs; i++) {\n            const { dim, offset, outShape, outerStride, splitStride } = eachOutputParams[i], ot = context.emptyTensor(outShape, input.dataType);\n            for (let c = 0; c < dim; c++) {\n                for (let outer = 0; outer < outerLength; outer++) {\n                    for (let inner = 0; inner < innerLength; inner++) {\n                        ot.data[c * splitStride + outer * outerStride + inner] =\n                            input.data[(c + offset) * inConcatStride + outer * inOuterStride + inner];\n                    }\n                }\n            }\n            outputs.push(ot);\n        }\n        return outputs;\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Split\",\n            backend: \"cpu\",\n            opsetMin: 13,\n            factory: () => new CPUSplit13(),\n        },\n        {\n            opType: \"Split\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            opsetMax: 13,\n            factory: () => new CPUSplit2(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/split.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/squeeze.ts":
/*!***************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/squeeze.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.CPUSqueeze13 = exports.CPUSqueeze1 = void 0;\nconst squeeze_1 = __webpack_require__(/*! ../../../base/squeeze */ \"./src/descriptor_runner/operators/base/squeeze.ts\");\nclass CPUSqueeze1 extends squeeze_1.Squeeze1 {\n    constructor() {\n        super(\"cpu\");\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const input = inputs[0], newShape = this.calcShape(input), output = context.emptyTensor(newShape, input.dataType, input.data);\n        return [output];\n    }\n}\nexports.CPUSqueeze1 = CPUSqueeze1;\nclass CPUSqueeze13 extends squeeze_1.Squeeze13 {\n    constructor() {\n        super(\"cpu\");\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const input = inputs[0], axes = inputs[1], newShape = this.calcShape(input, axes), output = context.emptyTensor(newShape, input.dataType, input.data);\n        return [output];\n    }\n}\nexports.CPUSqueeze13 = CPUSqueeze13;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Squeeze\",\n            backend: \"cpu\",\n            opsetMin: 13,\n            factory: () => new CPUSqueeze13(),\n        },\n        {\n            opType: \"Squeeze\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            opsetMax: 13,\n            factory: () => new CPUSqueeze1(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/squeeze.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/tile.ts":
/*!************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/tile.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\n/*\n * Opset 6\n * opset 1は互換性なし\n */\nclass Tile6 extends operatorImpl_1.OperatorImpl {\n    constructor() {\n        super(\"cpu\");\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const input = inputs[0], repeats = inputs[1];\n        const outputShape = [];\n        for (let i = 0; i < input.ndim; i++) {\n            outputShape.push(input.dims[i] * repeats.data[i]);\n        }\n        const output = context.emptyTensor(outputShape, input.dataType);\n        if (input.ndim === 1) {\n            this.copy1d(input.data, output.data, input.dims, outputShape, input.strides, output.strides);\n        }\n        else if (input.ndim === 2) {\n            this.copy2d(input.data, output.data, input.dims, outputShape, input.strides, output.strides);\n        }\n        else if (input.ndim === 3) {\n            this.copy3d(input.data, output.data, input.dims, outputShape, input.strides, output.strides);\n        }\n        else if (input.ndim === 4) {\n            this.copy4d(input.data, output.data, input.dims, outputShape, input.strides, output.strides);\n        }\n        else {\n            throw new Error(`Tile: input.ndim = ${input.ndim} > 4 is not yet supported`);\n        }\n        return [output];\n    }\n    copy1d(dI, dO, inputShape, outputShape, inputStrides, outputStrides) {\n        for (let d0 = 0; d0 < outputShape[0]; d0++) {\n            dO[d0 * outputStrides[0]] = dI[(d0 % inputShape[0]) * inputStrides[0]];\n        }\n    }\n    copy2d(dI, dO, inputShape, outputShape, inputStrides, outputStrides) {\n        for (let d0 = 0; d0 < outputShape[0]; d0++) {\n            for (let d1 = 0; d1 < outputShape[1]; d1++) {\n                dO[d0 * outputStrides[0] + d1 * outputStrides[1]] =\n                    dI[(d0 % inputShape[0]) * inputStrides[0] +\n                        (d1 % inputShape[1]) * inputStrides[1]];\n            }\n        }\n    }\n    copy3d(dI, dO, inputShape, outputShape, inputStrides, outputStrides) {\n        for (let d0 = 0; d0 < outputShape[0]; d0++) {\n            for (let d1 = 0; d1 < outputShape[1]; d1++) {\n                for (let d2 = 0; d2 < outputShape[2]; d2++) {\n                    dO[d0 * outputStrides[0] +\n                        d1 * outputStrides[1] +\n                        d2 * outputStrides[2]] =\n                        dI[(d0 % inputShape[0]) * inputStrides[0] +\n                            (d1 % inputShape[1]) * inputStrides[1] +\n                            (d2 % inputShape[2]) * inputStrides[2]];\n                }\n            }\n        }\n    }\n    copy4d(dI, dO, inputShape, outputShape, inputStrides, outputStrides) {\n        for (let d0 = 0; d0 < outputShape[0]; d0++) {\n            for (let d1 = 0; d1 < outputShape[1]; d1++) {\n                for (let d2 = 0; d2 < outputShape[2]; d2++) {\n                    for (let d3 = 0; d3 < outputShape[3]; d3++) {\n                        dO[d0 * outputStrides[0] +\n                            d1 * outputStrides[1] +\n                            d2 * outputStrides[2] +\n                            d3 * outputStrides[3]] =\n                            dI[(d0 % inputShape[0]) * inputStrides[0] +\n                                (d1 % inputShape[1]) * inputStrides[1] +\n                                (d2 % inputShape[2]) * inputStrides[2] +\n                                (d3 % inputShape[3]) * inputStrides[3]];\n                    }\n                }\n            }\n        }\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Tile\",\n            backend: \"cpu\",\n            opsetMin: 6,\n            factory: () => new Tile6(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/tile.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/transpose.ts":
/*!*****************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/transpose.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst transpose_1 = __webpack_require__(/*! ../../../base/transpose */ \"./src/descriptor_runner/operators/base/transpose.ts\");\nclass CPUTranspose extends transpose_1.Transpose {\n    constructor() {\n        super(\"cpu\");\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const input = inputs[0], { outShape, inStrides } = this.calcShape(input), output = context.emptyTensor(outShape, input.dataType);\n        let func;\n        switch (input.ndim) {\n            case 1:\n                func = this.copy1d;\n                break;\n            case 2:\n                func = this.copy2d;\n                break;\n            case 3:\n                func = this.copy3d;\n                break;\n            case 4:\n                func = this.copy4d;\n                break;\n            case 5:\n                func = this.copy5d;\n                break;\n            case 6:\n                func = this.copy6d;\n                break;\n            default:\n                throw new Error(`Transpose: ndim ${input.ndim} > 4 is not yet supported`);\n        }\n        func(input.data, output.data, outShape, inStrides);\n        return [output];\n    }\n    copy1d(dI, dO, outShape, inStrides) {\n        let idx = 0;\n        for (let a0 = 0; a0 < outShape[0]; a0++) {\n            dO[idx++] = dI[a0 * inStrides[0]];\n        }\n    }\n    copy2d(dI, dO, outShape, inStrides) {\n        let idx = 0;\n        for (let a0 = 0; a0 < outShape[0]; a0++) {\n            for (let a1 = 0; a1 < outShape[1]; a1++) {\n                dO[idx++] = dI[a0 * inStrides[0] + a1 * inStrides[1]];\n            }\n        }\n    }\n    copy3d(dI, dO, outShape, inStrides) {\n        let idx = 0;\n        for (let a0 = 0; a0 < outShape[0]; a0++) {\n            for (let a1 = 0; a1 < outShape[1]; a1++) {\n                for (let a2 = 0; a2 < outShape[2]; a2++) {\n                    dO[idx++] =\n                        dI[a0 * inStrides[0] + a1 * inStrides[1] + a2 * inStrides[2]];\n                }\n            }\n        }\n    }\n    copy4d(dI, dO, outShape, inStrides) {\n        let idx = 0;\n        for (let a0 = 0; a0 < outShape[0]; a0++) {\n            for (let a1 = 0; a1 < outShape[1]; a1++) {\n                for (let a2 = 0; a2 < outShape[2]; a2++) {\n                    for (let a3 = 0; a3 < outShape[3]; a3++) {\n                        dO[idx++] =\n                            dI[a0 * inStrides[0] +\n                                a1 * inStrides[1] +\n                                a2 * inStrides[2] +\n                                a3 * inStrides[3]];\n                    }\n                }\n            }\n        }\n    }\n    copy5d(dI, dO, outShape, inStrides) {\n        let idx = 0;\n        for (let a0 = 0; a0 < outShape[0]; a0++) {\n            for (let a1 = 0; a1 < outShape[1]; a1++) {\n                for (let a2 = 0; a2 < outShape[2]; a2++) {\n                    for (let a3 = 0; a3 < outShape[3]; a3++) {\n                        for (let a4 = 0; a4 < outShape[4]; a4++) {\n                            dO[idx++] =\n                                dI[a0 * inStrides[0] +\n                                    a1 * inStrides[1] +\n                                    a2 * inStrides[2] +\n                                    a3 * inStrides[3] +\n                                    a4 * inStrides[4]];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    copy6d(dI, dO, outShape, inStrides) {\n        let idx = 0;\n        for (let a0 = 0; a0 < outShape[0]; a0++) {\n            for (let a1 = 0; a1 < outShape[1]; a1++) {\n                for (let a2 = 0; a2 < outShape[2]; a2++) {\n                    for (let a3 = 0; a3 < outShape[3]; a3++) {\n                        for (let a4 = 0; a4 < outShape[4]; a4++) {\n                            for (let a5 = 0; a5 < outShape[5]; a5++) {\n                                dO[idx++] =\n                                    dI[a0 * inStrides[0] +\n                                        a1 * inStrides[1] +\n                                        a2 * inStrides[2] +\n                                        a3 * inStrides[3] +\n                                        a4 * inStrides[4] +\n                                        a5 * inStrides[5]];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Transpose\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUTranspose(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/transpose.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/unary.ts":
/*!*************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/unary.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst constants_1 = __webpack_require__(/*! ../../../../interface/core/constants */ \"./src/descriptor_runner/interface/core/constants.ts\");\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nclass CPUUnary extends operatorImpl_1.OperatorImpl {\n    constructor(op, allowDataTypes) {\n        super(\"cpu\");\n        this.op = op;\n        this.allowDataTypes = allowDataTypes;\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const input = inputs[0];\n        if (!this.allowDataTypes.includes(input.dataType)) {\n            throw new Error(`Unary: DataType ${input.dataType} not supported`);\n        }\n        const newData = new constants_1.DataArrayConstructor[input.dataType](input.data.length), { op } = this;\n        for (let i = 0; i < newData.length; i++) {\n            newData[i] = op(input.data[i]);\n        }\n        const output = context.emptyTensor(input.dims, input.dataType, newData);\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Abs\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.abs(value), [\"float32\", \"int32\"]),\n        },\n        {\n            opType: \"Acos\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.acos(value), [\"float32\"]),\n        },\n        {\n            opType: \"Acosh\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.acosh(value), [\"float32\"]),\n        },\n        {\n            opType: \"Asin\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.asin(value), [\"float32\"]),\n        },\n        {\n            opType: \"Asinh\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.asinh(value), [\"float32\"]),\n        },\n        {\n            opType: \"Atan\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.atan(value), [\"float32\"]),\n        },\n        {\n            opType: \"Atanh\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.atanh(value), [\"float32\"]),\n        },\n        {\n            opType: \"Ceil\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.ceil(value), [\"float32\"]),\n        },\n        {\n            opType: \"Cos\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.cos(value), [\"float32\"]),\n        },\n        {\n            opType: \"Cosh\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.cosh(value), [\"float32\"]),\n        },\n        {\n            opType: \"Exp\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.exp(value), [\"float32\"]),\n        },\n        {\n            opType: \"Floor\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.floor(value), [\"float32\"]),\n        },\n        {\n            opType: \"HardSwish\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => {\n                if (value <= -3) {\n                    return 0;\n                }\n                else if (value >= 3) {\n                    return value;\n                }\n                else {\n                    return (value * (value + 3)) / 6;\n                }\n            }, [\"float32\"]),\n        },\n        {\n            opType: \"Log\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.log(value), [\"float32\"]),\n        },\n        {\n            opType: \"Neg\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => -value, [\"float32\", \"int32\"]),\n        },\n        {\n            opType: \"Reciprocal\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => 1 / value, [\"float32\"]),\n        },\n        {\n            opType: \"Relu\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.max(value, 0), [\"float32\", \"int32\"]),\n        },\n        {\n            opType: \"Round\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.round(value), [\"float32\"]),\n        },\n        {\n            opType: \"Sigmoid\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => (Math.tanh(value / 2) + 1) / 2, [\"float32\"]),\n        },\n        {\n            opType: \"Sign\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.sign(value), [\"float32\", \"int32\"]),\n        },\n        {\n            opType: \"Sin\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.sin(value), [\"float32\"]),\n        },\n        {\n            opType: \"Softplus\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.log(Math.exp(value) + 1), [\"float32\"]),\n        },\n        {\n            opType: \"Softsign\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => value / (1 + Math.abs(value)), [\"float32\"]),\n        },\n        {\n            opType: \"Sqrt\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.sqrt(value), [\"float32\"]),\n        },\n        {\n            opType: \"Tan\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.tan(value), [\"float32\"]),\n        },\n        {\n            opType: \"Tanh\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            factory: () => new CPUUnary((value) => Math.tanh(value), [\"float32\"]),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/unary.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/operators/standard/unsqueeze.ts":
/*!*****************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/operators/standard/unsqueeze.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.CPUUnsqueeze13 = exports.CPUUnsqueeze1 = void 0;\nconst unsqueeze_1 = __webpack_require__(/*! ../../../base/unsqueeze */ \"./src/descriptor_runner/operators/base/unsqueeze.ts\");\nclass CPUUnsqueeze1 extends unsqueeze_1.Unsqueeze1 {\n    constructor() {\n        super(\"cpu\");\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const input = inputs[0], newShape = this.calcShape(input), output = context.emptyTensor(newShape, input.dataType, input.data);\n        return [output];\n    }\n}\nexports.CPUUnsqueeze1 = CPUUnsqueeze1;\nclass CPUUnsqueeze13 extends unsqueeze_1.Unsqueeze13 {\n    constructor() {\n        super(\"cpu\");\n    }\n    async run(context, inputs) {\n        context.assertsCPUTensorArray(inputs);\n        const input = inputs[0], axes = inputs[1], newShape = this.calcShape(input, axes), output = context.emptyTensor(newShape, input.dataType, input.data);\n        return [output];\n    }\n}\nexports.CPUUnsqueeze13 = CPUUnsqueeze13;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Unsqueeze\",\n            backend: \"cpu\",\n            opsetMin: 13,\n            factory: () => new CPUUnsqueeze13(),\n        },\n        {\n            opType: \"Unsqueeze\",\n            backend: \"cpu\",\n            opsetMin: 1,\n            opsetMax: 13,\n            factory: () => new CPUUnsqueeze1(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/operators/standard/unsqueeze.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/cpu/rawcomputation/averagepool.ts":
/*!***************************************************************************!*\
  !*** ./src/descriptor_runner/operators/cpu/rawcomputation/averagepool.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.averagepool = void 0;\nfunction averagepool(dX, dI, countIncludePad, batch, kernelShape, pads, strides, inShape, outShape, ch) {\n    let idx = 0;\n    for (let b = 0; b < batch; b++) {\n        for (let c = 0; c < ch; c++) {\n            for (let oy = 0; oy < outShape[0]; oy++) {\n                for (let ox = 0; ox < outShape[1]; ox++) {\n                    let ctr = 0, sum = 0;\n                    for (let ky = 0; ky < kernelShape[0]; ky++) {\n                        for (let kx = 0; kx < kernelShape[1]; kx++) {\n                            const iny = oy * strides[0] - pads[0] + ky, inx = ox * strides[1] - pads[1] + kx;\n                            if (iny >= 0 &&\n                                iny < inShape[0] &&\n                                inx >= 0 &&\n                                inx < inShape[1]) {\n                                const xidx = ((b * ch + c) * inShape[0] + iny) * inShape[1] + inx, v = dX[xidx];\n                                sum += v;\n                                ctr++;\n                            }\n                        }\n                    }\n                    dI[idx++] = countIncludePad\n                        ? sum / (kernelShape[0] * kernelShape[1])\n                        : sum / ctr;\n                }\n            }\n        }\n    }\n}\nexports.averagepool = averagepool;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/cpu/rawcomputation/averagepool.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/operatorImpl.ts":
/*!*********************************************************!*\
  !*** ./src/descriptor_runner/operators/operatorImpl.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OperatorImpl = void 0;\nclass OperatorImpl {\n    constructor(backend) {\n        this.backend = backend;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function\n    initialize(attribute) { }\n    getTensorBackendRequirement(nInputs, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    nOutputs) {\n        const backends = [];\n        for (let i = 0; i < nInputs; i++) {\n            backends.push(this.backend);\n        }\n        return backends;\n    }\n}\nexports.OperatorImpl = OperatorImpl;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/operatorImpl.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/operatorUtil.ts":
/*!*********************************************************!*\
  !*** ./src/descriptor_runner/operators/operatorUtil.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.broadcastMulti = exports.broadcastUni = exports.calcStrides = exports.arrayEqual = exports.arrayProd = exports.arraySum = exports.getAttrString = exports.getAttrTensor = exports.getAttrInts = exports.getAttrInt = exports.getAttrFloat = void 0;\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"./node_modules/long/src/long.js\"));\nconst onnx_proto_1 = __webpack_require__(/*! onnx-proto */ \"./node_modules/onnx-proto/dist/onnx.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"./src/descriptor_runner/util.ts\");\nfunction getAttr(attribute, name) {\n    for (const attr of attribute) {\n        if (attr.name === name) {\n            return attr;\n        }\n    }\n    return null;\n}\nfunction getAttrFloat(attribute, name, defaultValue) {\n    const attr = getAttr(attribute, name);\n    if (!attr) {\n        return defaultValue;\n    }\n    const v = attr.f;\n    if (v == null) {\n        throw new Error(`Attribute ${name} is not float`);\n    }\n    return v;\n}\nexports.getAttrFloat = getAttrFloat;\nfunction getAttrInt(attribute, name, defaultValue) {\n    const attr = getAttr(attribute, name);\n    if (!attr) {\n        return defaultValue;\n    }\n    const v = attr.i;\n    if (v == null) {\n        throw new Error(`Attribute ${name} is not int`);\n    }\n    return util_1.intOrLongToInt(v);\n}\nexports.getAttrInt = getAttrInt;\nfunction getAttrInts(attribute, name, defaultValue) {\n    const attr = getAttr(attribute, name);\n    if (!attr) {\n        return defaultValue;\n    }\n    const v = attr.ints;\n    if (v == null) {\n        throw new Error(`Attribute ${name} is not int`);\n    }\n    return util_1.intOrLongToIntVector(v);\n}\nexports.getAttrInts = getAttrInts;\nfunction getAttrTensor(attribute, name) {\n    const attr = getAttr(attribute, name);\n    if (!attr) {\n        return null;\n    }\n    const v = attr.t;\n    if (v == null) {\n        throw new Error(`Attribute ${name} is not int`);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const dims = util_1.intOrLongToIntVector(v.dims), { rawData } = v;\n    if (!rawData) {\n        throw new Error(`rawData in TensorProto is empty`);\n    }\n    switch (v.dataType) {\n        case onnx_proto_1.onnx.TensorProto.DataType.FLOAT: {\n            const data = new Uint8Array(rawData.length);\n            data.set(rawData);\n            const ab = new Float32Array(data.buffer, 0, data.length / Float32Array.BYTES_PER_ELEMENT);\n            return { dims, dataType: \"float32\", data: ab };\n        }\n        case onnx_proto_1.onnx.TensorProto.DataType.INT64: {\n            // 1要素が8byte (int64)\n            const view = new DataView(rawData.buffer, rawData.byteOffset, rawData.byteLength), ab = new Int32Array(view.byteLength / 8);\n            for (let idx = 0; idx < ab.length; idx++) {\n                ab[idx] = util_1.clipLong(new long_1.default(view.getUint32(idx * 8, true), view.getUint32(idx * 8 + 4, true)));\n            }\n            return { dims, dataType: \"int32\", data: ab };\n        }\n        default:\n            throw new Error(`dataType ${v.dataType} of TensorProto is not supported`);\n    }\n}\nexports.getAttrTensor = getAttrTensor;\nfunction getAttrString(attribute, name, defaultValue) {\n    const attr = getAttr(attribute, name);\n    if (!attr) {\n        return defaultValue;\n    }\n    // Only ASCII chars are considered\n    const v = attr.s;\n    if (v == null) {\n        throw new Error(`Attribute ${name} is not string`);\n    }\n    return String.fromCharCode(...Array.from(v));\n}\nexports.getAttrString = getAttrString;\nfunction arraySum(vec) {\n    let x = 0;\n    for (let i = 0; i < vec.length; i++) {\n        x += vec[i];\n    }\n    return x;\n}\nexports.arraySum = arraySum;\nfunction arrayProd(vec) {\n    let x = 1;\n    for (let i = 0; i < vec.length; i++) {\n        x *= vec[i];\n    }\n    return x;\n}\nexports.arrayProd = arrayProd;\nfunction arrayEqual(vec1, vec2) {\n    if (vec1.length !== vec2.length) {\n        return false;\n    }\n    for (let i = 0; i < vec1.length; i++) {\n        if (vec1[i] !== vec2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.arrayEqual = arrayEqual;\nfunction calcStrides(dims) {\n    const strides = [];\n    let length = 1;\n    for (let i = dims.length - 1; i >= 0; i--) {\n        strides.unshift(length);\n        length *= dims[i];\n    }\n    return strides;\n}\nexports.calcStrides = calcStrides;\nfunction broadcastUni(dimsA, dimsB) {\n    /*\n     * 行列Bを行列Aのshapeに合うようにbroadcast\n     * 行列Bのstridesを返す\n     */\n    if (dimsA.length < dimsB.length) {\n        throw new Error(`Unidirectional broadcast error: ${dimsA}, ${dimsB}`);\n    }\n    // Step1 次元数が合うように先頭に1を付加\n    const expandedDimsB = dimsB.slice();\n    while (expandedDimsB.length < dimsA.length) {\n        expandedDimsB.unshift(1);\n    }\n    const stridesB = calcStrides(expandedDimsB);\n    // Step2 行列Bの次元サイズが1の箇所はstrideを0にする\n    for (let i = 0; i < dimsA.length; i++) {\n        if (dimsA[i] !== expandedDimsB[i]) {\n            if (expandedDimsB[i] === 1) {\n                // Broadcast\n                stridesB[i] = 0;\n            }\n            else {\n                throw new Error(`Unidirectional broadcast error: ${dimsA}, ${dimsB}`);\n            }\n        }\n    }\n    return stridesB;\n}\nexports.broadcastUni = broadcastUni;\nfunction broadcastMulti(allDims) {\n    // 全行列をbroadcast\n    const expandedNdims = Math.max(...allDims.map((dims) => dims.length)), \n    // Step1 次元数が合うように先頭に1を付加\n    expandedAllDims = allDims.map((dims) => {\n        const expandedDims = dims.slice();\n        while (expandedDims.length < expandedNdims) {\n            expandedDims.unshift(1);\n        }\n        return expandedDims;\n    }), expandedDims = [];\n    for (let i = 0; i < expandedNdims; i++) {\n        expandedDims.push(Math.max(...expandedAllDims.map((ad) => ad[i])));\n    }\n    // Step2 行列の次元サイズが1の箇所はstrideを0にする\n    const allStrides = expandedAllDims.map((dims) => {\n        const strides = calcStrides(dims);\n        for (let i = 0; i < expandedNdims; i++) {\n            if (dims[i] !== expandedDims[i]) {\n                if (dims[i] === 1) {\n                    strides[i] = 0;\n                }\n                else {\n                    throw new Error(`Multidirectional broadcasting error: ${allDims}`);\n                }\n            }\n        }\n        return strides;\n    });\n    return { dims: expandedDims, allStrides };\n}\nexports.broadcastMulti = broadcastMulti;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/operatorUtil.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/wasm/opEntriesStandard.ts":
/*!*******************************************************************!*\
  !*** ./src/descriptor_runner/operators/wasm/opEntriesStandard.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst binary7_1 = __webpack_require__(/*! ./operators/standard/binary7 */ \"./src/descriptor_runner/operators/wasm/operators/standard/binary7.ts\");\nconst dynamicunary_1 = __webpack_require__(/*! ./operators/standard/dynamicunary */ \"./src/descriptor_runner/operators/wasm/operators/standard/dynamicunary.ts\");\nconst flatten_1 = __webpack_require__(/*! ./operators/standard/flatten */ \"./src/descriptor_runner/operators/wasm/operators/standard/flatten.ts\");\nconst gemm_1 = __webpack_require__(/*! ./operators/standard/gemm */ \"./src/descriptor_runner/operators/wasm/operators/standard/gemm.ts\");\nconst reshape5_1 = __webpack_require__(/*! ./operators/standard/reshape5 */ \"./src/descriptor_runner/operators/wasm/operators/standard/reshape5.ts\");\nconst squeeze_1 = __webpack_require__(/*! ./operators/standard/squeeze */ \"./src/descriptor_runner/operators/wasm/operators/standard/squeeze.ts\");\nconst unary_1 = __webpack_require__(/*! ./operators/standard/unary */ \"./src/descriptor_runner/operators/wasm/operators/standard/unary.ts\");\nconst unsqueeze_1 = __webpack_require__(/*! ./operators/standard/unsqueeze */ \"./src/descriptor_runner/operators/wasm/operators/standard/unsqueeze.ts\");\nfunction getOpEntries() {\n    const entries = [];\n    entries.push(...binary7_1.getOpEntries());\n    entries.push(...dynamicunary_1.getOpEntries());\n    entries.push(...flatten_1.getOpEntries());\n    entries.push(...gemm_1.getOpEntries());\n    entries.push(...reshape5_1.getOpEntries());\n    entries.push(...squeeze_1.getOpEntries());\n    entries.push(...unary_1.getOpEntries());\n    entries.push(...unsqueeze_1.getOpEntries());\n    return entries;\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/wasm/opEntriesStandard.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/wasm/operators/standard/binary7.ts":
/*!****************************************************************************!*\
  !*** ./src/descriptor_runner/operators/wasm/operators/standard/binary7.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nclass WasmBinary7 extends operatorImpl_1.OperatorImpl {\n    constructor(kernelName) {\n        super(\"wasm\");\n        this.kernelName = kernelName;\n    }\n    async run(context, inputs) {\n        context.assertsWasmTensorArray(inputs);\n        const inputA = inputs[0], inputB = inputs[1];\n        if (inputA.dataType !== \"float32\" || inputB.dataType !== \"float32\") {\n            throw new Error(\"Only float32 is supported\");\n        }\n        const { dims: outShape, allStrides: inAllStrides } = operatorUtil_1.broadcastMulti([\n            inputA.dims,\n            inputB.dims,\n        ]);\n        const output = context.emptyTensor(outShape, inputA.dataType);\n        const args = [\n            { type: \"tensor\", value: inputA },\n            { type: \"tensor\", value: inputB },\n            { type: \"tensor\", value: output },\n            ...outShape.map((v) => ({ type: \"int32\", value: v })),\n            ...inAllStrides[0].map((v) => ({ type: \"int32\", value: v })),\n            ...inAllStrides[1].map((v) => ({ type: \"int32\", value: v })),\n        ];\n        context.runKernel(`kernel_${this.kernelName}_d${outShape.length}`, args);\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Add\",\n            backend: \"wasm\",\n            opsetMin: 7,\n            factory: () => new WasmBinary7(\"add\"),\n        },\n        {\n            opType: \"Sub\",\n            backend: \"wasm\",\n            opsetMin: 7,\n            factory: () => new WasmBinary7(\"sub\"),\n        },\n        {\n            opType: \"Mul\",\n            backend: \"wasm\",\n            opsetMin: 7,\n            factory: () => new WasmBinary7(\"mul\"),\n        },\n        {\n            opType: \"Div\",\n            backend: \"wasm\",\n            opsetMin: 7,\n            factory: () => new WasmBinary7(\"div\"),\n        },\n        {\n            opType: \"Pow\",\n            backend: \"wasm\",\n            opsetMin: 7,\n            factory: () => new WasmBinary7(\"pow\"),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/wasm/operators/standard/binary7.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/wasm/operators/standard/dynamicunary.ts":
/*!*********************************************************************************!*\
  !*** ./src/descriptor_runner/operators/wasm/operators/standard/dynamicunary.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nclass WasmDynamicUnary extends operatorImpl_1.OperatorImpl {\n    constructor(kernelName) {\n        super(\"wasm\");\n        this.kernelName = kernelName;\n    }\n    async run(context, inputs) {\n        context.assertsWasmTensorArray(inputs);\n        const input = inputs[0];\n        if (input.dataType !== \"float32\") {\n            throw new Error(\"Only float32 is supported\");\n        }\n        const output = context.emptyTensor(input.dims, input.dataType);\n        context.runKernel(this.kernelName, [\n            { type: \"tensor\", value: input },\n            { type: \"tensor\", value: output },\n            { type: \"int32\", value: input.length },\n            ...this.getKernelArgs(),\n        ]);\n        return [output];\n    }\n}\nclass WasmLeakyRelu extends WasmDynamicUnary {\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.alpha = operatorUtil_1.getAttrFloat(attribute, \"alpha\", 0.01);\n    }\n    getKernelArgs() {\n        return [{ type: \"float32\", value: this.alpha }];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"LeakyRelu\",\n            backend: \"wasm\",\n            opsetMin: 1,\n            factory: () => new WasmLeakyRelu(\"kernel_leakyrelu\"),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/wasm/operators/standard/dynamicunary.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/wasm/operators/standard/flatten.ts":
/*!****************************************************************************!*\
  !*** ./src/descriptor_runner/operators/wasm/operators/standard/flatten.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst flatten_1 = __webpack_require__(/*! ../../../base/flatten */ \"./src/descriptor_runner/operators/base/flatten.ts\");\nclass WasmFlatten extends flatten_1.Flatten {\n    constructor() {\n        super(\"wasm\");\n    }\n    async run(context, inputs) {\n        // TODO: avoid copy\n        const input = inputs[0];\n        context.assertsWasmTensor(input);\n        const computedShape = this.calcShape(input), output = context.emptyTensor(computedShape, input.dataType);\n        context.runKernel(\"kernel_copy\", [\n            { type: \"tensor\", value: input },\n            { type: \"tensor\", value: output },\n            { type: \"int32\", value: output.length },\n        ]);\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Flatten\",\n            backend: \"wasm\",\n            opsetMin: 1,\n            factory: () => new WasmFlatten(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/wasm/operators/standard/flatten.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/wasm/operators/standard/gemm.ts":
/*!*************************************************************************!*\
  !*** ./src/descriptor_runner/operators/wasm/operators/standard/gemm.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst gemm_1 = __webpack_require__(/*! ../../../base/gemm */ \"./src/descriptor_runner/operators/base/gemm.ts\");\nclass WasmGemm extends gemm_1.Gemm {\n    constructor() {\n        super(\"wasm\");\n    }\n    async run(context, inputs) {\n        context.assertsWasmTensorArray(inputs);\n        const [inputA, inputB, inputC] = inputs;\n        const { m, n, k } = this.calcShape(inputA.dims, inputB.dims);\n        const output = context.emptyTensor([m, n]);\n        if (this.alpha !== 1.0) {\n            throw new Error(\"Gemm: alpha !== 1.0 is not yet supported\");\n        }\n        if (inputC) {\n            if (this.beta !== 1.0) {\n                throw new Error(\"Gemm: beta !== 1.0 is not yet supported\");\n            }\n            context.runKernel(`kernel_gemm_transa${this.transA ? \"1\" : \"0\"}_transb${this.transB ? \"1\" : \"0\"}_c`, [\n                { type: \"tensor\", value: inputA },\n                { type: \"tensor\", value: inputB },\n                { type: \"tensor\", value: inputC },\n                { type: \"tensor\", value: output },\n                { type: \"int32\", value: m },\n                { type: \"int32\", value: n },\n                { type: \"int32\", value: k },\n            ]);\n        }\n        else {\n            context.runKernel(`kernel_gemm_transa${this.transA ? \"1\" : \"0\"}_transb${this.transB ? \"1\" : \"0\"}`, [\n                { type: \"tensor\", value: inputA },\n                { type: \"tensor\", value: inputB },\n                { type: \"tensor\", value: output },\n                { type: \"int32\", value: m },\n                { type: \"int32\", value: n },\n                { type: \"int32\", value: k },\n            ]);\n        }\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Gemm\",\n            backend: \"wasm\",\n            opsetMin: 1,\n            factory: () => new WasmGemm(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/wasm/operators/standard/gemm.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/wasm/operators/standard/reshape5.ts":
/*!*****************************************************************************!*\
  !*** ./src/descriptor_runner/operators/wasm/operators/standard/reshape5.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst reshape5_1 = __webpack_require__(/*! ../../../base/reshape5 */ \"./src/descriptor_runner/operators/base/reshape5.ts\");\nclass WasmReshape5 extends reshape5_1.Reshape5 {\n    constructor() {\n        super(\"wasm\");\n    }\n    getTensorBackendRequirement(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    nInputs, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    nOutputs) {\n        return [\"wasm\", \"cpu\"];\n    }\n    async run(context, inputs) {\n        // TODO: avoid copy\n        const input = inputs[0], shapeTensor = inputs[1];\n        context.assertsWasmTensor(input);\n        context.cpuContext.assertsCPUTensor(shapeTensor);\n        const computedShape = this.calcShape(input, shapeTensor), output = context.emptyTensor(computedShape, input.dataType);\n        context.runKernel(\"kernel_copy\", [\n            { type: \"tensor\", value: input },\n            { type: \"tensor\", value: output },\n            { type: \"int32\", value: output.length },\n        ]);\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Reshape\",\n            backend: \"wasm\",\n            opsetMin: 5,\n            factory: () => new WasmReshape5(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/wasm/operators/standard/reshape5.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/wasm/operators/standard/squeeze.ts":
/*!****************************************************************************!*\
  !*** ./src/descriptor_runner/operators/wasm/operators/standard/squeeze.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst squeeze_1 = __webpack_require__(/*! ../../../base/squeeze */ \"./src/descriptor_runner/operators/base/squeeze.ts\");\nclass WasmSqueeze1 extends squeeze_1.Squeeze1 {\n    constructor() {\n        super(\"wasm\");\n    }\n    async run(context, inputs) {\n        // TODO: avoid copy\n        const input = inputs[0];\n        context.assertsWasmTensor(input);\n        const computedShape = this.calcShape(input), output = context.emptyTensor(computedShape, input.dataType);\n        context.runKernel(\"kernel_copy\", [\n            { type: \"tensor\", value: input },\n            { type: \"tensor\", value: output },\n            { type: \"int32\", value: output.length },\n        ]);\n        return [output];\n    }\n}\nclass WasmSqueeze13 extends squeeze_1.Squeeze13 {\n    constructor() {\n        super(\"wasm\");\n    }\n    getTensorBackendRequirement(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    nInputs, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    nOutputs) {\n        return [\"wasm\", \"cpu\"];\n    }\n    async run(context, inputs) {\n        // TODO: avoid copy\n        const input = inputs[0], axes = inputs[1];\n        context.assertsWasmTensor(input);\n        context.cpuContext.assertsCPUTensor(axes);\n        const computedShape = this.calcShape(input, axes), output = context.emptyTensor(computedShape, input.dataType);\n        context.runKernel(\"kernel_copy\", [\n            { type: \"tensor\", value: input },\n            { type: \"tensor\", value: output },\n            { type: \"int32\", value: output.length },\n        ]);\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Squeeze\",\n            backend: \"wasm\",\n            opsetMin: 13,\n            factory: () => new WasmSqueeze13(),\n        },\n        {\n            opType: \"Squeeze\",\n            backend: \"wasm\",\n            opsetMin: 1,\n            opsetMax: 13,\n            factory: () => new WasmSqueeze1(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/wasm/operators/standard/squeeze.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/wasm/operators/standard/unary.ts":
/*!**************************************************************************!*\
  !*** ./src/descriptor_runner/operators/wasm/operators/standard/unary.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nclass WasmUnary extends operatorImpl_1.OperatorImpl {\n    constructor(kernelName) {\n        super(\"wasm\");\n        this.kernelName = kernelName;\n    }\n    async run(context, inputs) {\n        context.assertsWasmTensorArray(inputs);\n        const input = inputs[0];\n        if (input.dataType !== \"float32\") {\n            throw new Error(\"Only float32 is supported\");\n        }\n        const output = context.emptyTensor(input.dims, input.dataType);\n        context.runKernel(this.kernelName, [\n            { type: \"tensor\", value: input },\n            { type: \"tensor\", value: output },\n            { type: \"int32\", value: input.length },\n        ]);\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Ceil\",\n            backend: \"wasm\",\n            opsetMin: 1,\n            factory: () => new WasmUnary(\"kernel_ceil\"),\n        },\n        {\n            opType: \"Exp\",\n            backend: \"wasm\",\n            opsetMin: 1,\n            factory: () => new WasmUnary(\"kernel_exp\"),\n        },\n        {\n            opType: \"Floor\",\n            backend: \"wasm\",\n            opsetMin: 1,\n            factory: () => new WasmUnary(\"kernel_floor\"),\n        },\n        {\n            opType: \"Relu\",\n            backend: \"wasm\",\n            opsetMin: 1,\n            factory: () => new WasmUnary(\"kernel_relu\"),\n        },\n        {\n            opType: \"Sigmoid\",\n            backend: \"wasm\",\n            opsetMin: 1,\n            factory: () => new WasmUnary(\"kernel_sigmoid\"),\n        },\n        {\n            opType: \"Sqrt\",\n            backend: \"wasm\",\n            opsetMin: 1,\n            factory: () => new WasmUnary(\"kernel_sqrt\"),\n        },\n        {\n            opType: \"Tanh\",\n            backend: \"wasm\",\n            opsetMin: 1,\n            factory: () => new WasmUnary(\"kernel_tanh\"),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/wasm/operators/standard/unary.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/wasm/operators/standard/unsqueeze.ts":
/*!******************************************************************************!*\
  !*** ./src/descriptor_runner/operators/wasm/operators/standard/unsqueeze.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst unsqueeze_1 = __webpack_require__(/*! ../../../base/unsqueeze */ \"./src/descriptor_runner/operators/base/unsqueeze.ts\");\nclass WasmUnsqueeze1 extends unsqueeze_1.Unsqueeze1 {\n    constructor() {\n        super(\"wasm\");\n    }\n    async run(context, inputs) {\n        // TODO: avoid copy\n        const input = inputs[0];\n        context.assertsWasmTensor(input);\n        const computedShape = this.calcShape(input), output = context.emptyTensor(computedShape, input.dataType);\n        context.runKernel(\"kernel_copy\", [\n            { type: \"tensor\", value: input },\n            { type: \"tensor\", value: output },\n            { type: \"int32\", value: output.length },\n        ]);\n        return [output];\n    }\n}\nclass WasmUnsqueeze13 extends unsqueeze_1.Unsqueeze13 {\n    constructor() {\n        super(\"wasm\");\n    }\n    getTensorBackendRequirement(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    nInputs, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    nOutputs) {\n        return [\"wasm\", \"cpu\"];\n    }\n    async run(context, inputs) {\n        // TODO: avoid copy\n        const input = inputs[0], axes = inputs[1];\n        context.assertsWasmTensor(input);\n        context.cpuContext.assertsCPUTensor(axes);\n        const computedShape = this.calcShape(input, axes), output = context.emptyTensor(computedShape, input.dataType);\n        context.runKernel(\"kernel_copy\", [\n            { type: \"tensor\", value: input },\n            { type: \"tensor\", value: output },\n            { type: \"int32\", value: output.length },\n        ]);\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Unsqueeze\",\n            backend: \"wasm\",\n            opsetMin: 13,\n            factory: () => new WasmUnsqueeze13(),\n        },\n        {\n            opType: \"Unsqueeze\",\n            backend: \"wasm\",\n            opsetMin: 1,\n            opsetMax: 13,\n            factory: () => new WasmUnsqueeze1(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/wasm/operators/standard/unsqueeze.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/wasm/worker/worker.ts":
/*!***************************************************************!*\
  !*** ./src/descriptor_runner/operators/wasm/worker/worker.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.wasmWorkerSrcUrl = void 0;\n/* eslint-disable */\nexports.wasmWorkerSrcUrl = URL.createObjectURL(new File([`var Module=typeof Module!=\"undefined\"?Module:{};(function(){var buffers={};onmessage=function(event){switch(event.data.type){case\"alloc\":var result=Module._webdnn_malloc(event.data.byteLength);if(result===0){postMessage({type:\"error\",message:\"Memory alloc failed\"})}else{buffers[event.data.bufferId]={byteLength:event.data.byteLength,ptr:result}}break;case\"destroy\":var buffer=buffers[event.data.bufferId];if(buffer){Module._webdnn_free(buffer.ptr);delete buffers[event.data.bufferId]}else{postMessage({type:\"error\",message:\"Destroying non-existing buffer\"})}break;case\"write\":var buffer=buffers[event.data.bufferId];if(buffer){var dataBufView=new Uint8Array(Module.HEAPU8.buffer,buffer.ptr,buffer.byteLength);dataBufView.set(event.data.data)}else{postMessage({type:\"error\",message:\"Writing non-existing buffer\"})}break;case\"read\":var buffer=buffers[event.data.bufferId];if(buffer){var dataBufView=new Uint8Array(Module.HEAPU8.buffer,buffer.ptr,buffer.byteLength);var result=new Uint8Array(buffer.byteLength);result.set(dataBufView);postMessage({type:\"read\",data:result})}else{postMessage({type:\"error\",message:\"Reading non-existing buffer\"})}break;case\"runKernel\":var kernelFunction=Module[\"_\"+event.data.name];if(kernelFunction){var args=[];var ok=true;for(var i=0;i<event.data.args.length;i++){var arg=event.data.args[i];if(arg.type===\"tensor\"){var buffer=buffers[arg.bufferId];if(!buffer){ok=false;postMessage({type:\"error\",message:\"Tensor argument of kernel call does not exist\"})}args.push(buffer.ptr)}else{args.push(arg.value)}}if(ok){kernelFunction.apply(null,args)}}else{postMessage({type:\"error\",message:\"Kernel not found\"})}break}};Module.onRuntimeInitialized=function(){postMessage({type:\"initializeComplete\"})};var bstr=atob(\"\");var ary=new Uint8Array(bstr.length);for(var i=0;i<bstr.length;i++){ary[i]=bstr.charCodeAt(i)}Module.wasmBinary=ary})();var moduleOverrides=Object.assign({},Module);var arguments_=[];var thisProgram=\"./this.program\";var quit_=(status,toThrow)=>{throw toThrow};var ENVIRONMENT_IS_WEB=typeof window==\"object\";var ENVIRONMENT_IS_WORKER=typeof importScripts==\"function\";var ENVIRONMENT_IS_NODE=typeof process==\"object\"&&typeof process.versions==\"object\"&&typeof process.versions.node==\"string\";var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;function logExceptionOnExit(e){if(e instanceof ExitStatus)return;let toLog=e;if(e&&typeof e==\"object\"&&e.stack){toLog=[e,e.stack]}err(\"exiting due to exception: \"+toLog)}if(ENVIRONMENT_IS_NODE){var fs=require(\"fs\");var nodePath=require(\"path\");if(ENVIRONMENT_IS_WORKER){scriptDirectory=nodePath.dirname(scriptDirectory)+\"/\"}else{scriptDirectory=__dirname+\"/\"}read_=(filename,binary)=>{filename=isFileURI(filename)?new URL(filename):nodePath.normalize(filename);return fs.readFileSync(filename,binary?undefined:\"utf8\")};readBinary=filename=>{var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}return ret};readAsync=(filename,onload,onerror)=>{filename=isFileURI(filename)?new URL(filename):nodePath.normalize(filename);fs.readFile(filename,function(err,data){if(err)onerror(err);else onload(data.buffer)})};if(process.argv.length>1){thisProgram=process.argv[1].replace(/\\\\\\\\/g,\"/\")}arguments_=process.argv.slice(2);if(typeof module!=\"undefined\"){module[\"exports\"]=Module}process.on(\"uncaughtException\",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});var nodeMajor=process.versions.node.split(\".\")[0];if(nodeMajor<15){process.on(\"unhandledRejection\",function(reason){throw reason})}quit_=(status,toThrow)=>{if(keepRuntimeAlive()){process.exitCode=status;throw toThrow}logExceptionOnExit(toThrow);process.exit(status)};Module[\"inspect\"]=function(){return\"[Emscripten Module object]\"}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!=\"undefined\"&&document.currentScript){scriptDirectory=document.currentScript.src}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=url=>{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=url=>{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=(url,onload,onerror)=>{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=()=>{if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=title=>document.title=title}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);Object.assign(Module,moduleOverrides);moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime=Module[\"noExitRuntime\"]||true;if(typeof WebAssembly!=\"object\"){abort(\"no native wasm support detected\")}var wasmMemory;var ABORT=false;var EXITSTATUS;var UTF8Decoder=typeof TextDecoder!=\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(heapOrArray,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heapOrArray[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heapOrArray.buffer&&UTF8Decoder){return UTF8Decoder.decode(heapOrArray.subarray(idx,endPtr))}var str=\"\";while(idx<endPtr){var u0=heapOrArray[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heapOrArray[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heapOrArray[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heapOrArray[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\"}var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateMemoryViews(){var b=wasmMemory.buffer;Module[\"HEAP8\"]=HEAP8=new Int8Array(b);Module[\"HEAP16\"]=HEAP16=new Int16Array(b);Module[\"HEAP32\"]=HEAP32=new Int32Array(b);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(b);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(b);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(b);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(b);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(b)}var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function keepRuntimeAlive(){return noExitRuntime}function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what=\"Aborted(\"+what+\")\";err(what);ABORT=true;EXITSTATUS=1;what+=\". Build with -sASSERTIONS for more info.\";var e=new WebAssembly.RuntimeError(what);throw e}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return filename.startsWith(dataURIPrefix)}function isFileURI(filename){return filename.startsWith(\"file://\")}var wasmBinaryFile;wasmBinaryFile=\"workerRaw.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(file)}throw\"both async and sync fetching of the wasm failed\"}catch(err){abort(err)}}function getBinaryPromise(binaryFile){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch==\"function\"&&!isFileURI(binaryFile)){return fetch(binaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+binaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary(binaryFile)})}else{if(readAsync){return new Promise(function(resolve,reject){readAsync(binaryFile,function(response){resolve(new Uint8Array(response))},reject)})}}}return Promise.resolve().then(function(){return getBinary(binaryFile)})}function instantiateArrayBuffer(binaryFile,imports,receiver){return getBinaryPromise(binaryFile).then(function(binary){return WebAssembly.instantiate(binary,imports)}).then(function(instance){return instance}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(binary,binaryFile,imports,callback){if(!binary&&typeof WebAssembly.instantiateStreaming==\"function\"&&!isDataURI(binaryFile)&&!isFileURI(binaryFile)&&!ENVIRONMENT_IS_NODE&&typeof fetch==\"function\"){return fetch(binaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,imports);return result.then(callback,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(binaryFile,imports,callback)})})}else{return instantiateArrayBuffer(binaryFile,imports,callback)}}function createWasm(){var info={\"a\":wasmImports};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;wasmMemory=Module[\"asm\"][\"e\"];updateMemoryViews();wasmTable=Module[\"asm\"][\"i\"];addOnInit(Module[\"asm\"][\"f\"]);removeRunDependency(\"wasm-instantiate\");return exports}addRunDependency(\"wasm-instantiate\");function receiveInstantiationResult(result){receiveInstance(result[\"instance\"])}if(Module[\"instantiateWasm\"]){try{return Module[\"instantiateWasm\"](info,receiveInstance)}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync(wasmBinary,wasmBinaryFile,info,receiveInstantiationResult);return{}}function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){callbacks.shift()(Module)}}function ___assert_fail(condition,filename,line,func){abort(\"Assertion failed: \"+UTF8ToString(condition)+\", at: \"+[filename?UTF8ToString(filename):\"unknown filename\",line,func?UTF8ToString(func):\"unknown function\"])}function ExceptionInfo(excPtr){this.excPtr=excPtr;this.ptr=excPtr-24;this.set_type=function(type){HEAPU32[this.ptr+4>>2]=type};this.get_type=function(){return HEAPU32[this.ptr+4>>2]};this.set_destructor=function(destructor){HEAPU32[this.ptr+8>>2]=destructor};this.get_destructor=function(){return HEAPU32[this.ptr+8>>2]};this.set_refcount=function(refcount){HEAP32[this.ptr>>2]=refcount};this.set_caught=function(caught){caught=caught?1:0;HEAP8[this.ptr+12>>0]=caught};this.get_caught=function(){return HEAP8[this.ptr+12>>0]!=0};this.set_rethrown=function(rethrown){rethrown=rethrown?1:0;HEAP8[this.ptr+13>>0]=rethrown};this.get_rethrown=function(){return HEAP8[this.ptr+13>>0]!=0};this.init=function(type,destructor){this.set_adjusted_ptr(0);this.set_type(type);this.set_destructor(destructor);this.set_refcount(0);this.set_caught(false);this.set_rethrown(false)};this.add_ref=function(){var value=HEAP32[this.ptr>>2];HEAP32[this.ptr>>2]=value+1};this.release_ref=function(){var prev=HEAP32[this.ptr>>2];HEAP32[this.ptr>>2]=prev-1;return prev===1};this.set_adjusted_ptr=function(adjustedPtr){HEAPU32[this.ptr+16>>2]=adjustedPtr};this.get_adjusted_ptr=function(){return HEAPU32[this.ptr+16>>2]};this.get_exception_ptr=function(){var isPointer=___cxa_is_pointer_type(this.get_type());if(isPointer){return HEAPU32[this.excPtr>>2]}var adjusted=this.get_adjusted_ptr();if(adjusted!==0)return adjusted;return this.excPtr}}var exceptionLast=0;var uncaughtExceptionCount=0;function ___cxa_throw(ptr,type,destructor){var info=new ExceptionInfo(ptr);info.init(type,destructor);exceptionLast=ptr;uncaughtExceptionCount++;throw ptr}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function getHeapMax(){return 2147483648}function emscripten_realloc_buffer(size){var b=wasmMemory.buffer;try{wasmMemory.grow(size-b.byteLength+65535>>>16);updateMemoryViews();return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){var oldSize=HEAPU8.length;requestedSize=requestedSize>>>0;var maxHeapSize=getHeapMax();if(requestedSize>maxHeapSize){return false}let alignUp=(x,multiple)=>x+(multiple-x%multiple)%multiple;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var wasmImports={\"a\":___assert_fail,\"b\":___cxa_throw,\"d\":_emscripten_memcpy_big,\"c\":_emscripten_resize_heap};var asm=createWasm();var ___wasm_call_ctors=function(){return(___wasm_call_ctors=Module[\"asm\"][\"f\"]).apply(null,arguments)};var _webdnn_malloc=Module[\"_webdnn_malloc\"]=function(){return(_webdnn_malloc=Module[\"_webdnn_malloc\"]=Module[\"asm\"][\"g\"]).apply(null,arguments)};var _webdnn_free=Module[\"_webdnn_free\"]=function(){return(_webdnn_free=Module[\"_webdnn_free\"]=Module[\"asm\"][\"h\"]).apply(null,arguments)};var _kernel_add_d0=Module[\"_kernel_add_d0\"]=function(){return(_kernel_add_d0=Module[\"_kernel_add_d0\"]=Module[\"asm\"][\"j\"]).apply(null,arguments)};var _kernel_add_d1=Module[\"_kernel_add_d1\"]=function(){return(_kernel_add_d1=Module[\"_kernel_add_d1\"]=Module[\"asm\"][\"k\"]).apply(null,arguments)};var _kernel_add_d2=Module[\"_kernel_add_d2\"]=function(){return(_kernel_add_d2=Module[\"_kernel_add_d2\"]=Module[\"asm\"][\"l\"]).apply(null,arguments)};var _kernel_add_d3=Module[\"_kernel_add_d3\"]=function(){return(_kernel_add_d3=Module[\"_kernel_add_d3\"]=Module[\"asm\"][\"m\"]).apply(null,arguments)};var _kernel_add_d4=Module[\"_kernel_add_d4\"]=function(){return(_kernel_add_d4=Module[\"_kernel_add_d4\"]=Module[\"asm\"][\"n\"]).apply(null,arguments)};var _kernel_add_d5=Module[\"_kernel_add_d5\"]=function(){return(_kernel_add_d5=Module[\"_kernel_add_d5\"]=Module[\"asm\"][\"o\"]).apply(null,arguments)};var _kernel_add_d6=Module[\"_kernel_add_d6\"]=function(){return(_kernel_add_d6=Module[\"_kernel_add_d6\"]=Module[\"asm\"][\"p\"]).apply(null,arguments)};var _kernel_sub_d0=Module[\"_kernel_sub_d0\"]=function(){return(_kernel_sub_d0=Module[\"_kernel_sub_d0\"]=Module[\"asm\"][\"q\"]).apply(null,arguments)};var _kernel_sub_d1=Module[\"_kernel_sub_d1\"]=function(){return(_kernel_sub_d1=Module[\"_kernel_sub_d1\"]=Module[\"asm\"][\"r\"]).apply(null,arguments)};var _kernel_sub_d2=Module[\"_kernel_sub_d2\"]=function(){return(_kernel_sub_d2=Module[\"_kernel_sub_d2\"]=Module[\"asm\"][\"s\"]).apply(null,arguments)};var _kernel_sub_d3=Module[\"_kernel_sub_d3\"]=function(){return(_kernel_sub_d3=Module[\"_kernel_sub_d3\"]=Module[\"asm\"][\"t\"]).apply(null,arguments)};var _kernel_sub_d4=Module[\"_kernel_sub_d4\"]=function(){return(_kernel_sub_d4=Module[\"_kernel_sub_d4\"]=Module[\"asm\"][\"u\"]).apply(null,arguments)};var _kernel_sub_d5=Module[\"_kernel_sub_d5\"]=function(){return(_kernel_sub_d5=Module[\"_kernel_sub_d5\"]=Module[\"asm\"][\"v\"]).apply(null,arguments)};var _kernel_sub_d6=Module[\"_kernel_sub_d6\"]=function(){return(_kernel_sub_d6=Module[\"_kernel_sub_d6\"]=Module[\"asm\"][\"w\"]).apply(null,arguments)};var _kernel_mul_d0=Module[\"_kernel_mul_d0\"]=function(){return(_kernel_mul_d0=Module[\"_kernel_mul_d0\"]=Module[\"asm\"][\"x\"]).apply(null,arguments)};var _kernel_mul_d1=Module[\"_kernel_mul_d1\"]=function(){return(_kernel_mul_d1=Module[\"_kernel_mul_d1\"]=Module[\"asm\"][\"y\"]).apply(null,arguments)};var _kernel_mul_d2=Module[\"_kernel_mul_d2\"]=function(){return(_kernel_mul_d2=Module[\"_kernel_mul_d2\"]=Module[\"asm\"][\"z\"]).apply(null,arguments)};var _kernel_mul_d3=Module[\"_kernel_mul_d3\"]=function(){return(_kernel_mul_d3=Module[\"_kernel_mul_d3\"]=Module[\"asm\"][\"A\"]).apply(null,arguments)};var _kernel_mul_d4=Module[\"_kernel_mul_d4\"]=function(){return(_kernel_mul_d4=Module[\"_kernel_mul_d4\"]=Module[\"asm\"][\"B\"]).apply(null,arguments)};var _kernel_mul_d5=Module[\"_kernel_mul_d5\"]=function(){return(_kernel_mul_d5=Module[\"_kernel_mul_d5\"]=Module[\"asm\"][\"C\"]).apply(null,arguments)};var _kernel_mul_d6=Module[\"_kernel_mul_d6\"]=function(){return(_kernel_mul_d6=Module[\"_kernel_mul_d6\"]=Module[\"asm\"][\"D\"]).apply(null,arguments)};var _kernel_div_d0=Module[\"_kernel_div_d0\"]=function(){return(_kernel_div_d0=Module[\"_kernel_div_d0\"]=Module[\"asm\"][\"E\"]).apply(null,arguments)};var _kernel_div_d1=Module[\"_kernel_div_d1\"]=function(){return(_kernel_div_d1=Module[\"_kernel_div_d1\"]=Module[\"asm\"][\"F\"]).apply(null,arguments)};var _kernel_div_d2=Module[\"_kernel_div_d2\"]=function(){return(_kernel_div_d2=Module[\"_kernel_div_d2\"]=Module[\"asm\"][\"G\"]).apply(null,arguments)};var _kernel_div_d3=Module[\"_kernel_div_d3\"]=function(){return(_kernel_div_d3=Module[\"_kernel_div_d3\"]=Module[\"asm\"][\"H\"]).apply(null,arguments)};var _kernel_div_d4=Module[\"_kernel_div_d4\"]=function(){return(_kernel_div_d4=Module[\"_kernel_div_d4\"]=Module[\"asm\"][\"I\"]).apply(null,arguments)};var _kernel_div_d5=Module[\"_kernel_div_d5\"]=function(){return(_kernel_div_d5=Module[\"_kernel_div_d5\"]=Module[\"asm\"][\"J\"]).apply(null,arguments)};var _kernel_div_d6=Module[\"_kernel_div_d6\"]=function(){return(_kernel_div_d6=Module[\"_kernel_div_d6\"]=Module[\"asm\"][\"K\"]).apply(null,arguments)};var _kernel_pow_d0=Module[\"_kernel_pow_d0\"]=function(){return(_kernel_pow_d0=Module[\"_kernel_pow_d0\"]=Module[\"asm\"][\"L\"]).apply(null,arguments)};var _kernel_pow_d1=Module[\"_kernel_pow_d1\"]=function(){return(_kernel_pow_d1=Module[\"_kernel_pow_d1\"]=Module[\"asm\"][\"M\"]).apply(null,arguments)};var _kernel_pow_d2=Module[\"_kernel_pow_d2\"]=function(){return(_kernel_pow_d2=Module[\"_kernel_pow_d2\"]=Module[\"asm\"][\"N\"]).apply(null,arguments)};var _kernel_pow_d3=Module[\"_kernel_pow_d3\"]=function(){return(_kernel_pow_d3=Module[\"_kernel_pow_d3\"]=Module[\"asm\"][\"O\"]).apply(null,arguments)};var _kernel_pow_d4=Module[\"_kernel_pow_d4\"]=function(){return(_kernel_pow_d4=Module[\"_kernel_pow_d4\"]=Module[\"asm\"][\"P\"]).apply(null,arguments)};var _kernel_pow_d5=Module[\"_kernel_pow_d5\"]=function(){return(_kernel_pow_d5=Module[\"_kernel_pow_d5\"]=Module[\"asm\"][\"Q\"]).apply(null,arguments)};var _kernel_pow_d6=Module[\"_kernel_pow_d6\"]=function(){return(_kernel_pow_d6=Module[\"_kernel_pow_d6\"]=Module[\"asm\"][\"R\"]).apply(null,arguments)};var _kernel_copy=Module[\"_kernel_copy\"]=function(){return(_kernel_copy=Module[\"_kernel_copy\"]=Module[\"asm\"][\"S\"]).apply(null,arguments)};var _kernel_leakyrelu=Module[\"_kernel_leakyrelu\"]=function(){return(_kernel_leakyrelu=Module[\"_kernel_leakyrelu\"]=Module[\"asm\"][\"T\"]).apply(null,arguments)};var _kernel_gemm_transa0_transb0=Module[\"_kernel_gemm_transa0_transb0\"]=function(){return(_kernel_gemm_transa0_transb0=Module[\"_kernel_gemm_transa0_transb0\"]=Module[\"asm\"][\"U\"]).apply(null,arguments)};var _kernel_gemm_transa0_transb0_c=Module[\"_kernel_gemm_transa0_transb0_c\"]=function(){return(_kernel_gemm_transa0_transb0_c=Module[\"_kernel_gemm_transa0_transb0_c\"]=Module[\"asm\"][\"V\"]).apply(null,arguments)};var _kernel_gemm_transa0_transb1=Module[\"_kernel_gemm_transa0_transb1\"]=function(){return(_kernel_gemm_transa0_transb1=Module[\"_kernel_gemm_transa0_transb1\"]=Module[\"asm\"][\"W\"]).apply(null,arguments)};var _kernel_gemm_transa0_transb1_c=Module[\"_kernel_gemm_transa0_transb1_c\"]=function(){return(_kernel_gemm_transa0_transb1_c=Module[\"_kernel_gemm_transa0_transb1_c\"]=Module[\"asm\"][\"X\"]).apply(null,arguments)};var _kernel_gemm_transa1_transb0=Module[\"_kernel_gemm_transa1_transb0\"]=function(){return(_kernel_gemm_transa1_transb0=Module[\"_kernel_gemm_transa1_transb0\"]=Module[\"asm\"][\"Y\"]).apply(null,arguments)};var _kernel_gemm_transa1_transb0_c=Module[\"_kernel_gemm_transa1_transb0_c\"]=function(){return(_kernel_gemm_transa1_transb0_c=Module[\"_kernel_gemm_transa1_transb0_c\"]=Module[\"asm\"][\"Z\"]).apply(null,arguments)};var _kernel_gemm_transa1_transb1=Module[\"_kernel_gemm_transa1_transb1\"]=function(){return(_kernel_gemm_transa1_transb1=Module[\"_kernel_gemm_transa1_transb1\"]=Module[\"asm\"][\"_\"]).apply(null,arguments)};var _kernel_gemm_transa1_transb1_c=Module[\"_kernel_gemm_transa1_transb1_c\"]=function(){return(_kernel_gemm_transa1_transb1_c=Module[\"_kernel_gemm_transa1_transb1_c\"]=Module[\"asm\"][\"$\"]).apply(null,arguments)};var _kernel_ceil=Module[\"_kernel_ceil\"]=function(){return(_kernel_ceil=Module[\"_kernel_ceil\"]=Module[\"asm\"][\"aa\"]).apply(null,arguments)};var _kernel_exp=Module[\"_kernel_exp\"]=function(){return(_kernel_exp=Module[\"_kernel_exp\"]=Module[\"asm\"][\"ba\"]).apply(null,arguments)};var _kernel_floor=Module[\"_kernel_floor\"]=function(){return(_kernel_floor=Module[\"_kernel_floor\"]=Module[\"asm\"][\"ca\"]).apply(null,arguments)};var _kernel_relu=Module[\"_kernel_relu\"]=function(){return(_kernel_relu=Module[\"_kernel_relu\"]=Module[\"asm\"][\"da\"]).apply(null,arguments)};var _kernel_sigmoid=Module[\"_kernel_sigmoid\"]=function(){return(_kernel_sigmoid=Module[\"_kernel_sigmoid\"]=Module[\"asm\"][\"ea\"]).apply(null,arguments)};var _kernel_sqrt=Module[\"_kernel_sqrt\"]=function(){return(_kernel_sqrt=Module[\"_kernel_sqrt\"]=Module[\"asm\"][\"fa\"]).apply(null,arguments)};var _kernel_tanh=Module[\"_kernel_tanh\"]=function(){return(_kernel_tanh=Module[\"_kernel_tanh\"]=Module[\"asm\"][\"ga\"]).apply(null,arguments)};var ___errno_location=function(){return(___errno_location=Module[\"asm\"][\"__errno_location\"]).apply(null,arguments)};var ___cxa_is_pointer_type=function(){return(___cxa_is_pointer_type=Module[\"asm\"][\"ha\"]).apply(null,arguments)};var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(){if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}run();\n`], \"worker.js\", { type: \"text/javascript\" }));\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/wasm/worker/worker.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/opEntriesStandard.ts":
/*!********************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/opEntriesStandard.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst averagepool_1 = __webpack_require__(/*! ./operators/standard/averagepool */ \"./src/descriptor_runner/operators/webgl/operators/standard/averagepool.ts\");\nconst binary7_1 = __webpack_require__(/*! ./operators/standard/binary7 */ \"./src/descriptor_runner/operators/webgl/operators/standard/binary7.ts\");\nconst cast_1 = __webpack_require__(/*! ./operators/standard/cast */ \"./src/descriptor_runner/operators/webgl/operators/standard/cast.ts\");\nconst clip_1 = __webpack_require__(/*! ./operators/standard/clip */ \"./src/descriptor_runner/operators/webgl/operators/standard/clip.ts\");\nconst conv_1 = __webpack_require__(/*! ./operators/standard/conv */ \"./src/descriptor_runner/operators/webgl/operators/standard/conv.ts\");\nconst convtranspose_1 = __webpack_require__(/*! ./operators/standard/convtranspose */ \"./src/descriptor_runner/operators/webgl/operators/standard/convtranspose.ts\");\nconst flatten_1 = __webpack_require__(/*! ./operators/standard/flatten */ \"./src/descriptor_runner/operators/webgl/operators/standard/flatten.ts\");\nconst gemm_1 = __webpack_require__(/*! ./operators/standard/gemm */ \"./src/descriptor_runner/operators/webgl/operators/standard/gemm.ts\");\nconst globalaveragepool_1 = __webpack_require__(/*! ./operators/standard/globalaveragepool */ \"./src/descriptor_runner/operators/webgl/operators/standard/globalaveragepool.ts\");\nconst instancenormalization_1 = __webpack_require__(/*! ./operators/standard/instancenormalization */ \"./src/descriptor_runner/operators/webgl/operators/standard/instancenormalization.ts\");\nconst matmul_1 = __webpack_require__(/*! ./operators/standard/matmul */ \"./src/descriptor_runner/operators/webgl/operators/standard/matmul.ts\");\nconst maxpool_1 = __webpack_require__(/*! ./operators/standard/maxpool */ \"./src/descriptor_runner/operators/webgl/operators/standard/maxpool.ts\");\nconst pad11_1 = __webpack_require__(/*! ./operators/standard/pad11 */ \"./src/descriptor_runner/operators/webgl/operators/standard/pad11.ts\");\nconst reduce_1 = __webpack_require__(/*! ./operators/standard/reduce */ \"./src/descriptor_runner/operators/webgl/operators/standard/reduce.ts\");\nconst reshape5_1 = __webpack_require__(/*! ./operators/standard/reshape5 */ \"./src/descriptor_runner/operators/webgl/operators/standard/reshape5.ts\");\nconst softmax_1 = __webpack_require__(/*! ./operators/standard/softmax */ \"./src/descriptor_runner/operators/webgl/operators/standard/softmax.ts\");\nconst split_1 = __webpack_require__(/*! ./operators/standard/split */ \"./src/descriptor_runner/operators/webgl/operators/standard/split.ts\");\nconst squeeze_1 = __webpack_require__(/*! ./operators/standard/squeeze */ \"./src/descriptor_runner/operators/webgl/operators/standard/squeeze.ts\");\nconst transpose_1 = __webpack_require__(/*! ./operators/standard/transpose */ \"./src/descriptor_runner/operators/webgl/operators/standard/transpose.ts\");\nconst unary_1 = __webpack_require__(/*! ./operators/standard/unary */ \"./src/descriptor_runner/operators/webgl/operators/standard/unary.ts\");\nconst unsqueeze_1 = __webpack_require__(/*! ./operators/standard/unsqueeze */ \"./src/descriptor_runner/operators/webgl/operators/standard/unsqueeze.ts\");\nfunction getOpEntries() {\n    const entries = [];\n    entries.push(...averagepool_1.getOpEntries());\n    entries.push(...binary7_1.getOpEntries());\n    entries.push(...cast_1.getOpEntries());\n    entries.push(...clip_1.getOpEntries());\n    entries.push(...conv_1.getOpEntries());\n    entries.push(...convtranspose_1.getOpEntries());\n    entries.push(...flatten_1.getOpEntries());\n    entries.push(...gemm_1.getOpEntries());\n    entries.push(...globalaveragepool_1.getOpEntries());\n    entries.push(...instancenormalization_1.getOpEntries());\n    entries.push(...matmul_1.getOpEntries());\n    entries.push(...maxpool_1.getOpEntries());\n    entries.push(...pad11_1.getOpEntries());\n    entries.push(...reduce_1.getOpEntries());\n    entries.push(...reshape5_1.getOpEntries());\n    entries.push(...softmax_1.getOpEntries());\n    entries.push(...split_1.getOpEntries());\n    entries.push(...squeeze_1.getOpEntries());\n    entries.push(...transpose_1.getOpEntries());\n    entries.push(...unary_1.getOpEntries());\n    entries.push(...unsqueeze_1.getOpEntries());\n    return entries;\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/opEntriesStandard.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/averagepool.ts":
/*!*********************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/averagepool.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst averagepool_1 = __webpack_require__(/*! ../../../base/averagepool */ \"./src/descriptor_runner/operators/base/averagepool.ts\");\nconst averagepool_2 = __webpack_require__(/*! ../../rawcomputation/averagepool */ \"./src/descriptor_runner/operators/webgl/rawcomputation/averagepool.ts\");\n// Version 1, 7, 10, 11+\nclass WebGLAveragePool extends averagepool_1.AveragePool {\n    constructor() {\n        super(\"webgl\");\n    }\n    async run(context, inputs) {\n        context.assertsWebGLTensorArray(inputs);\n        const inputX = inputs[0];\n        // TODO: 2D以外対応\n        if (inputX.ndim !== 4) {\n            throw new Error(\"MaxPool other than 2D is not yet supported\");\n        }\n        if (inputX.dimPerPixel !== 1) {\n            throw new Error();\n        }\n        const { batch, kernelShape, pads, strides, inShape, outShape, ch } = this.calcShape(inputX.dims), output = context.emptyTensor([batch, ch, outShape[0], outShape[1]], \"float32\", { dimPerPixel: 1 });\n        await averagepool_2.averagepool(context, inputX, output, this.countIncludePad, batch, kernelShape, pads, strides, inShape, outShape, ch);\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"AveragePool\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLAveragePool(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/averagepool.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/binary7.ts":
/*!*****************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/binary7.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.WebGLBinary7 = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nconst shaderHelper_1 = __webpack_require__(/*! ../../shaderHelper */ \"./src/descriptor_runner/operators/webgl/shaderHelper.ts\");\nclass WebGLBinary7 extends operatorImpl_1.OperatorImpl {\n    constructor(kernelName, binaryCalculationSource) {\n        super(\"webgl\");\n        this.kernelName = kernelName;\n        this.binaryCalculationSource = binaryCalculationSource;\n    }\n    async run(context, inputs) {\n        context.assertsWebGLTensorArray(inputs);\n        const inputA = inputs[0], inputB = inputs[1];\n        if (inputA.dataType !== \"float32\" || inputB.dataType !== \"float32\") {\n            throw new Error();\n        }\n        // Elementwiseのアクセスにおいてテクスチャサイズが同じであることを仮定\n        if (inputA.dimPerPixel !== 1 || inputB.dimPerPixel !== 1) {\n            throw new Error();\n        }\n        const { dims: outShape, allStrides: inAllStrides } = operatorUtil_1.broadcastMulti([\n            inputA.dims,\n            inputB.dims,\n        ]), outputTensor = context.emptyTensor(outShape, \"float32\"), \n        /*\n         * Gl_FragCoord.x: 0.5, 1.5, 2.5, ..., textureWidth-0.5\n         * Texture2D(textureName, vec2(x, y)): x=(0.5, 1.5, 2.5, ...) / textureWidth\n         */\n        outNdim = outShape.length, kernelName = `${this.kernelName}_${outNdim}`;\n        if (!context.hasKernel(kernelName)) {\n            let idxs;\n            switch (outNdim) {\n                case 0:\n                    idxs = \"\";\n                    break;\n                case 1:\n                    idxs = \"tex_output_0\";\n                    break;\n                case 2:\n                    idxs = \"tex_output_0, tex_output_1\";\n                    break;\n                case 3:\n                    idxs = \"tex_output_0, tex_output_1, tex_output_2\";\n                    break;\n                case 4:\n                    idxs = \"tex_output_0, tex_output_1, tex_output_2, tex_output_3\";\n                    break;\n                case 5:\n                    idxs =\n                        \"tex_output_0, tex_output_1, tex_output_2, tex_output_3, tex_output_4\";\n                    break;\n                case 6:\n                    idxs =\n                        \"tex_output_0, tex_output_1, tex_output_2, tex_output_3, tex_output_4, tex_output_5\";\n                    break;\n                default:\n                    throw new Error();\n            }\n            const kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n      \r\n${shaderHelper_1.shaderGenTensorOutputUniform(outNdim)}\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input_a\", outNdim, context.webgl2)}\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input_b\", outNdim, context.webgl2)}\r\n\r\n    void main() {\r\n      ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(outNdim)}\r\n      float sa = get_tex_input_a(${idxs});\r\n      float sb = get_tex_input_b(${idxs});\r\n      ${this.binaryCalculationSource}\r\n      ${shaderHelper_1.shaderGenOutput(\"v\", context.webgl2)}\r\n      return;\r\n    }\r\n        `;\n            context.addKernel(kernelName, kernelSource);\n        }\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input_a\", inAllStrides[0], inputA, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input_b\", inAllStrides[1], inputB, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem(outShape, outputTensor, context.webgl2),\n        ];\n        await context.runKernel(kernelName, [\n            { tensor: inputA, name: \"tex_input_a\" },\n            { tensor: inputB, name: \"tex_input_b\" },\n        ], outputTensor, uniforms);\n        return [outputTensor];\n    }\n}\nexports.WebGLBinary7 = WebGLBinary7;\nfunction getOpEntries() {\n    return [\n        // Add, Sub, Mul, Div, Pow: opset under 7 requires explicit broadcast flag\n        {\n            opType: \"Add\",\n            backend: \"webgl\",\n            opsetMin: 7,\n            factory: () => new WebGLBinary7(\"add\", \"float v = sa + sb;\"),\n        },\n        {\n            opType: \"Sub\",\n            backend: \"webgl\",\n            opsetMin: 7,\n            factory: () => new WebGLBinary7(\"sub\", \"float v = sa - sb;\"),\n        },\n        {\n            opType: \"Mul\",\n            backend: \"webgl\",\n            opsetMin: 7,\n            factory: () => new WebGLBinary7(\"mul\", \"float v = sa * sb;\"),\n        },\n        {\n            opType: \"Div\",\n            backend: \"webgl\",\n            opsetMin: 7,\n            factory: () => new WebGLBinary7(\"div\", \"float v = sa / sb;\"),\n        },\n        // Pow(-1.1, 2) is error in GLSL, but useful in normalization algorithm\n        {\n            opType: \"Pow\",\n            backend: \"webgl\",\n            opsetMin: 7,\n            factory: () => new WebGLBinary7(\"pow\", \"float v = pow(abs(sa), sb);\"),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/binary7.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/cast.ts":
/*!**************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/cast.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst onnx_proto_1 = __webpack_require__(/*! onnx-proto */ \"./node_modules/onnx-proto/dist/onnx.js\");\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nclass Cast extends operatorImpl_1.OperatorImpl {\n    constructor() {\n        super(\"webgl\");\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.to = operatorUtil_1.getAttrInt(attribute, \"to\", onnx_proto_1.onnx.TensorProto.DataType.FLOAT);\n    }\n    async run(context, inputs) {\n        context.assertsWebGLTensorArray(inputs);\n        const input = inputs[0];\n        // 現状、trivialなfloat32->float32のキャストのみ通す\n        if (input.dataType !== \"float32\") {\n            throw new Error(`Cast: input must be float32`);\n        }\n        if (this.to !== onnx_proto_1.onnx.TensorProto.DataType.FLOAT) {\n            throw new Error(`Cast: output must be float32`);\n        }\n        return [input.alias(input.dims)];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Cast\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new Cast(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/cast.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/clip.ts":
/*!**************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/clip.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.WebGLClip = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst shaderHelper_1 = __webpack_require__(/*! ../../shaderHelper */ \"./src/descriptor_runner/operators/webgl/shaderHelper.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nclass WebGLClip extends operatorImpl_1.OperatorImpl {\n    constructor() {\n        super(\"webgl\");\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.clipMax = operatorUtil_1.getAttrFloat(attribute, \"max\", 65536);\n        this.clipMin = operatorUtil_1.getAttrFloat(attribute, \"min\", -65536);\n    }\n    async run(context, inputs) {\n        context.assertsWebGLTensorArray(inputs);\n        const input = inputs[0];\n        if (input.dataType !== \"float32\") {\n            throw new Error();\n        }\n        const outputTensor = context.emptyTensor(input.dims, \"float32\");\n        // Elementwiseのアクセスにおいてテクスチャサイズが同じであることを仮定\n        if (input.textureWidth !== outputTensor.textureWidth ||\n            input.textureHeight !== outputTensor.textureHeight ||\n            input.dimPerPixel !== 1) {\n            throw new Error();\n        }\n        /*\n         * Gl_FragCoord.x: 0.5, 1.5, 2.5, ..., textureWidth-0.5\n         * texture2D(textureName, vec2(x, y)): x=(0.5, 1.5, 2.5, ...) / textureWidth\n         */\n        const kernelName = `clip_${this.clipMax}_${this.clipMin}`;\n        if (!context.hasKernel(kernelName)) {\n            const kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n  ${shaderHelper_1.shaderGenTensorElementwiseGet(\"tex_input\", context.webgl2)}\r\n  void main() {\r\n    float s = get_tex_input();\r\n    float v = clamp(s, ${this.clipMin.toExponential()}, ${this.clipMax.toExponential()});\r\n    ${shaderHelper_1.shaderGenOutput(\"v\", context.webgl2)}\r\n    return;\r\n  }\r\n      `;\n            context.addKernel(kernelName, kernelSource);\n        }\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorElementwiseGetUniformItem(\"tex_input\", input, context.webgl2),\n        ];\n        await context.runKernel(kernelName, [{ tensor: input, name: \"tex_input\" }], outputTensor, uniforms);\n        return [outputTensor];\n    }\n}\nexports.WebGLClip = WebGLClip;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Clip\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            opsetMax: 11,\n            factory: () => new WebGLClip(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/clip.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/conv.ts":
/*!**************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/conv.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.WebGLConv = void 0;\nconst util_1 = __webpack_require__(/*! ../../../../util */ \"./src/descriptor_runner/util.ts\");\nconst conv_1 = __webpack_require__(/*! ../../../base/conv */ \"./src/descriptor_runner/operators/base/conv.ts\");\nconst shaderHelper_1 = __webpack_require__(/*! ../../shaderHelper */ \"./src/descriptor_runner/operators/webgl/shaderHelper.ts\");\nconst IM2COL_SPLIT_NUMEL = 4194304;\nclass WebGLConv extends conv_1.Conv {\n    constructor() {\n        super(\"webgl\");\n    }\n    async run(context, inputs) {\n        context.assertsWebGLTensorArray(inputs);\n        const inputX = inputs[0], inputW = inputs[1], inputB = inputs[2];\n        // TODO: 2D以外対応\n        if (inputX.ndim !== 4) {\n            throw new Error(\"Conv other than 2D is not yet supported\");\n        }\n        const { batch, dilations, group, kernelShape, pads, strides, inShape, outShape, chIn, chInPerGroup, chOut, chOutPerGroup, } = this.calcShape(inputX.dims, inputW.dims);\n        if (inputX.dimPerPixel !== 1 ||\n            inputW.dimPerPixel !== 1 ||\n            (inputB && inputB.dimPerPixel !== 1)) {\n            throw new Error();\n        }\n        const im2colLengthPerOutRow = group *\n            batch *\n            outShape[1] *\n            chInPerGroup *\n            kernelShape[0] *\n            kernelShape[1];\n        const im2colLength = im2colLengthPerOutRow * outShape[0];\n        let matmulData;\n        if (im2colLength > IM2COL_SPLIT_NUMEL) {\n            const chunkCount = Math.ceil(im2colLength / IM2COL_SPLIT_NUMEL);\n            const defaultChunkSize = Math.ceil(outShape[0] / chunkCount);\n            const chunkInfos = [];\n            const matmulOutputs = [];\n            // split by outShape0 -> im2col -> matmul -> concat\n            for (let chunk = 0; chunk < chunkCount; chunk++) {\n                const chunkOffset = chunk * defaultChunkSize;\n                const chunkSize = Math.min(defaultChunkSize, outShape[0] - chunkOffset);\n                chunkInfos.push({ offset: chunkOffset, length: chunkSize });\n                const im2colData = context.emptyTensor([\n                    im2colLengthPerOutRow * chunkSize,\n                ]);\n                await this.im2colSplit(context, inputX, im2colData, batch, dilations, group, kernelShape, pads, strides, inShape, outShape, chIn, chInPerGroup, chOut, chOutPerGroup, chunkOffset, chunkSize);\n                const matmulChunkData = context.emptyTensor([\n                    group * batch * chunkSize * outShape[1] * chOutPerGroup,\n                ]);\n                await this.matmul(context, im2colData, inputW, matmulChunkData, group, batch * chunkSize * outShape[1], chInPerGroup * kernelShape[0] * kernelShape[1], chOutPerGroup);\n                im2colData.dispose();\n                matmulOutputs.push(matmulChunkData);\n            }\n            matmulData = context.emptyTensor([\n                group * batch * outShape[0] * outShape[1] * chOutPerGroup,\n            ]);\n            await this.concat(context, matmulOutputs, matmulData, group * batch, outShape[0], outShape[1] * chOutPerGroup, chunkInfos);\n            matmulOutputs.forEach((mO) => mO.dispose());\n        }\n        else {\n            const im2colData = context.emptyTensor([\n                group *\n                    batch *\n                    outShape[0] *\n                    outShape[1] *\n                    chInPerGroup *\n                    kernelShape[0] *\n                    kernelShape[1],\n            ]);\n            await this.im2col(context, inputX, im2colData, batch, dilations, group, kernelShape, pads, strides, inShape, outShape, chIn, chInPerGroup, chOut, chOutPerGroup);\n            matmulData = context.emptyTensor([\n                group * batch * outShape[0] * outShape[1] * chOutPerGroup,\n            ]);\n            await this.matmul(context, im2colData, inputW, matmulData, group, batch * outShape[0] * outShape[1], chInPerGroup * kernelShape[0] * kernelShape[1], chOutPerGroup);\n            im2colData.dispose();\n        }\n        const output = context.emptyTensor([\n            batch,\n            chOut,\n            outShape[0],\n            outShape[1],\n        ]);\n        if (inputB) {\n            const transposeData = context.emptyTensor([\n                batch * chOut * outShape[0] * outShape[1],\n            ]);\n            await this.transpose(context, matmulData, transposeData, group, batch, outShape[0] * outShape[1], chOutPerGroup);\n            matmulData.dispose();\n            await this.bias(context, transposeData, inputB, output, batch, chOut, outShape[0] * outShape[1]);\n            transposeData.dispose();\n        }\n        else {\n            await this.transpose(context, matmulData, output, group, batch, outShape[0] * outShape[1], chOutPerGroup);\n            matmulData.dispose();\n        }\n        return [output];\n    }\n    async im2col(context, dX, dI, batch, dilations, group, kernelShape, pads, strides, inShape, outShape, chIn, chInPerGroup, chOut, chOutPerGroup) {\n        const kernelName = `conv_im2col`;\n        if (!context.hasKernel(kernelName)) {\n            const kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n  \r\n  ${shaderHelper_1.shaderGenTensorOutputUniform(1)}\r\n  uniform int GROUP;\r\n  uniform int BATCH;\r\n  uniform int O0;\r\n  uniform int O1;\r\n  uniform int CI;\r\n  uniform int CIPG;\r\n  uniform int K0;\r\n  uniform int K1;\r\n  uniform int S0;\r\n  uniform int S1;\r\n  uniform int P0;\r\n  uniform int P1;\r\n  uniform int D0;\r\n  uniform int D1;\r\n  uniform int IS0;\r\n  uniform int IS1;\r\n  \r\n  ${shaderHelper_1.shaderGenTensorNDGet(\"tex_input\", 1, context.webgl2)}\r\n  \r\n  void main() {\r\n    ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(1)}\r\n    int rem = tex_output_flat;\r\n    int quo = rem / K0;\r\n    int k1 = rem - quo * K1;\r\n    rem = quo;\r\n    quo = rem / K0;\r\n    int k0 = rem - quo * K0;\r\n    rem = quo;\r\n    quo = rem / CIPG;\r\n    int ci = rem - quo * CIPG;\r\n    rem = quo;\r\n    quo = rem / O1;\r\n    int o1 = rem - quo * O1;\r\n    rem = quo;\r\n    quo = rem / O0;\r\n    int o0 = rem - quo * O0;\r\n    rem = quo;\r\n    quo = rem / BATCH;\r\n    int b = rem - quo * BATCH;\r\n    int g = quo;\r\n  \r\n    int in0 = o0 * S0 - P0 + k0 * D0;\r\n    int in1 = o1 * S1 - P1 + k1 * D1;\r\n    float s = 0.0;\r\n    if (in0 >= 0 && in0 < IS0 && in1 >= 0 && in1 < IS1) {\r\n      s = get_tex_input(((b * CI + g * CIPG + ci) * IS0 + in0) * IS1 + in1);\r\n    }\r\n    ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n    return;\r\n  }\r\n  `;\n            context.addKernel(kernelName, kernelSource);\n        }\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input\", [1], dX, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([dI.length], dI, context.webgl2),\n            { name: \"GROUP\", type: \"int\", value: group },\n            { name: \"BATCH\", type: \"int\", value: batch },\n            { name: \"O0\", type: \"int\", value: outShape[0] },\n            { name: \"O1\", type: \"int\", value: outShape[1] },\n            { name: \"CI\", type: \"int\", value: chIn },\n            { name: \"CIPG\", type: \"int\", value: chInPerGroup },\n            { name: \"K0\", type: \"int\", value: kernelShape[0] },\n            { name: \"K1\", type: \"int\", value: kernelShape[1] },\n            { name: \"S0\", type: \"int\", value: strides[0] },\n            { name: \"S1\", type: \"int\", value: strides[1] },\n            { name: \"P0\", type: \"int\", value: pads[0] },\n            { name: \"P1\", type: \"int\", value: pads[1] },\n            { name: \"D0\", type: \"int\", value: dilations[0] },\n            { name: \"D1\", type: \"int\", value: dilations[1] },\n            { name: \"IS0\", type: \"int\", value: inShape[0] },\n            { name: \"IS1\", type: \"int\", value: inShape[1] },\n        ];\n        await context.runKernel(kernelName, [{ tensor: dX, name: \"tex_input\" }], dI, uniforms);\n    }\n    async im2colSplit(context, dX, dI, batch, dilations, group, kernelShape, pads, strides, inShape, outShape, chIn, chInPerGroup, chOut, chOutPerGroup, outShape0Offset, outShape0ChunkSize) {\n        const kernelName = `conv_im2col_split`;\n        if (!context.hasKernel(kernelName)) {\n            const kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n  \r\n  ${shaderHelper_1.shaderGenTensorOutputUniform(1)}\r\n  uniform int GROUP;\r\n  uniform int BATCH;\r\n  uniform int O0;\r\n  uniform int O1;\r\n  uniform int CI;\r\n  uniform int CIPG;\r\n  uniform int K0;\r\n  uniform int K1;\r\n  uniform int S0;\r\n  uniform int S1;\r\n  uniform int P0;\r\n  uniform int P1;\r\n  uniform int D0;\r\n  uniform int D1;\r\n  uniform int IS0;\r\n  uniform int IS1;\r\n  uniform int O0OFS;\r\n  uniform int O0CHUNK;\r\n  \r\n  ${shaderHelper_1.shaderGenTensorNDGet(\"tex_input\", 1, context.webgl2)}\r\n  \r\n  void main() {\r\n    ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(1)}\r\n    int rem = tex_output_flat;\r\n    int quo = rem / K0;\r\n    int k1 = rem - quo * K1;\r\n    rem = quo;\r\n    quo = rem / K0;\r\n    int k0 = rem - quo * K0;\r\n    rem = quo;\r\n    quo = rem / CIPG;\r\n    int ci = rem - quo * CIPG;\r\n    rem = quo;\r\n    quo = rem / O1;\r\n    int o1 = rem - quo * O1;\r\n    rem = quo;\r\n    quo = rem / O0CHUNK;\r\n    int o0 = rem - quo * O0CHUNK + O0OFS;\r\n    rem = quo;\r\n    quo = rem / BATCH;\r\n    int b = rem - quo * BATCH;\r\n    int g = quo;\r\n  \r\n    int in0 = o0 * S0 - P0 + k0 * D0;\r\n    int in1 = o1 * S1 - P1 + k1 * D1;\r\n    float s = 0.0;\r\n    if (in0 >= 0 && in0 < IS0 && in1 >= 0 && in1 < IS1) {\r\n      s = get_tex_input(((b * CI + g * CIPG + ci) * IS0 + in0) * IS1 + in1);\r\n    }\r\n    ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n    return;\r\n  }\r\n  `;\n            context.addKernel(kernelName, kernelSource);\n        }\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input\", [1], dX, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([dI.length], dI, context.webgl2),\n            { name: \"GROUP\", type: \"int\", value: group },\n            { name: \"BATCH\", type: \"int\", value: batch },\n            { name: \"O0\", type: \"int\", value: outShape[0] },\n            { name: \"O1\", type: \"int\", value: outShape[1] },\n            { name: \"CI\", type: \"int\", value: chIn },\n            { name: \"CIPG\", type: \"int\", value: chInPerGroup },\n            { name: \"K0\", type: \"int\", value: kernelShape[0] },\n            { name: \"K1\", type: \"int\", value: kernelShape[1] },\n            { name: \"S0\", type: \"int\", value: strides[0] },\n            { name: \"S1\", type: \"int\", value: strides[1] },\n            { name: \"P0\", type: \"int\", value: pads[0] },\n            { name: \"P1\", type: \"int\", value: pads[1] },\n            { name: \"D0\", type: \"int\", value: dilations[0] },\n            { name: \"D1\", type: \"int\", value: dilations[1] },\n            { name: \"IS0\", type: \"int\", value: inShape[0] },\n            { name: \"IS1\", type: \"int\", value: inShape[1] },\n            { name: \"O0OFS\", type: \"int\", value: outShape0Offset },\n            { name: \"O0CHUNK\", type: \"int\", value: outShape0ChunkSize },\n        ];\n        await context.runKernel(kernelName, [{ tensor: dX, name: \"tex_input\" }], dI, uniforms);\n    }\n    async matmul(context, dI, dW, dT, group, bout, cinkhkw, chOutPerGroup) {\n        /*\n         * DI(group, bout, cinkhkw) * dW(group, coutpergroup, cinkhkw) -> dT(group, bout, coutpergroup)\n         * ループ回数は定数が必要\n         */\n        const kernelName = `conv_matmul_${cinkhkw}`;\n        if (!context.hasKernel(kernelName)) {\n            const kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n  \r\n  ${shaderHelper_1.shaderGenTensorOutputUniform(1)}\r\n  #define cinkhkw ${cinkhkw}\r\n  uniform int GROUP;\r\n  uniform int BOUT;\r\n  uniform int COPG;\r\n  \r\n  ${shaderHelper_1.shaderGenTensorNDGet(\"tex_input_w\", 1, context.webgl2)}\r\n  ${shaderHelper_1.shaderGenTensorNDGet(\"tex_input_i\", 1, context.webgl2)}\r\n  \r\n  void main() {\r\n    ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(1)}\r\n    int rem = tex_output_flat;\r\n    int quo = rem / COPG;\r\n    int x = rem - quo * COPG;\r\n    rem = quo;\r\n    quo = rem / BOUT;\r\n    int y = rem - quo * BOUT;\r\n    int g = quo;\r\n  \r\n    float s = 0.0;\r\n    for (int ip = 0; ip < cinkhkw; ip++) {\r\n      s += get_tex_input_i((g * BOUT + y) * cinkhkw + ip) * get_tex_input_w((g * COPG + x) * cinkhkw + ip);\r\n    }\r\n    ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n    return;\r\n  }\r\n  `;\n            context.addKernel(kernelName, kernelSource);\n        }\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input_w\", [1], dW, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input_i\", [1], dI, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([dT.length], dT, context.webgl2),\n            { name: \"GROUP\", type: \"int\", value: group },\n            { name: \"BOUT\", type: \"int\", value: bout },\n            { name: \"COPG\", type: \"int\", value: chOutPerGroup },\n        ];\n        await context.runKernel(kernelName, [\n            { tensor: dW, name: \"tex_input_w\" },\n            { tensor: dI, name: \"tex_input_i\" },\n        ], dT, uniforms);\n    }\n    async concat(context, dCs, dO, outerLength, concatLength, innerLength, chunks) {\n        const kernelName = `conv_concat_${chunks.length}`;\n        if (!context.hasKernel(kernelName)) {\n            const getEach = util_1.arange(chunks.length)\n                .map((i) => shaderHelper_1.shaderGenTensorNDGet(`tex_input_${i}`, 3, context.webgl2))\n                .join(\"\");\n            const uniformChunks = util_1.arange(chunks.length)\n                .map((i) => `uniform int CHUNK_OFS${i};`)\n                .join(\"\");\n            let takeCode = `\r\nif (tex_output_1 < CHUNK_OFS1) {\r\n  s = get_tex_input_0(tex_output_0, tex_output_1, tex_output_2);\r\n}\r\n`;\n            for (let i = 1; i < chunks.length - 1; i++) {\n                takeCode += ` else if (tex_output_1 < CHUNK_OFS${i + 1}) {\r\n  s = get_tex_input_${i}(tex_output_0, tex_output_1 - CHUNK_OFS${i}, tex_output_2);\r\n}\r\n`;\n            }\n            takeCode += `\r\nelse {\r\n  s = get_tex_input_${chunks.length - 1}(tex_output_0, tex_output_1 - CHUNK_OFS${chunks.length - 1}, tex_output_2);\r\n}\r\n`;\n            const kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n  \r\n  ${shaderHelper_1.shaderGenTensorOutputUniform(3)}\r\n  ${uniformChunks}\r\n  \r\n  ${getEach}\r\n  \r\n  void main() {\r\n    ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(3)}\r\n    float s = 0.0;\r\n\r\n    ${takeCode}\r\n    ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n    return;\r\n  }\r\n  `;\n            context.addKernel(kernelName, kernelSource);\n        }\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([outerLength, concatLength, innerLength], dO, context.webgl2),\n        ];\n        for (let i = 0; i < chunks.length; i++) {\n            uniforms.push(...shaderHelper_1.shaderGenTensorNDGetUniformItem(`tex_input_${i}`, [chunks[i].length * innerLength, innerLength, 1], dCs[i], context.webgl2));\n            uniforms.push({\n                name: `CHUNK_OFS${i}`,\n                value: chunks[i].offset,\n                type: \"int\",\n            });\n        }\n        await context.runKernel(kernelName, dCs.map((dC, i) => ({ tensor: dC, name: `tex_input_${i}` })), dO, uniforms);\n    }\n    async transpose(context, dT, dO, group, batch, outarea, chOutPerGroup) {\n        // DT(group, batch, outh, outw, choutpergroup) -> dO(batch, group, choutpergroup, outh, outw)\n        const kernelName = `conv_transpose`;\n        if (!context.hasKernel(kernelName)) {\n            const kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n  \r\n  ${shaderHelper_1.shaderGenTensorOutputUniform(1)}\r\n  uniform int GROUP;\r\n  uniform int BATCH;\r\n  uniform int COPG;\r\n  uniform int OUTAREA;\r\n  \r\n  ${shaderHelper_1.shaderGenTensorNDGet(\"tex_input\", 1, context.webgl2)}\r\n  \r\n  void main() {\r\n    ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(1)}\r\n    int rem = tex_output_flat;\r\n    int quo = rem / OUTAREA;\r\n    int x = rem - quo * OUTAREA;\r\n    rem = quo;\r\n    quo = rem / COPG;\r\n    int c = rem - quo * COPG;\r\n    rem = quo;\r\n    quo = rem / GROUP;\r\n    int g = rem - quo * GROUP;\r\n    int b = quo;\r\n  \r\n    float s = 0.0;\r\n    s = get_tex_input(((g * BATCH + b) * OUTAREA + x) * COPG + c);\r\n    ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n    return;\r\n  }\r\n  `;\n            context.addKernel(kernelName, kernelSource);\n        }\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input\", [1], dT, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([dO.length], dO, context.webgl2),\n            { name: \"GROUP\", type: \"int\", value: group },\n            { name: \"BATCH\", type: \"int\", value: batch },\n            { name: \"COPG\", type: \"int\", value: chOutPerGroup },\n            { name: \"OUTAREA\", type: \"int\", value: outarea },\n        ];\n        await context.runKernel(kernelName, [{ tensor: dT, name: \"tex_input\" }], dO, uniforms);\n    }\n    async bias(context, dI, dB, dO, batch, chOut, outarea) {\n        const kernelName = `conv_bias`;\n        if (!context.hasKernel(kernelName)) {\n            const kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n  \r\n  ${shaderHelper_1.shaderGenTensorOutputUniform(1)}\r\n  uniform int BATCH;\r\n  uniform int COUT;\r\n  uniform int OUTAREA;\r\n  \r\n  ${shaderHelper_1.shaderGenTensorNDGet(\"tex_input_i\", 1, context.webgl2)}\r\n  ${shaderHelper_1.shaderGenTensorNDGet(\"tex_input_b\", 1, context.webgl2)}\r\n  \r\n  void main() {\r\n    ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(1)}\r\n    int rem = tex_output_flat;\r\n    int quo = rem / OUTAREA;\r\n    int x = rem - quo * OUTAREA;\r\n    rem = quo;\r\n    quo = rem / COUT;\r\n    int c = rem - quo * COUT;\r\n    int b = quo;\r\n  \r\n    float s = 0.0;\r\n    s = get_tex_input_i(tex_output_flat) + get_tex_input_b(c);\r\n    ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n    return;\r\n  }\r\n  `;\n            context.addKernel(kernelName, kernelSource);\n        }\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input_i\", [1], dI, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input_b\", [1], dB, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([dO.length], dO, context.webgl2),\n            { name: \"BATCH\", type: \"int\", value: batch },\n            { name: \"COUT\", type: \"int\", value: chOut },\n            { name: \"OUTAREA\", type: \"int\", value: outarea },\n        ];\n        await context.runKernel(kernelName, [\n            { tensor: dI, name: \"tex_input_i\" },\n            { tensor: dB, name: \"tex_input_b\" },\n        ], dO, uniforms);\n    }\n}\nexports.WebGLConv = WebGLConv;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Conv\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLConv(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/conv.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/convtranspose.ts":
/*!***********************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/convtranspose.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.WebGLConvTranspose = void 0;\nconst convtranspose_1 = __webpack_require__(/*! ../../../base/convtranspose */ \"./src/descriptor_runner/operators/base/convtranspose.ts\");\nconst shaderHelper_1 = __webpack_require__(/*! ../../shaderHelper */ \"./src/descriptor_runner/operators/webgl/shaderHelper.ts\");\nclass WebGLConvTranspose extends convtranspose_1.ConvTranspose {\n    constructor() {\n        super(\"webgl\");\n    }\n    async run(context, inputs) {\n        context.assertsWebGLTensorArray(inputs);\n        const inputX = inputs[0], inputW = inputs[1], inputB = inputs[2];\n        // TODO: 2D以外対応\n        if (inputX.ndim !== 4) {\n            throw new Error(\"ConvTranspose other than 2D is not yet supported\");\n        }\n        const { batch, dilations, group, kernelShape, pads, strides, inShape, outShape, chIn, chInPerGroup, chOut, chOutPerGroup, } = this.calcShape(inputX.dims, inputW.dims);\n        if (inputX.dimPerPixel !== 1 ||\n            inputW.dimPerPixel !== 1 ||\n            (inputB && inputB.dimPerPixel !== 1)) {\n            throw new Error();\n        }\n        const inputTransposeData = context.emptyTensor([\n            chIn * batch * inShape[0] * inShape[1],\n        ]);\n        await this.transposeInput(context, inputX, inputTransposeData, group, batch, inShape[0] * inShape[1], chInPerGroup);\n        const weightTransposeData = context.emptyTensor([\n            chOut * kernelShape[0] * kernelShape[1] * chInPerGroup,\n        ]);\n        await this.transposeWeight(context, inputW, weightTransposeData, group, chInPerGroup, chOutPerGroup, kernelShape[0] * kernelShape[1]);\n        const matmulData = context.emptyTensor([\n            chOut * batch * inShape[0] * inShape[1] * kernelShape[0] * kernelShape[1],\n        ]);\n        await this.matmul(context, inputTransposeData, weightTransposeData, matmulData, group, batch * inShape[0] * inShape[1], chOutPerGroup * kernelShape[0] * kernelShape[1], chInPerGroup);\n        inputTransposeData.dispose();\n        weightTransposeData.dispose();\n        const output = context.emptyTensor([\n            batch,\n            chOut,\n            outShape[0],\n            outShape[1],\n        ]);\n        if (inputB) {\n            const col2ImData = context.emptyTensor([\n                batch * chOut * outShape[0] * outShape[1],\n            ]);\n            await this.col2im(context, matmulData, col2ImData, batch, dilations, group, kernelShape, pads, strides, inShape, outShape, chOutPerGroup);\n            matmulData.dispose();\n            await this.bias(context, col2ImData, inputB, output, batch, chOut, outShape[0] * outShape[1]);\n            col2ImData.dispose();\n        }\n        else {\n            await this.col2im(context, matmulData, output, batch, dilations, group, kernelShape, pads, strides, inShape, outShape, chOutPerGroup);\n            matmulData.dispose();\n        }\n        return [output];\n    }\n    async col2im(context, dI, dY, batch, dilations, group, kernelShape, pads, strides, inShape, outShape, chOutPerGroup) {\n        // dI: group, batch, inShape[0], inShape[1], chOutPerGroup, kernelShape[0], kernelShape[1]\n        // dY: batch, group, chOutPerGroup, outShape[0], outShape[1]\n        const kernelName = `convtranspose_col2im_${kernelShape[0]}_${kernelShape[1]}_${strides[0]}_${strides[1]}_${pads[0]}_${pads[1]}_${dilations[0]}_${dilations[1]}`;\n        if (!context.hasKernel(kernelName)) {\n            const kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n  \r\n  ${shaderHelper_1.shaderGenTensorOutputUniform(1)}\r\n  #define K0 ${kernelShape[0]}\r\n  #define K1 ${kernelShape[1]}\r\n  #define S0 ${strides[0]}\r\n  #define S1 ${strides[1]}\r\n  #define P0 ${pads[0]}\r\n  #define P1 ${pads[1]}\r\n  #define D0 ${dilations[0]}\r\n  #define D1 ${dilations[1]}\r\n  uniform int GROUP;\r\n  uniform int BATCH;\r\n  uniform int O0;\r\n  uniform int O1;\r\n  uniform int COPG;\r\n  uniform int IS0;\r\n  uniform int IS1;\r\n  \r\n  ${shaderHelper_1.shaderGenTensorNDGet(\"tex_input\", 1, context.webgl2)}\r\n  \r\n  void main() {\r\n    ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(1)}\r\n    int rem = tex_output_flat;\r\n    int quo = rem / O1;\r\n    int o1 = rem - quo * O1;\r\n    rem = quo;\r\n    quo = rem / O0;\r\n    int o0 = rem - quo * O0;\r\n    rem = quo;\r\n    quo = rem / COPG;\r\n    int co = rem - quo * COPG;\r\n    rem = quo;\r\n    quo = rem / GROUP;\r\n    int g = rem - quo * GROUP;\r\n    int b = quo;\r\n  \r\n    float s = 0.0;\r\n    for (int k0 = 0; k0 < K0; k0++) {\r\n      for (int k1 = 0; k1 < K1; k1++) {\r\n        int i0s = o0 + P0 - k0 * D0;\r\n        int i1s = o1 + P1 - k1 * D1;\r\n        int i0 = i0s / S0;\r\n        if (i0s - i0 * S0 != 0 || i0 < 0 || i0 >= IS0) {\r\n          continue;\r\n        }\r\n        int i1 = i1s / S1;\r\n        if (i1s - i1 * S1 != 0 || i1 < 0 || i1 >= IS1) {\r\n          continue;\r\n        }\r\n        s += get_tex_input((((((g * BATCH + b) * IS0 + i0) * IS1 + i1) * COPG + co) * K0 + k0) * K1 + k1);\r\n      }\r\n    }\r\n    ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n    return;\r\n  }\r\n  `;\n            context.addKernel(kernelName, kernelSource);\n        }\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input\", [1], dI, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([dY.length], dY, context.webgl2),\n            { name: \"GROUP\", type: \"int\", value: group },\n            { name: \"BATCH\", type: \"int\", value: batch },\n            { name: \"O0\", type: \"int\", value: outShape[0] },\n            { name: \"O1\", type: \"int\", value: outShape[1] },\n            { name: \"COPG\", type: \"int\", value: chOutPerGroup },\n            { name: \"IS0\", type: \"int\", value: inShape[0] },\n            { name: \"IS1\", type: \"int\", value: inShape[1] },\n        ];\n        await context.runKernel(kernelName, [{ tensor: dI, name: \"tex_input\" }], dY, uniforms);\n    }\n    async matmul(context, dTX, dTW, dI, group, bin, cks, chInPerGroup) {\n        /*\n           dTX(group, batch*inShape[0]*inShape[1]=bin, chInPerGroup) * dTW(group, chOutPerGroup*kernelShape[0]*kernelShape[1]=cks, chInPerGroup) -> dI(group, bin, cks)\n         * ループ回数は定数が必要\n         */\n        const kernelName = `convtranspose_matmul_${chInPerGroup}`;\n        if (!context.hasKernel(kernelName)) {\n            const kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n  \r\n  ${shaderHelper_1.shaderGenTensorOutputUniform(1)}\r\n  #define cipg ${chInPerGroup}\r\n  uniform int GROUP;\r\n  uniform int BIN;\r\n  uniform int CKS;\r\n  \r\n  ${shaderHelper_1.shaderGenTensorNDGet(\"tex_input_w\", 1, context.webgl2)}\r\n  ${shaderHelper_1.shaderGenTensorNDGet(\"tex_input_i\", 1, context.webgl2)}\r\n  \r\n  void main() {\r\n    ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(1)}\r\n    int rem = tex_output_flat;\r\n    int quo = rem / CKS;\r\n    int x = rem - quo * CKS;\r\n    rem = quo;\r\n    quo = rem / BIN;\r\n    int y = rem - quo * BIN;\r\n    int g = quo;\r\n  \r\n    float s = 0.0;\r\n    for (int ip = 0; ip < cipg; ip++) {\r\n      s += get_tex_input_i((g * BIN + y) * cipg + ip) * get_tex_input_w((g * CKS + x) * cipg + ip);\r\n    }\r\n    ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n    return;\r\n  }\r\n  `;\n            context.addKernel(kernelName, kernelSource);\n        }\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input_w\", [1], dTW, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input_i\", [1], dTX, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([dI.length], dI, context.webgl2),\n            { name: \"GROUP\", type: \"int\", value: group },\n            { name: \"BIN\", type: \"int\", value: bin },\n            { name: \"CKS\", type: \"int\", value: cks },\n        ];\n        await context.runKernel(kernelName, [\n            { tensor: dTW, name: \"tex_input_w\" },\n            { tensor: dTX, name: \"tex_input_i\" },\n        ], dI, uniforms);\n    }\n    async transposeInput(context, dX, dTX, group, batch, inarea, chInPerGroup) {\n        // dX(batch, group, chInPerGroup, inShape[0], inShape[1]) -> dTX(group, batch, inShape[0], inShape[1], chInPerGroup)\n        const kernelName = `convtranspose_transpose_input`;\n        const kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n\r\n${shaderHelper_1.shaderGenTensorOutputUniform(4)}\r\n\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input\", 4, context.webgl2)}\r\n\r\nvoid main() {\r\n  ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(4)}\r\n  float s = get_tex_input(tex_output_0, tex_output_1, tex_output_2, tex_output_3);\r\n  ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n  return;\r\n}\r\n`;\n        context.addKernel(kernelName, kernelSource);\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input\", [chInPerGroup * inarea, group * chInPerGroup * inarea, 1, inarea], dX, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([group, batch, inarea, chInPerGroup], dTX, context.webgl2),\n        ];\n        await context.runKernel(kernelName, [{ tensor: dX, name: \"tex_input\" }], dTX, uniforms);\n    }\n    async transposeWeight(context, dW, dTW, group, chInPerGroup, chOutPerGroup, karea) {\n        // dW(group, chInPerGroup, chOutPerGroup, kernelShape[0], kernelShape[1]) -> dTW(group, chOutPerGroup, kernelShape[0], kernelShape[1], cInPerGroup)\n        const kernelName = `convtranspose_transpose_weight`;\n        const kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n\r\n${shaderHelper_1.shaderGenTensorOutputUniform(4)}\r\n\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input\", 4, context.webgl2)}\r\n\r\nvoid main() {\r\n  ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(4)}\r\n  float s = get_tex_input(tex_output_0, tex_output_1, tex_output_2, tex_output_3);\r\n  ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n  return;\r\n}\r\n`;\n        context.addKernel(kernelName, kernelSource);\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input\", [chInPerGroup * chOutPerGroup * karea, karea, 1, chOutPerGroup * karea], dW, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([group, chOutPerGroup, karea, chInPerGroup], dTW, context.webgl2),\n        ];\n        await context.runKernel(kernelName, [{ tensor: dW, name: \"tex_input\" }], dTW, uniforms);\n    }\n    async bias(context, dI, dB, dO, batch, chOut, outarea) {\n        const kernelName = `convtranspose_bias`;\n        if (!context.hasKernel(kernelName)) {\n            const kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n  \r\n  ${shaderHelper_1.shaderGenTensorOutputUniform(1)}\r\n  uniform int BATCH;\r\n  uniform int COUT;\r\n  uniform int OUTAREA;\r\n  \r\n  ${shaderHelper_1.shaderGenTensorNDGet(\"tex_input_i\", 1, context.webgl2)}\r\n  ${shaderHelper_1.shaderGenTensorNDGet(\"tex_input_b\", 1, context.webgl2)}\r\n  \r\n  void main() {\r\n    ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(1)}\r\n    int rem = tex_output_flat;\r\n    int quo = rem / OUTAREA;\r\n    int x = rem - quo * OUTAREA;\r\n    rem = quo;\r\n    quo = rem / COUT;\r\n    int c = rem - quo * COUT;\r\n    int b = quo;\r\n  \r\n    float s = 0.0;\r\n    s = get_tex_input_i(tex_output_flat) + get_tex_input_b(c);\r\n    ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n    return;\r\n  }\r\n  `;\n            context.addKernel(kernelName, kernelSource);\n        }\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input_i\", [1], dI, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input_b\", [1], dB, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([dO.length], dO, context.webgl2),\n            { name: \"BATCH\", type: \"int\", value: batch },\n            { name: \"COUT\", type: \"int\", value: chOut },\n            { name: \"OUTAREA\", type: \"int\", value: outarea },\n        ];\n        await context.runKernel(kernelName, [\n            { tensor: dI, name: \"tex_input_i\" },\n            { tensor: dB, name: \"tex_input_b\" },\n        ], dO, uniforms);\n    }\n}\nexports.WebGLConvTranspose = WebGLConvTranspose;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"ConvTranspose\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLConvTranspose(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/convtranspose.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/flatten.ts":
/*!*****************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/flatten.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst flatten_1 = __webpack_require__(/*! ../../../base/flatten */ \"./src/descriptor_runner/operators/base/flatten.ts\");\nclass WebGLFlatten extends flatten_1.Flatten {\n    constructor() {\n        super(\"webgl\");\n    }\n    async run(context, inputs) {\n        context.assertsWebGLTensorArray(inputs);\n        const input = inputs[0], computedShape = this.calcShape(input);\n        return [input.alias(computedShape)];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Flatten\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLFlatten(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/flatten.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/gemm.ts":
/*!**************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/gemm.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.WebGLGemm = void 0;\nconst gemm_1 = __webpack_require__(/*! ../../../base/gemm */ \"./src/descriptor_runner/operators/base/gemm.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nconst shaderHelper_1 = __webpack_require__(/*! ../../shaderHelper */ \"./src/descriptor_runner/operators/webgl/shaderHelper.ts\");\nclass WebGLGemm extends gemm_1.Gemm {\n    constructor() {\n        super(\"webgl\");\n    }\n    async run(context, inputs) {\n        context.assertsWebGLTensorArray(inputs);\n        const inputA = inputs[0], inputB = inputs[1], inputC = inputs[2];\n        if (inputC) {\n            return this.runWithC(context, inputA, inputB, inputC);\n        }\n        throw new Error();\n    }\n    async runWithC(context, inputA, inputB, inputC) {\n        const { m, n, k, strideA: [strideA0, strideA1], strideB: [strideB0, strideB1], } = this.calcShape(inputA.dims, inputB.dims), [strideC0, strideC1] = operatorUtil_1.broadcastUni([m, n], inputC.dims);\n        if (inputA.dimPerPixel !== 1 ||\n            inputB.dimPerPixel !== 1 ||\n            inputC.dimPerPixel !== 1) {\n            throw new Error();\n        }\n        const outputTensor = context.emptyTensor([m, n], \"float32\"), \n        // ループ回数は定数が必要\n        kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n\r\n#define m ${m}\r\n#define n ${n}\r\n#define k ${k}\r\n${shaderHelper_1.shaderGenTensorOutputUniform(2)}\r\nuniform float alpha;\r\nuniform float beta;\r\n\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input_a\", 2, context.webgl2)}\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input_b\", 2, context.webgl2)}\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input_c\", 2, context.webgl2)}\r\n\r\nvoid main() {\r\n  ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(2)}\r\n  float s = 0.0;\r\n  for (int ip = 0; ip < k; ip++) {\r\n    s += get_tex_input_a(tex_output_0, ip) * get_tex_input_b(ip, tex_output_1);\r\n  }\r\n  s *= alpha;\r\n  s += beta * get_tex_input_c(tex_output_0, tex_output_1);\r\n  ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n  return;\r\n}\r\n`, kernelName = `gemm_${m}_${n}_${k}`;\n        context.addKernel(kernelName, kernelSource);\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input_a\", [strideA0, strideA1], inputA, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input_b\", [strideB0, strideB1], inputB, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input_c\", [strideC0, strideC1], inputC, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([m, n], outputTensor, context.webgl2),\n            { name: \"alpha\", type: \"float\", value: this.alpha },\n            { name: \"beta\", type: \"float\", value: this.beta },\n        ];\n        await context.runKernel(kernelName, [\n            { tensor: inputA, name: \"tex_input_a\" },\n            { tensor: inputB, name: \"tex_input_b\" },\n            { tensor: inputC, name: \"tex_input_c\" },\n        ], outputTensor, uniforms);\n        return [outputTensor];\n    }\n}\nexports.WebGLGemm = WebGLGemm;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Gemm\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLGemm(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/gemm.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/globalaveragepool.ts":
/*!***************************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/globalaveragepool.ts ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.WebGLGlobalAveragePool = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst averagepool_1 = __webpack_require__(/*! ../../rawcomputation/averagepool */ \"./src/descriptor_runner/operators/webgl/rawcomputation/averagepool.ts\");\n// Version 11\nclass WebGLGlobalAveragePool extends operatorImpl_1.OperatorImpl {\n    constructor() {\n        super(\"webgl\");\n    }\n    async run(context, inputs) {\n        context.assertsWebGLTensorArray(inputs);\n        const inputX = inputs[0];\n        // TODO: 2D以外対応\n        if (inputX.ndim !== 4) {\n            throw new Error(\"MaxPool other than 2D is not yet supported\");\n        }\n        if (inputX.dimPerPixel !== 1) {\n            throw new Error();\n        }\n        const batch = inputX.dims[0], ch = inputX.dims[1], inShape = [inputX.dims[2], inputX.dims[3]], outShape = [1, 1], output = context.emptyTensor([batch, ch, outShape[0], outShape[1]], \"float32\");\n        await averagepool_1.averagepool(context, inputX, output, true, // わずかに計算量が減る\n        batch, inShape, [0, 0, 0, 0], [1, 1], inShape, outShape, ch);\n        return [output];\n    }\n}\nexports.WebGLGlobalAveragePool = WebGLGlobalAveragePool;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"GlobalAveragePool\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLGlobalAveragePool(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/globalaveragepool.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/instancenormalization.ts":
/*!*******************************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/instancenormalization.ts ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.InstanceNormalization = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nconst shaderHelper_1 = __webpack_require__(/*! ../../shaderHelper */ \"./src/descriptor_runner/operators/webgl/shaderHelper.ts\");\n// Opset 1\nclass InstanceNormalization extends operatorImpl_1.OperatorImpl {\n    constructor() {\n        super(\"webgl\");\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.epsilon = operatorUtil_1.getAttrInt(attribute, \"epsilon\", 1e-5);\n    }\n    async run(context, inputs) {\n        context.assertsWebGLTensorArray(inputs);\n        const [input, scale, bias] = inputs;\n        if (!context.webgl2) {\n            // mean, stdの2要素を出力することが難しいため\n            throw new Error(\"InstanceNormalization: WebGL1 is not supported\");\n        }\n        const reductionLength = operatorUtil_1.arrayProd(input.dims.slice(2));\n        const [dimBatch, dimCh] = input.dims;\n        // 統計量計算\n        const maxSumExpTensor = context.emptyTensor([dimBatch * dimCh * 4], \"float32\", { dimPerPixel: 4 });\n        await this.calcStat(context, dimBatch, dimCh, reductionLength, this.epsilon, input, scale, bias, maxSumExpTensor);\n        // 結果計算\n        const output = context.emptyTensor(input.dims, input.dataType);\n        await this.calcOutput2(context, dimBatch, dimCh, reductionLength, input, maxSumExpTensor, output);\n        maxSumExpTensor.dispose();\n        return [output];\n    }\n    async calcStat(context, batchLength, chLength, reductionLength, epsilon, input, scale, bias, maxSumExpTensor) {\n        const kernelName = `instancenormalization_stats_${reductionLength}`, kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n\r\n#define reductionLength ${reductionLength}\r\nuniform float epsilon;\r\n${shaderHelper_1.shaderGenTensorOutputUniform(2)}\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input\", 3, context.webgl2)}\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_scale\", 1, context.webgl2)}\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_bias\", 1, context.webgl2)}\r\n\r\nvoid main() {\r\n  ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(2)}\r\n  float s_sum = 0.0;\r\n  float s_sqsum = 0.0;\r\n  for (int i = 0; i < reductionLength; i++) {\r\n    float v = get_tex_input(tex_output_0, tex_output_1, i);\r\n    s_sum += v;\r\n    s_sqsum += v * v;\r\n  }\r\n  float s_mean = s_sum / float(reductionLength);\r\n  float s_var = s_sqsum / float(reductionLength) - s_mean * s_mean + epsilon;\r\n  float s_invstd = inversesqrt(s_var);\r\n  float s_scale = get_tex_scale(tex_output_1) * s_invstd;\r\n  float s_bias = -s_mean * s_scale + get_tex_bias(tex_output_1);\r\n\r\n  vec4 s = vec4(s_scale, s_bias, 0.0, 0.0);\r\n  ${shaderHelper_1.shaderGenOutputVec4(\"s\", context.webgl2)}\r\n  return;\r\n}\r\n`;\n        context.addKernel(kernelName, kernelSource);\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input\", [chLength * reductionLength, reductionLength, 1], input, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_scale\", scale.strides, scale, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_bias\", bias.strides, bias, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([batchLength, chLength], maxSumExpTensor, context.webgl2),\n            { name: \"epsilon\", value: epsilon, type: \"float\" },\n        ];\n        await context.runKernel(kernelName, [\n            { tensor: input, name: \"tex_input\" },\n            { tensor: scale, name: \"tex_scale\" },\n            { tensor: bias, name: \"tex_bias\" },\n        ], maxSumExpTensor, uniforms);\n    }\n    async calcOutput2(context, batchLength, chLength, reductionLength, input, maxSumExpTensor, output) {\n        const kernelName = `instancenormalization_output`, kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n\r\n${shaderHelper_1.shaderGenTensorOutputUniform(3)}\r\n\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input\", 3, context.webgl2)}\r\n${shaderHelper_1.shaderGenTensorNDGetVec4(\"tex_stats\", 2, context.webgl2)}\r\n\r\nvoid main() {\r\n  ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(3)}\r\n  vec4 m = get_vec4_tex_stats(tex_output_0, tex_output_1);\r\n  float v = get_tex_input(tex_output_0, tex_output_1, tex_output_2);\r\n  float s = v * m.r + m.g;\r\n  ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n  return;\r\n}\r\n`;\n        context.addKernel(kernelName, kernelSource);\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input\", [chLength * reductionLength, reductionLength, 1], input, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_stats\", [chLength, 1], maxSumExpTensor, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([batchLength, chLength, reductionLength], output, context.webgl2),\n        ];\n        await context.runKernel(kernelName, [\n            { tensor: input, name: \"tex_input\" },\n            { tensor: maxSumExpTensor, name: \"tex_stats\" },\n        ], output, uniforms);\n    }\n}\nexports.InstanceNormalization = InstanceNormalization;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"InstanceNormalization\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new InstanceNormalization(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/instancenormalization.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/matmul.ts":
/*!****************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/matmul.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.WebGLMatMul = void 0;\nconst shaderHelper_1 = __webpack_require__(/*! ../../shaderHelper */ \"./src/descriptor_runner/operators/webgl/shaderHelper.ts\");\nconst matmul_1 = __webpack_require__(/*! ../../../base/matmul */ \"./src/descriptor_runner/operators/base/matmul.ts\");\n// Version 13\nclass WebGLMatMul extends matmul_1.MatMul {\n    constructor() {\n        super(\"webgl\");\n    }\n    async run(context, inputs) {\n        context.assertsWebGLTensorArray(inputs);\n        const inputA = inputs[0], inputB = inputs[1];\n        if (inputA.dataType !== \"float32\" || inputB.dataType !== \"float32\") {\n            throw new Error(\"only float32 is supported\");\n        }\n        if (inputA.dimPerPixel !== 1 || inputB.dimPerPixel !== 1) {\n            throw new Error();\n        }\n        const { resultLength, resultDims, resultStrides, resultDimsAfterSqueeze, stridesA, stridesB, innerProductLength, } = this.calcShape(inputA.dims, inputB.dims), output = context.emptyTensor(resultDimsAfterSqueeze, \"float32\");\n        if (resultDims.length === 2) {\n            await this.calcDim2(context, inputA, inputB, output, resultDims, resultStrides, stridesA, stridesB, innerProductLength);\n        }\n        else if (resultDims.length === 3) {\n            await this.calcDim3(context, inputA, inputB, output, resultDims, resultStrides, stridesA, stridesB, innerProductLength);\n        }\n        else {\n            // TODO: 4次元以上のサポート\n            throw new Error();\n        }\n        return [output];\n    }\n    async calcDim2(context, dA, dB, dC, resultDims, resultStrides, stridesA, stridesB, innerProductLength) {\n        const kernelSource = context.webgl2\n            ? `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n\r\n#define innerProductLength ${innerProductLength}\r\n${shaderHelper_1.shaderGenTensorOutputUniform(resultDims.length)}\r\n\r\nuniform sampler2D tex_input_a;\r\nuniform int tex_input_a_stride_0;\r\nuniform int tex_input_a_stride_1;\r\n\r\nivec2 get_coord_a(int d0) {\r\n  int flat_index = d0 * tex_input_a_stride_0;\r\n  int texture_w = textureSize(tex_input_a, 0).x;\r\n  int y = flat_index / texture_w;\r\n  int x = flat_index - y * texture_w;\r\n  return ivec2(x, y);\r\n}\r\n\r\nuniform sampler2D tex_input_b;\r\nuniform int tex_input_b_stride_0;\r\nuniform int tex_input_b_stride_1;\r\n\r\nivec2 get_coord_b(int d1) {\r\n  int flat_index = d1 * tex_input_b_stride_1;\r\n  int texture_w = textureSize(tex_input_b, 0).x;\r\n  int y = flat_index / texture_w;\r\n  int x = flat_index - y * texture_w;\r\n  return ivec2(x, y);\r\n}\r\n\r\nvoid main() {\r\n  ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(resultDims.length)}\r\n  float s = 0.0;\r\n  ivec2 c_a = get_coord_a(tex_output_0);\r\n  ivec2 c_b = get_coord_b(tex_output_1);\r\n  int texture_w_a = textureSize(tex_input_a, 0).x;\r\n  int texture_w_b = textureSize(tex_input_b, 0).x;\r\n  for (int ip = 0; ip < innerProductLength; ip++) {\r\n    s += texelFetch(tex_input_a, c_a, 0).r * texelFetch(tex_input_b, c_b, 0).r;\r\n    c_a.x += tex_input_a_stride_1;\r\n    if (c_a.x >= texture_w_a) {\r\n      c_a = ivec2(c_a.x - texture_w_a, c_a.y + 1);\r\n    }\r\n    c_b.x += tex_input_b_stride_0;\r\n    if (c_b.x >= texture_w_b) {\r\n      c_b = ivec2(c_b.x - texture_w_b, c_b.y + 1);\r\n    }\r\n  }\r\n  ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n  return;\r\n}\r\n`\n            : `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n\r\n#define innerProductLength ${innerProductLength}\r\n${shaderHelper_1.shaderGenTensorOutputUniform(resultDims.length)}\r\n\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input_a\", 2, context.webgl2)}\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input_b\", 2, context.webgl2)}\r\n\r\nvoid main() {\r\n  ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(resultDims.length)}\r\n  float s = 0.0;\r\n  for (int ip = 0; ip < innerProductLength; ip++) {\r\n    s += get_tex_input_a(tex_output_0, ip) * get_tex_input_b(ip, tex_output_1);\r\n  }\r\n  ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n  return;\r\n}\r\n`, kernelName = `matmul_2_${innerProductLength}`;\n        context.addKernel(kernelName, kernelSource);\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input_a\", stridesA, dA, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input_b\", stridesB, dB, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem(resultDims, dC, context.webgl2),\n        ];\n        await context.runKernel(kernelName, [\n            { tensor: dA, name: \"tex_input_a\" },\n            { tensor: dB, name: \"tex_input_b\" },\n        ], dC, uniforms);\n    }\n    async calcDim3(context, dA, dB, dC, resultDims, resultStrides, stridesA, stridesB, innerProductLength) {\n        const kernelSource = context.webgl2\n            ? `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n\r\n#define innerProductLength ${innerProductLength}\r\n${shaderHelper_1.shaderGenTensorOutputUniform(resultDims.length)}\r\n\r\nuniform sampler2D tex_input_a;\r\nuniform int tex_input_a_stride_0;\r\nuniform int tex_input_a_stride_1;\r\nuniform int tex_input_a_stride_2;\r\n\r\nivec2 get_coord_a(int d0, int d1) {\r\n  int flat_index = d0 * tex_input_a_stride_0 + d1 * tex_input_a_stride_1;\r\n  int texture_w = textureSize(tex_input_a, 0).x;\r\n  int y = flat_index / texture_w;\r\n  int x = flat_index - y * texture_w;\r\n  return ivec2(x, y);\r\n}\r\n\r\nuniform sampler2D tex_input_b;\r\nuniform int tex_input_b_stride_0;\r\nuniform int tex_input_b_stride_1;\r\nuniform int tex_input_b_stride_2;\r\n\r\nivec2 get_coord_b(int d0, int d2) {\r\n  int flat_index = d0 * tex_input_b_stride_0 + d2 * tex_input_b_stride_2;\r\n  int texture_w = textureSize(tex_input_b, 0).x;\r\n  int y = flat_index / texture_w;\r\n  int x = flat_index - y * texture_w;\r\n  return ivec2(x, y);\r\n}\r\n\r\nvoid main() {\r\n  ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(resultDims.length)}\r\n  float s = 0.0;\r\n  ivec2 c_a = get_coord_a(tex_output_0, tex_output_1);\r\n  ivec2 c_b = get_coord_b(tex_output_0, tex_output_2);\r\n  int texture_w_a = textureSize(tex_input_a, 0).x;\r\n  int texture_w_b = textureSize(tex_input_b, 0).x;\r\n  for (int ip = 0; ip < innerProductLength; ip++) {\r\n    s += texelFetch(tex_input_a, c_a, 0).r * texelFetch(tex_input_b, c_b, 0).r;\r\n    c_a.x += tex_input_a_stride_2;\r\n    if (c_a.x >= texture_w_a) {\r\n      c_a = ivec2(c_a.x - texture_w_a, c_a.y + 1);\r\n    }\r\n    c_b.x += tex_input_b_stride_1;\r\n    if (c_b.x >= texture_w_b) {\r\n      c_b = ivec2(c_b.x - texture_w_b, c_b.y + 1);\r\n    }\r\n  }\r\n  ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n  return;\r\n}\r\n`\n            : `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n\r\n#define innerProductLength ${innerProductLength}\r\n${shaderHelper_1.shaderGenTensorOutputUniform(resultDims.length)}\r\n\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input_a\", 3, context.webgl2)}\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input_b\", 3, context.webgl2)}\r\n\r\nvoid main() {\r\n  ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(resultDims.length)}\r\n  float s = 0.0;\r\n  for (int ip = 0; ip < innerProductLength; ip++) {\r\n    s += get_tex_input_a(tex_output_0, tex_output_1, ip) * get_tex_input_b(tex_output_0, ip, tex_output_2);\r\n  }\r\n  ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n  return;\r\n}\r\n`, kernelName = `matmul_3_${innerProductLength}`;\n        context.addKernel(kernelName, kernelSource);\n        if (stridesA[2] > dA.textureWidth || stridesB[1] > dB.textureWidth) {\n            throw new Error(\"MatMul: kernel assumption does not hold\");\n        }\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input_a\", stridesA, dA, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input_b\", stridesB, dB, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem(resultDims, dC, context.webgl2),\n        ];\n        await context.runKernel(kernelName, [\n            { tensor: dA, name: \"tex_input_a\" },\n            { tensor: dB, name: \"tex_input_b\" },\n        ], dC, uniforms);\n    }\n}\nexports.WebGLMatMul = WebGLMatMul;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"MatMul\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLMatMul(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/matmul.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/maxpool.ts":
/*!*****************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/maxpool.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.WebGLMaxPool = void 0;\nconst maxpool_1 = __webpack_require__(/*! ../../../base/maxpool */ \"./src/descriptor_runner/operators/base/maxpool.ts\");\nconst shaderHelper_1 = __webpack_require__(/*! ../../shaderHelper */ \"./src/descriptor_runner/operators/webgl/shaderHelper.ts\");\n// Version 11\nclass WebGLMaxPool extends maxpool_1.MaxPool {\n    constructor() {\n        super(\"webgl\");\n    }\n    async run(context, inputs, nOutputs) {\n        context.assertsWebGLTensorArray(inputs);\n        const inputX = inputs[0];\n        if (nOutputs !== 1) {\n            // TODO: Indicesの出力対応\n            throw new Error(\"MaxPool: output indices is not yet supported\");\n        }\n        // TODO: 2D以外対応\n        if (inputX.ndim !== 4) {\n            throw new Error(\"MaxPool other than 2D is not yet supported\");\n        }\n        if (inputX.dimPerPixel !== 1) {\n            throw new Error();\n        }\n        const { batch, dilations, kernelShape, pads, strides, inShape, outShape, ch, } = this.calcShape(inputX.dims), output = context.emptyTensor([batch, ch, outShape[0], outShape[1]], \"float32\"), \n        // ループ回数は定数が必要\n        kernelName = `maxpool_${kernelShape[0]}_${kernelShape[1]}`, kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n\r\n#define K0 ${kernelShape[0]}\r\n#define K1 ${kernelShape[1]}\r\nuniform int CH;\r\nuniform int S0;\r\nuniform int S1;\r\nuniform int P0;\r\nuniform int P1;\r\nuniform int D0;\r\nuniform int D1;\r\nuniform int IS0;\r\nuniform int IS1;\r\n${shaderHelper_1.shaderGenTensorOutputUniform(4)}\r\n\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input\", 4, context.webgl2)}\r\n\r\nvoid main() {\r\n  ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(4)}\r\n  float s = -65536.0;\r\n  for (int k0 = 0; k0 < K0; k0++) {\r\n    for (int k1 = 0; k1 < K1; k1++) {\r\n      int in0 = tex_output_2 * S0 - P0 + k0 * D0;\r\n      int in1 = tex_output_3 * S1 - P1 + k1 * D1;\r\n      if (in0 >= 0 && in0 < IS0 && in1 >= 0 && in1 < IS1) {\r\n        float v = get_tex_input(tex_output_0, tex_output_1, in0, in1);\r\n        if (v > s) {\r\n          s = v;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n  return;\r\n}\r\n`;\n        context.addKernel(kernelName, kernelSource);\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input\", inputX.strides, inputX, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem(output.dims, output, context.webgl2),\n            { name: \"CH\", type: \"int\", value: ch },\n            { name: \"S0\", type: \"int\", value: strides[0] },\n            { name: \"S1\", type: \"int\", value: strides[1] },\n            { name: \"P0\", type: \"int\", value: pads[0] },\n            { name: \"P1\", type: \"int\", value: pads[1] },\n            { name: \"D0\", type: \"int\", value: dilations[0] },\n            { name: \"D1\", type: \"int\", value: dilations[1] },\n            { name: \"IS0\", type: \"int\", value: inShape[0] },\n            { name: \"IS1\", type: \"int\", value: inShape[1] },\n        ];\n        await context.runKernel(kernelName, [{ tensor: inputX, name: \"tex_input\" }], output, uniforms);\n        return [output];\n    }\n}\nexports.WebGLMaxPool = WebGLMaxPool;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"MaxPool\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLMaxPool(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/maxpool.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/pad11.ts":
/*!***************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/pad11.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst pad11_1 = __webpack_require__(/*! ../../../base/pad11 */ \"./src/descriptor_runner/operators/base/pad11.ts\");\nconst shaderHelper_1 = __webpack_require__(/*! ../../shaderHelper */ \"./src/descriptor_runner/operators/webgl/shaderHelper.ts\");\nconst util_1 = __webpack_require__(/*! ../../../../util */ \"./src/descriptor_runner/util.ts\");\n/*\n * Opset 11\n * opset 2は互換性なし\n */\nclass WebGLPad11 extends pad11_1.Pad11 {\n    constructor() {\n        super(\"webgl\");\n    }\n    async run(context, inputs) {\n        const [input, shapeTensor, constantValueTensor] = inputs;\n        context.assertsWebGLTensor(input);\n        context.cpuContext.assertsCPUTensor(shapeTensor);\n        const { outputShape: outShape, pads } = this.calcShape(input, shapeTensor);\n        let constantValue = 0;\n        if (constantValueTensor) {\n            context.cpuContext.assertsCPUTensor(constantValueTensor);\n            constantValue = constantValueTensor.data[0];\n        }\n        const output = context.emptyTensor(outShape, \"float32\");\n        const kernelName = `pad_${outShape.length}_${this.mode}`;\n        const padUniforms = util_1.arange(outShape.length)\n            .map((dim) => `uniform int pad${dim};`)\n            .join(\"\");\n        const inShapeUniforms = util_1.arange(outShape.length)\n            .map((dim) => `uniform int inShape${dim};`)\n            .join(\"\");\n        const constantUniform = this.mode === \"constant\" ? \"uniform float padConstant;\" : \"\";\n        const tex_input_idxs = util_1.arange(outShape.length)\n            .map((dim) => `ti${dim}`)\n            .join(\",\");\n        const minusPad = util_1.arange(outShape.length)\n            .map((dim) => `int ti${dim} = tex_output_${dim} - pad${dim};`)\n            .join(\"\");\n        const outOfBoundCond = util_1.arange(outShape.length)\n            .map((dim) => `ti${dim} < 0 || ti${dim} >= inShape${dim}`)\n            .join(\"||\");\n        let indexAdjuster;\n        let valueGetter;\n        switch (this.mode) {\n            case \"constant\":\n                indexAdjuster = \"\";\n                valueGetter = `if (${outOfBoundCond}) {s = padConstant;} else {s = get_tex_input(${tex_input_idxs});}`;\n                break;\n            case \"edge\":\n                indexAdjuster = util_1.arange(outShape.length)\n                    .map((dim) => `if (ti${dim} < 0) {ti${dim} = 0;} else if (ti${dim} >= inShape${dim}) {ti${dim} = inShape${dim} - 1;}`)\n                    .join(\"\");\n                valueGetter = `s = get_tex_input(${tex_input_idxs});`;\n                break;\n            case \"reflect\":\n                indexAdjuster = util_1.arange(outShape.length)\n                    .map((dim) => `if (ti${dim} < 0) {ti${dim} = pad_mod(-ti${dim}, inShape${dim} * 2 - 2); if (ti${dim} >= inShape${dim}) {ti${dim} = inShape${dim} * 2 - ti${dim} - 2;}} else if (ti${dim} >= inShape${dim}) {ti${dim} = pad_mod(ti${dim}, inShape${dim} * 2 - 2); if (ti${dim} >= inShape${dim}) {ti${dim} = inShape${dim} * 2 - ti${dim} - 2;}}`)\n                    .join(\"\");\n                valueGetter = `s = get_tex_input(${tex_input_idxs});`;\n                break;\n        }\n        const kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\nint pad_mod(int x, int y) {\r\n    int z = x / y;\r\n    return x - z * y;\r\n}\r\n${padUniforms}\r\n${constantUniform}\r\n${inShapeUniforms}\r\n${shaderHelper_1.shaderGenTensorOutputUniform(outShape.length)}\r\n\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input\", input.ndim, context.webgl2)}\r\n\r\nvoid main() {\r\n${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(outShape.length)}\r\n${minusPad}\r\n${indexAdjuster}\r\nfloat s;\r\n${valueGetter}\r\n${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\nreturn;\r\n}\r\n`;\n        context.addKernel(kernelName, kernelSource);\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input\", input.strides, input, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem(outShape, output, context.webgl2),\n        ];\n        for (let dim = 0; dim < outShape.length; dim++) {\n            uniforms.push({ name: `pad${dim}`, value: pads[dim], type: \"int\" });\n            uniforms.push({\n                name: `inShape${dim}`,\n                value: input.dims[dim],\n                type: \"int\",\n            });\n        }\n        if (this.mode === \"constant\") {\n            uniforms.push({\n                name: \"padConstant\",\n                value: constantValue,\n                type: \"float\",\n            });\n        }\n        await context.runKernel(kernelName, [{ tensor: input, name: \"tex_input\" }], output, uniforms);\n        return [output];\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Pad\",\n            backend: \"webgl\",\n            opsetMin: 11,\n            factory: () => new WebGLPad11(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/pad11.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/reduce.ts":
/*!****************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/reduce.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.ReduceOp = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nconst shaderHelper_1 = __webpack_require__(/*! ../../shaderHelper */ \"./src/descriptor_runner/operators/webgl/shaderHelper.ts\");\n// Opset 1\nclass ReduceOp extends operatorImpl_1.OperatorImpl {\n    constructor(opType, shaderInit, shaderAccum, shaderOutput) {\n        super(\"webgl\");\n        this.opType = opType;\n        this.shaderInit = shaderInit;\n        this.shaderAccum = shaderAccum;\n        this.shaderOutput = shaderOutput;\n    }\n    initialize(attribute) {\n        super.initialize(attribute);\n        this.axes = operatorUtil_1.getAttrInts(attribute, \"axes\", []);\n        this.keepdims = operatorUtil_1.getAttrInt(attribute, \"keepdims\", 1) !== 0;\n    }\n    async run(context, inputs) {\n        context.assertsWebGLTensorArray(inputs);\n        const input = inputs[0];\n        if (this.axes.length !== 1) {\n            throw new Error(`${this.opType}: only single axis is supported`);\n        }\n        let axis = this.axes[0];\n        if (axis < 0) {\n            axis += input.ndim;\n        }\n        if (axis !== input.ndim - 1) {\n            throw new Error(`${this.opType}: currently only reducing final axis is supported`);\n        }\n        // 最終軸のreductionに特化した実装\n        const reductionLength = input.dims[axis], outerLength = input.length / reductionLength, outShape = input.dims.slice();\n        if (this.keepdims) {\n            outShape[axis] = 1;\n        }\n        else {\n            outShape.pop();\n        }\n        const output = context.emptyTensor(outShape, input.dataType), kernelName = `reduceop_${this.opType}_${reductionLength}`, kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n\r\n#define reductionLength ${reductionLength}\r\n#define reductionMul ${1 / reductionLength}\r\n${shaderHelper_1.shaderGenTensorOutputUniform(1)}\r\n\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input\", 2, context.webgl2)}\r\n\r\nvoid main() {\r\n  ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(1)}\r\n  float s = ${this.shaderInit}\r\n  for (int i = 0; i < reductionLength; i++) {\r\n    float v = get_tex_input(tex_output_0, i);\r\n    ${this.shaderAccum}\r\n  }\r\n  ${this.shaderOutput}\r\n  ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n  return;\r\n}\r\n`;\n        context.addKernel(kernelName, kernelSource);\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input\", [reductionLength, 1], input, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([outerLength], output, context.webgl2),\n        ];\n        await context.runKernel(kernelName, [{ tensor: input, name: \"tex_input\" }], output, uniforms);\n        return [output];\n    }\n}\nexports.ReduceOp = ReduceOp;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"ReduceL1\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new ReduceOp(\"ReduceL1\", \"0.0;\", \"s += abs(v);\", \"\"),\n        },\n        {\n            opType: \"ReduceL2\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new ReduceOp(\"ReduceL2\", \"0.0;\", \"s += v * v;\", \"s = sqrt(s);\"),\n        },\n        {\n            opType: \"ReduceLogSum\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new ReduceOp(\"ReduceLogSum\", \"0.0;\", \"s += v;\", \"s = log(s);\"),\n        },\n        {\n            opType: \"ReduceLogSumExp\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new ReduceOp(\"ReduceLogSumExp\", \"0.0;\", \"s += exp(v);\", \"s = log(s);\"),\n        },\n        {\n            opType: \"ReduceMax\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new ReduceOp(\"ReduceMax\", \"-65536.0;\", \"if (v > s) { s = v; }\", \"\"),\n        },\n        {\n            opType: \"ReduceMean\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new ReduceOp(\"ReduceMean\", \"0.0;\", \"s += v;\", \"s *= reductionMul;\"),\n        },\n        {\n            opType: \"ReduceMin\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new ReduceOp(\"ReduceMin\", \"65536.0;\", \"if (v < s) { s = v; }\", \"\"),\n        },\n        {\n            opType: \"ReduceProd\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new ReduceOp(\"ReduceProd\", \"1.0;\", \"s *= v;\", \"\"),\n        },\n        {\n            opType: \"ReduceSum\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            opsetMax: 13,\n            factory: () => new ReduceOp(\"ReduceSum\", \"0.0;\", \"s += v;\", \"\"),\n        },\n        {\n            opType: \"ReduceSumSquare\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new ReduceOp(\"ReduceSumSquare\", \"0.0;\", \"s += v * v;\", \"\"),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/reduce.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/reshape5.ts":
/*!******************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/reshape5.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.WebGLReshape5 = void 0;\nconst reshape5_1 = __webpack_require__(/*! ../../../base/reshape5 */ \"./src/descriptor_runner/operators/base/reshape5.ts\");\nclass WebGLReshape5 extends reshape5_1.Reshape5 {\n    constructor() {\n        super(\"webgl\");\n    }\n    getTensorBackendRequirement(nInputs, nOutputs) {\n        return [this.backend, \"cpu\"];\n    }\n    async run(context, inputs) {\n        const input = inputs[0], shapeTensor = inputs[1];\n        if (!context.cpuContext.isCPUTensor(shapeTensor)) {\n            throw new Error(`Reshape: shapeTensor is not on cpu.`);\n        }\n        if (!context.isWebGLTensor(input)) {\n            throw new Error(\"Reshape: input is not on webgl.\");\n        }\n        const computedShape = this.calcShape(input, shapeTensor);\n        return [input.alias(computedShape)];\n    }\n}\nexports.WebGLReshape5 = WebGLReshape5;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Reshape\",\n            backend: \"webgl\",\n            opsetMin: 5,\n            factory: () => new WebGLReshape5(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/reshape5.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/softmax.ts":
/*!*****************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/softmax.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.Softmax = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nconst shaderHelper_1 = __webpack_require__(/*! ../../shaderHelper */ \"./src/descriptor_runner/operators/webgl/shaderHelper.ts\");\n// Opset 1\nclass Softmax extends operatorImpl_1.OperatorImpl {\n    constructor() {\n        super(\"webgl\");\n    }\n    initialize(attribute) {\n        // TODO: cpuと共通\n        super.initialize(attribute);\n        this.axis = operatorUtil_1.getAttrInt(attribute, \"axis\", -1);\n    }\n    async run(context, inputs) {\n        context.assertsWebGLTensorArray(inputs);\n        const input = inputs[0];\n        let { axis } = this;\n        if (axis < 0) {\n            axis += input.ndim;\n        }\n        if (axis !== input.ndim - 1) {\n            throw new Error(\"Softmax: currently only reducing final axis is supported\");\n        }\n        // 最終軸のreductionに特化した実装\n        const reductionLength = input.dims[axis], outerLength = input.length / reductionLength;\n        if (context.webgl2) {\n            // 最大値計算\n            const maxSumExpTensor = context.emptyTensor([outerLength * 4], \"float32\", { dimPerPixel: 4 });\n            await this.calcMax2(context, outerLength, reductionLength, input, maxSumExpTensor);\n            // 結果計算\n            const output = context.emptyTensor(input.dims, input.dataType);\n            await this.calcOutput2(context, outerLength, reductionLength, input, maxSumExpTensor, output);\n            maxSumExpTensor.dispose();\n            return [output];\n        }\n        else {\n            // 最大値計算\n            const maxTensor = context.emptyTensor([outerLength]);\n            await this.calcMax(context, outerLength, reductionLength, input, maxTensor);\n            // Sum(exp)計算\n            const sumExpTensor = context.emptyTensor([outerLength]);\n            await this.calcSumExp(context, outerLength, reductionLength, input, maxTensor, sumExpTensor);\n            // 結果計算\n            const output = context.emptyTensor(input.dims, input.dataType);\n            await this.calcOutput(context, outerLength, reductionLength, input, maxTensor, sumExpTensor, output);\n            maxTensor.dispose();\n            sumExpTensor.dispose();\n            return [output];\n        }\n    }\n    async calcMax2(context, outerLength, reductionLength, input, maxSumExpTensor) {\n        const kernelName = `softmax_max_${reductionLength}`, kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n\r\n#define reductionLength ${reductionLength}\r\n${shaderHelper_1.shaderGenTensorOutputUniform(1)}\r\nuniform sampler2D tex_input;\r\nuniform int tex_input_stride_0;\r\nuniform int tex_input_stride_1;\r\n\r\nivec2 get_coord(int d0) {\r\n  int flat_index = d0 * tex_input_stride_0;\r\n  int texture_w = textureSize(tex_input, 0).x;\r\n  int y = flat_index / texture_w;\r\n  int x = flat_index - y * texture_w;\r\n  return ivec2(x, y);\r\n}\r\n\r\nvoid main() {\r\n  ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(1)}\r\n  int texture_w = textureSize(tex_input, 0).x;\r\n  ivec2 c_init = get_coord(tex_output_0);\r\n  ivec2 c_i = c_init;\r\n  float s_max = texelFetch(tex_input, c_i, 0).r;\r\n  c_i.x += 1;\r\n  if (c_i.x >= texture_w) {\r\n    c_i = ivec2(0, c_i.y + 1);\r\n  }\r\n  for (int i = 1; i < reductionLength; i++) {\r\n    float v = texelFetch(tex_input, c_i, 0).r;\r\n    if (v > s_max) {\r\n      s_max = v;\r\n    }\r\n    c_i.x += 1;\r\n    if (c_i.x >= texture_w) {\r\n      c_i = ivec2(0, c_i.y + 1);\r\n    }\r\n  }\r\n  c_i = c_init;\r\n  float s_sum_exp = 0.0;\r\n  for (int i = 0; i < reductionLength; i++) {\r\n    float v = texelFetch(tex_input, c_i, 0).r;\r\n    s_sum_exp += exp(v - s_max);\r\n    c_i.x += 1;\r\n    if (c_i.x >= texture_w) {\r\n      c_i = ivec2(0, c_i.y + 1);\r\n    }\r\n  }\r\n  s_sum_exp = 1.0 / s_sum_exp;\r\n\r\n  vec4 s = vec4(s_max, s_sum_exp, 0.0, 0.0);\r\n  ${shaderHelper_1.shaderGenOutputVec4(\"s\", context.webgl2)}\r\n  return;\r\n}\r\n`;\n        context.addKernel(kernelName, kernelSource);\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input\", [reductionLength, 1], input, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([outerLength], maxSumExpTensor, context.webgl2),\n        ];\n        await context.runKernel(kernelName, [{ tensor: input, name: \"tex_input\" }], maxSumExpTensor, uniforms);\n    }\n    async calcOutput2(context, outerLength, reductionLength, input, maxSumExpTensor, output) {\n        const kernelName = `softmax_output`, kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n\r\n${shaderHelper_1.shaderGenTensorOutputUniform(2)}\r\n\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input\", 2, context.webgl2)}\r\n${shaderHelper_1.shaderGenTensorNDGetVec4(\"tex_max_sum_exp\", 1, context.webgl2)}\r\n\r\nvoid main() {\r\n  ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(2)}\r\n  vec4 m = get_vec4_tex_max_sum_exp(tex_output_0);\r\n  float v = get_tex_input(tex_output_0, tex_output_1);\r\n  float s = exp(v - m.r) * m.g;\r\n  ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n  return;\r\n}\r\n`;\n        context.addKernel(kernelName, kernelSource);\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input\", [reductionLength, 1], input, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_max_sum_exp\", [1], maxSumExpTensor, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([outerLength, reductionLength], output, context.webgl2),\n        ];\n        await context.runKernel(kernelName, [\n            { tensor: input, name: \"tex_input\" },\n            { tensor: maxSumExpTensor, name: \"tex_max_sum_exp\" },\n        ], output, uniforms);\n    }\n    async calcMax(context, outerLength, reductionLength, input, maxTensor) {\n        const kernelName = `softmax_max_${reductionLength}`, kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n\r\n#define reductionLength ${reductionLength}\r\n${shaderHelper_1.shaderGenTensorOutputUniform(1)}\r\n\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input\", 2, context.webgl2)}\r\n\r\nvoid main() {\r\n  ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(1)}\r\n  float s = get_tex_input(tex_output_0, 0);\r\n  for (int i = 1; i < reductionLength; i++) {\r\n    float v = get_tex_input(tex_output_0, i);\r\n    if (v > s) {\r\n      s = v;\r\n    }\r\n  }\r\n  ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n  return;\r\n}\r\n`;\n        context.addKernel(kernelName, kernelSource);\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input\", [reductionLength, 1], input, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([outerLength], maxTensor, context.webgl2),\n        ];\n        await context.runKernel(kernelName, [{ tensor: input, name: \"tex_input\" }], maxTensor, uniforms);\n    }\n    async calcSumExp(context, outerLength, reductionLength, input, maxTensor, sumExpTensor) {\n        const kernelName = `softmax_sumexp_${reductionLength}`, kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n\r\n#define reductionLength ${reductionLength}\r\n${shaderHelper_1.shaderGenTensorOutputUniform(1)}\r\n\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input\", 2, context.webgl2)}\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_max\", 1, context.webgl2)}\r\n\r\nvoid main() {\r\n  ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(1)}\r\n  float s = 0.0;\r\n  float m = get_tex_max(tex_output_0);\r\n  for (int i = 0; i < reductionLength; i++) {\r\n    float v = get_tex_input(tex_output_0, i);\r\n    s += exp(v - m);\r\n  }\r\n  s = 1.0 / s;\r\n  ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n  return;\r\n}\r\n`;\n        context.addKernel(kernelName, kernelSource);\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input\", [reductionLength, 1], input, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_max\", [1], maxTensor, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([outerLength], sumExpTensor, context.webgl2),\n        ];\n        await context.runKernel(kernelName, [\n            { tensor: input, name: \"tex_input\" },\n            { tensor: maxTensor, name: \"tex_max\" },\n        ], sumExpTensor, uniforms);\n    }\n    async calcOutput(context, outerLength, reductionLength, input, maxTensor, sumExpTensor, output) {\n        const kernelName = `softmax_output`, kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n\r\n${shaderHelper_1.shaderGenTensorOutputUniform(2)}\r\n\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input\", 2, context.webgl2)}\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_max\", 1, context.webgl2)}\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_sumexp\", 1, context.webgl2)}\r\n\r\nvoid main() {\r\n  ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(2)}\r\n  float m = get_tex_max(tex_output_0);\r\n  float se = get_tex_sumexp(tex_output_0);\r\n  float v = get_tex_input(tex_output_0, tex_output_1);\r\n  float s = exp(v - m) * se;\r\n  ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n  return;\r\n}\r\n`;\n        context.addKernel(kernelName, kernelSource);\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input\", [reductionLength, 1], input, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_max\", [1], maxTensor, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_sumexp\", [1], sumExpTensor, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem([outerLength, reductionLength], output, context.webgl2),\n        ];\n        await context.runKernel(kernelName, [\n            { tensor: input, name: \"tex_input\" },\n            { tensor: maxTensor, name: \"tex_max\" },\n            { tensor: sumExpTensor, name: \"tex_sumexp\" },\n        ], output, uniforms);\n    }\n}\nexports.Softmax = Softmax;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Softmax\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new Softmax(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/softmax.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/split.ts":
/*!***************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/split.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.WebGLSplit2 = void 0;\nconst shaderHelper_1 = __webpack_require__(/*! ../../shaderHelper */ \"./src/descriptor_runner/operators/webgl/shaderHelper.ts\");\nconst split_1 = __webpack_require__(/*! ../../../base/split */ \"./src/descriptor_runner/operators/base/split.ts\");\nclass WebGLSplit2 extends split_1.Split2 {\n    constructor() {\n        super(\"webgl\");\n    }\n    async run(context, inputs, nOutputs) {\n        context.assertsWebGLTensorArray(inputs);\n        const input = inputs[0], { eachOutputParams, outerLength, innerLength, inOuterStride, inConcatStride, } = this.calcShape(input, nOutputs), outputs = [], kernelName = \"split\", kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n\r\n${shaderHelper_1.shaderGenTensorOutputUniform(3)}\r\nuniform int offset;\r\n\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input\", 3, context.webgl2)}\r\n\r\nvoid main() {\r\n  ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(3)}\r\n  float s = get_tex_input(tex_output_0, tex_output_1 + offset, tex_output_2);\r\n  ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n  return;\r\n}\r\n`;\n        context.addKernel(kernelName, kernelSource);\n        for (let i = 0; i < nOutputs; i++) {\n            const { dim, offset, outShape } = eachOutputParams[i], ot = context.emptyTensor(outShape, input.dataType), uniforms = [\n                ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input\", [inOuterStride, inConcatStride, 1], input, context.webgl2),\n                ...shaderHelper_1.shaderGenTensorOutputUniformItem([outerLength, dim, innerLength], ot, context.webgl2),\n                { name: \"offset\", type: \"int\", value: offset },\n            ];\n            await context.runKernel(kernelName, [{ tensor: input, name: \"tex_input\" }], ot, uniforms);\n            outputs.push(ot);\n        }\n        return outputs;\n    }\n}\nexports.WebGLSplit2 = WebGLSplit2;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Split\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            opsetMax: 13,\n            factory: () => new WebGLSplit2(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/split.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/squeeze.ts":
/*!*****************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/squeeze.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.WebGLSqueeze13 = exports.WebGLSqueeze1 = void 0;\nconst squeeze_1 = __webpack_require__(/*! ../../../base/squeeze */ \"./src/descriptor_runner/operators/base/squeeze.ts\");\nclass WebGLSqueeze1 extends squeeze_1.Squeeze1 {\n    constructor() {\n        super(\"webgl\");\n    }\n    async run(context, inputs) {\n        context.assertsWebGLTensorArray(inputs);\n        const input = inputs[0], computedShape = this.calcShape(input);\n        return [input.alias(computedShape)];\n    }\n}\nexports.WebGLSqueeze1 = WebGLSqueeze1;\nclass WebGLSqueeze13 extends squeeze_1.Squeeze13 {\n    constructor() {\n        super(\"webgl\");\n    }\n    getTensorBackendRequirement(nInputs, nOutputs) {\n        return [this.backend, \"cpu\"];\n    }\n    async run(context, inputs) {\n        const input = inputs[0], axes = inputs[1];\n        if (!context.cpuContext.isCPUTensor(axes)) {\n            throw new Error(`Unsqueeze: axes is not on cpu.`);\n        }\n        if (!context.isWebGLTensor(input)) {\n            throw new Error(\"Unsqueeze: input is not on webgl.\");\n        }\n        const computedShape = this.calcShape(input, axes);\n        return [input.alias(computedShape)];\n    }\n}\nexports.WebGLSqueeze13 = WebGLSqueeze13;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Squeeze\",\n            backend: \"webgl\",\n            opsetMin: 13,\n            factory: () => new WebGLSqueeze13(),\n        },\n        {\n            opType: \"Squeeze\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            opsetMax: 13,\n            factory: () => new WebGLSqueeze1(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/squeeze.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/transpose.ts":
/*!*******************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/transpose.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.WebGLTranspose = void 0;\nconst shaderHelper_1 = __webpack_require__(/*! ../../shaderHelper */ \"./src/descriptor_runner/operators/webgl/shaderHelper.ts\");\nconst transpose_1 = __webpack_require__(/*! ../../../base/transpose */ \"./src/descriptor_runner/operators/base/transpose.ts\");\n// Version 11\nclass WebGLTranspose extends transpose_1.Transpose {\n    constructor() {\n        super(\"webgl\");\n    }\n    async run(context, inputs) {\n        context.assertsWebGLTensorArray(inputs);\n        const input = inputs[0];\n        if (input.dataType !== \"float32\") {\n            throw new Error();\n        }\n        if (input.dimPerPixel !== 1) {\n            throw new Error();\n        }\n        const { outShape, inStrides } = this.calcShape(input), output = context.emptyTensor(outShape, \"float32\"), kernelName = `transpose_${outShape.length}`;\n        let tex_input_idxs;\n        switch (inStrides.length) {\n            case 0:\n                tex_input_idxs = \"\";\n                break;\n            case 1:\n                tex_input_idxs = \"tex_output_0\";\n                break;\n            case 2:\n                tex_input_idxs = \"tex_output_0, tex_output_1\";\n                break;\n            case 3:\n                tex_input_idxs = \"tex_output_0, tex_output_1, tex_output_2\";\n                break;\n            case 4:\n                tex_input_idxs =\n                    \"tex_output_0, tex_output_1, tex_output_2, tex_output_3\";\n                break;\n            default:\n                throw new Error(\"Input with more than 4 dimensions is not supported\");\n        }\n        const kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n\r\n${shaderHelper_1.shaderGenTensorOutputUniform(outShape.length)}\r\n\r\n${shaderHelper_1.shaderGenTensorNDGet(\"tex_input\", inStrides.length, context.webgl2)}\r\n\r\nvoid main() {\r\n  ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(outShape.length)}\r\n  float s = get_tex_input(${tex_input_idxs});\r\n  ${shaderHelper_1.shaderGenOutput(\"s\", context.webgl2)}\r\n  return;\r\n}\r\n`;\n        context.addKernel(kernelName, kernelSource);\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input\", inStrides, input, context.webgl2),\n            ...shaderHelper_1.shaderGenTensorOutputUniformItem(outShape, output, context.webgl2),\n        ];\n        await context.runKernel(kernelName, [{ tensor: input, name: \"tex_input\" }], output, uniforms);\n        return [output];\n    }\n}\nexports.WebGLTranspose = WebGLTranspose;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Transpose\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLTranspose(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/transpose.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/unary.ts":
/*!***************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/unary.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.WebGLUnary = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst shaderHelper_1 = __webpack_require__(/*! ../../shaderHelper */ \"./src/descriptor_runner/operators/webgl/shaderHelper.ts\");\nclass WebGLUnary extends operatorImpl_1.OperatorImpl {\n    constructor(kernelName, unaryCalculationSource, unaryCalculationSourceWebGL1) {\n        super(\"webgl\");\n        this.kernelName = kernelName;\n        this.unaryCalculationSource = unaryCalculationSource;\n        this.unaryCalculationSourceWebGL1 = unaryCalculationSourceWebGL1;\n    }\n    async run(context, inputs) {\n        context.assertsWebGLTensorArray(inputs);\n        const input = inputs[0];\n        if (input.dataType !== \"float32\") {\n            throw new Error();\n        }\n        const outputTensor = context.emptyTensor(input.dims, \"float32\");\n        // Elementwiseのアクセスにおいてテクスチャサイズが同じであることを仮定\n        if (input.textureWidth !== outputTensor.textureWidth ||\n            input.textureHeight !== outputTensor.textureHeight ||\n            input.dimPerPixel !== 1) {\n            throw new Error();\n        }\n        /*\n         * Gl_FragCoord.x: 0.5, 1.5, 2.5, ..., textureWidth-0.5\n         * texture2D(textureName, vec2(x, y)): x=(0.5, 1.5, 2.5, ...) / textureWidth\n         */\n        if (!context.hasKernel(this.kernelName)) {\n            const kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n  ${shaderHelper_1.shaderGenTensorElementwiseGet(\"tex_input\", context.webgl2)}\r\n  void main() {\r\n    float s = get_tex_input();\r\n    ${!context.webgl2 && this.unaryCalculationSourceWebGL1\n                ? this.unaryCalculationSourceWebGL1\n                : this.unaryCalculationSource}\r\n    ${shaderHelper_1.shaderGenOutput(\"v\", context.webgl2)}\r\n    return;\r\n  }\r\n      `;\n            context.addKernel(this.kernelName, kernelSource);\n        }\n        const uniforms = [\n            ...shaderHelper_1.shaderGenTensorElementwiseGetUniformItem(\"tex_input\", input, context.webgl2),\n        ];\n        await context.runKernel(this.kernelName, [{ tensor: input, name: \"tex_input\" }], outputTensor, uniforms);\n        return [outputTensor];\n    }\n}\nexports.WebGLUnary = WebGLUnary;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Abs\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"abs\", \"float v = abs(s);\"),\n        },\n        {\n            opType: \"Acos\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"acos\", \"float v = acos(s);\"),\n        },\n        {\n            opType: \"Acosh\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"acosh\", \"float v = acosh(s);\", \"float v = log(s + sqrt(s * s - 1.0));\"),\n        },\n        {\n            opType: \"Asin\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"asin\", \"float v = asin(s);\"),\n        },\n        {\n            opType: \"Asinh\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"asinh\", \"float v = asinh(s);\", \"float v = log(s + sqrt(s * s + 1.0));\"),\n        },\n        {\n            opType: \"Atan\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"atan\", \"float v = atan(s);\"),\n        },\n        {\n            opType: \"Atanh\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"atanh\", \"float v = atanh(s);\", \"float v = log((s + 1.0) / (1.0 - s)) * 0.5;\"),\n        },\n        {\n            opType: \"Ceil\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"ceil\", \"float v = ceil(s);\"),\n        },\n        {\n            opType: \"Cos\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"cos\", \"float v = cos(s);\"),\n        },\n        {\n            opType: \"Cosh\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"cosh\", \"float v = cosh(s);\", \"float v = (exp(s) + exp(-s)) * 0.5;\"),\n        },\n        {\n            opType: \"Exp\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"exp\", \"float v = exp(s);\"),\n        },\n        {\n            opType: \"Floor\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"floor\", \"float v = floor(s);\"),\n        },\n        {\n            opType: \"HardSwish\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"hardswish\", \"float v; if (s <= -3.0) { v = 0.0; } else if (s >= 3.0) { v = s; } else { v = s * (s + 3.0) / 6.0; }\"),\n        },\n        {\n            opType: \"Log\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"log\", \"float v = log(s);\"),\n        },\n        {\n            opType: \"Neg\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"neg\", \"float v = -s;\"),\n        },\n        {\n            opType: \"Reciprocal\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"neg\", \"float v = 1.0 / s;\"),\n        },\n        {\n            opType: \"Relu\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"relu\", \"float v = max(s, 0.0);\"),\n        },\n        {\n            opType: \"Round\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"round\", \"float v = round(s);\", \"float v = floor(s + 0.5);\"),\n        },\n        {\n            opType: \"Sigmoid\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"sigmoid\", \"float v = (tanh(s * 0.5) + 1.0) * 0.5;\", \"float v = 1.0 / (1.0 + exp(-s));\"),\n        },\n        {\n            opType: \"Sign\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"sign\", \"float v = sign(s);\"),\n        },\n        {\n            opType: \"Sin\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"sin\", \"float v = sin(s);\"),\n        },\n        {\n            opType: \"Softplus\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"softplus\", \"float v = log(exp(s) + 1.0);\"),\n        },\n        {\n            opType: \"Softsign\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"softsign\", \"float v = s / (1.0 + abs(s));\"),\n        },\n        {\n            opType: \"Sqrt\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"sqrt\", \"float v = sqrt(s);\"),\n        },\n        {\n            opType: \"Tan\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"tan\", \"float v = tan(s);\"),\n        },\n        {\n            opType: \"Tanh\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            factory: () => new WebGLUnary(\"tanh\", \"float v = tanh(s);\", \"float vt = exp(-2.0 * s); float v = (1.0 - vt) / (1.0 + vt);\"),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/unary.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/operators/standard/unsqueeze.ts":
/*!*******************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/operators/standard/unsqueeze.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.WebGLUnsqueeze13 = exports.WebGLUnsqueeze1 = void 0;\nconst unsqueeze_1 = __webpack_require__(/*! ../../../base/unsqueeze */ \"./src/descriptor_runner/operators/base/unsqueeze.ts\");\nclass WebGLUnsqueeze1 extends unsqueeze_1.Unsqueeze1 {\n    constructor() {\n        super(\"webgl\");\n    }\n    async run(context, inputs) {\n        context.assertsWebGLTensorArray(inputs);\n        const input = inputs[0], computedShape = this.calcShape(input);\n        return [input.alias(computedShape)];\n    }\n}\nexports.WebGLUnsqueeze1 = WebGLUnsqueeze1;\nclass WebGLUnsqueeze13 extends unsqueeze_1.Unsqueeze13 {\n    constructor() {\n        super(\"webgl\");\n    }\n    getTensorBackendRequirement(nInputs, nOutputs) {\n        return [this.backend, \"cpu\"];\n    }\n    async run(context, inputs) {\n        const input = inputs[0], axes = inputs[1];\n        if (!context.cpuContext.isCPUTensor(axes)) {\n            throw new Error(`Unsqueeze: axes is not on cpu.`);\n        }\n        if (!context.isWebGLTensor(input)) {\n            throw new Error(\"Unsqueeze: input is not on webgl.\");\n        }\n        const computedShape = this.calcShape(input, axes);\n        return [input.alias(computedShape)];\n    }\n}\nexports.WebGLUnsqueeze13 = WebGLUnsqueeze13;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Unsqueeze\",\n            backend: \"webgl\",\n            opsetMin: 13,\n            factory: () => new WebGLUnsqueeze13(),\n        },\n        {\n            opType: \"Unsqueeze\",\n            backend: \"webgl\",\n            opsetMin: 1,\n            opsetMax: 13,\n            factory: () => new WebGLUnsqueeze1(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/operators/standard/unsqueeze.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/rawcomputation/averagepool.ts":
/*!*****************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/rawcomputation/averagepool.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.averagepool = void 0;\nconst shaderHelper_1 = __webpack_require__(/*! ../shaderHelper */ \"./src/descriptor_runner/operators/webgl/shaderHelper.ts\");\nasync function averagepool(context, dX, dI, countIncludePad, batch, kernelShape, pads, strides, inShape, outShape, ch) {\n    // ループ回数は定数が必要\n    const kernelName = `averagepool_${kernelShape[0]}_${kernelShape[1]}_${countIncludePad}`;\n    if (!context.hasKernel(kernelName)) {\n        const kernelSource = `${shaderHelper_1.shaderGenHeader(context.webgl2)}\r\n\r\n    #define K0 ${kernelShape[0]}\r\n    #define K1 ${kernelShape[1]}\r\n    uniform int CH;\r\n    uniform int S0;\r\n    uniform int S1;\r\n    uniform int P0;\r\n    uniform int P1;\r\n    uniform int IS0;\r\n    uniform int IS1;\r\n    ${shaderHelper_1.shaderGenTensorOutputUniform(4)}\r\n    \r\n    ${shaderHelper_1.shaderGenTensorNDGet(\"tex_input\", 4, context.webgl2)}\r\n    \r\n    void main() {\r\n    ${shaderHelper_1.shaderGenTensorOutputCoordsWithReturn(4)}\r\n    float s = 0.0;\r\n    ${countIncludePad ? \"const float c = float(K0 * K1);\" : \"float c = 0.0;\"}\r\n    for (int k0 = 0; k0 < K0; k0++) {\r\n      for (int k1 = 0; k1 < K1; k1++) {\r\n        int in0 = tex_output_2 * S0 - P0 + k0;\r\n        int in1 = tex_output_3 * S1 - P1 + k1;\r\n        if (in0 >= 0 && in0 < IS0 && in1 >= 0 && in1 < IS1) {\r\n          s += get_tex_input(tex_output_0, tex_output_1, in0, in1);\r\n          ${countIncludePad ? \"\" : \"c++;\"}\r\n        }\r\n      }\r\n    }\r\n    ${shaderHelper_1.shaderGenOutput(\"s / c\", context.webgl2)}\r\n    return;\r\n    }\r\n    `;\n        context.addKernel(kernelName, kernelSource);\n    }\n    const uniforms = [\n        ...shaderHelper_1.shaderGenTensorNDGetUniformItem(\"tex_input\", dX.strides, dX, context.webgl2),\n        ...shaderHelper_1.shaderGenTensorOutputUniformItem(dI.dims, dI, context.webgl2),\n        { name: \"CH\", type: \"int\", value: ch },\n        { name: \"S0\", type: \"int\", value: strides[0] },\n        { name: \"S1\", type: \"int\", value: strides[1] },\n        { name: \"P0\", type: \"int\", value: pads[0] },\n        { name: \"P1\", type: \"int\", value: pads[1] },\n        { name: \"IS0\", type: \"int\", value: inShape[0] },\n        { name: \"IS1\", type: \"int\", value: inShape[1] },\n    ];\n    await context.runKernel(kernelName, [{ tensor: dX, name: \"tex_input\" }], dI, uniforms);\n}\nexports.averagepool = averagepool;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/rawcomputation/averagepool.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgl/shaderHelper.ts":
/*!***************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgl/shaderHelper.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.shaderGenTensorElementwiseGetUniformItem = exports.shaderGenTensorElementwiseGet = exports.shaderGenTensorOutputCoordsWithReturn = exports.shaderGenTensorOutputUniform = exports.shaderGenTensorOutputUniformItem = exports.shaderGenTensorNDGetUniformItem = exports.shaderGenTensorNDGetVec4 = exports.shaderGenTensorNDGet = exports.shaderGenOutputVec4 = exports.shaderGenOutput = exports.shaderGenHeader = exports.shaderHeaderWebGL2 = exports.shaderHeaderWebGL1 = exports.shaderFloatPack = void 0;\n// Float encode: https://community.khronos.org/t/packing-multiple-floats-into-a-single-float-value/59320/3\nexports.shaderFloatPack = `\r\nvec4 encode_float (float val) {\r\n  if (val == 0.0) return vec4(0, 0, 0, 0);\r\n  float sign = val > 0.0 ? 192.0 : 64.0;\r\n  float absval = abs(val);\r\n  float exponent = ceil(log2(absval) + 0.0001);\r\n  float scaled = absval * exp2(-exponent);\r\n  vec3 enc = vec3(1.0, 255.0, 65025.0) * scaled;\r\n  enc = fract(enc);\r\n  enc -= enc.yzz * vec3(1.0/255.0, 1.0/255.0, 0.0);\r\n  return vec4((sign + clamp(exponent, -63.0, 63.0)) * (1.0 / 255.0), enc.x, enc.y, enc.z);\r\n}\r\n\r\nfloat decode_float(vec4 code) {\r\n  if (code.x == 0.0) {\r\n    return 0.0;\r\n  }\r\n  float ebyte = code.x * 255.0;\r\n  float sign, exponent;\r\n  if (ebyte >= 128.0) {\r\n    sign = 1.0;\r\n    exponent = ebyte - 192.0;\r\n  } else {\r\n    sign = -1.0;\r\n    exponent = ebyte - 64.0;\r\n  }\r\n  float scaled = code.w * (1.0 / 65025.0) + code.z * (1.0 / 255.0) + code.y;\r\n  float value = scaled * exp2(exponent) * sign;\r\n  return value;\r\n}\r\n`;\nexports.shaderHeaderWebGL1 = `#version 100\r\nprecision highp float;\r\nprecision highp int;\r\nprecision highp sampler2D;\r\n`;\nexports.shaderHeaderWebGL2 = `#version 300 es\r\nprecision highp float;\r\nprecision highp int;\r\nprecision highp sampler2D;\r\nout vec4 fragColor;\r\n`;\nfunction shaderGenHeader(webgl2) {\n    if (webgl2) {\n        return exports.shaderHeaderWebGL2;\n    }\n    return exports.shaderHeaderWebGL1 + exports.shaderFloatPack;\n}\nexports.shaderGenHeader = shaderGenHeader;\nfunction shaderGenOutput(expr, webgl2) {\n    if (webgl2) {\n        return `fragColor = vec4((${expr}), 0.0, 0.0, 0.0);`;\n    }\n    return `gl_FragColor = encode_float(${expr});`;\n}\nexports.shaderGenOutput = shaderGenOutput;\nfunction shaderGenOutputVec4(expr, webgl2) {\n    if (webgl2) {\n        return `fragColor = (${expr});`;\n    }\n    throw new Error(\"shaderGenOutputVec4 is only for WebGL2\");\n}\nexports.shaderGenOutputVec4 = shaderGenOutputVec4;\nfunction shaderGenTensorNDGet(name, ndim, webgl2) {\n    let args, flat_index, uniforms;\n    switch (ndim) {\n        case 0:\n            uniforms = \"\";\n            args = \"\";\n            flat_index = \"0\";\n            break;\n        case 1:\n            uniforms = `\r\n  uniform int ${name}_stride_0;\r\n          `;\n            args = \"int d0\";\n            flat_index = `d0 * ${name}_stride_0`;\n            break;\n        case 2:\n            uniforms = `\r\n    uniform int ${name}_stride_0;\r\n    uniform int ${name}_stride_1;\r\n            `;\n            args = \"int d0, int d1\";\n            flat_index = `d0 * ${name}_stride_0 + d1 * ${name}_stride_1`;\n            break;\n        case 3:\n            uniforms = `\r\n      uniform int ${name}_stride_0;\r\n      uniform int ${name}_stride_1;\r\n      uniform int ${name}_stride_2;\r\n              `;\n            args = \"int d0, int d1, int d2\";\n            flat_index = `d0 * ${name}_stride_0 + d1 * ${name}_stride_1 + d2 * ${name}_stride_2`;\n            break;\n        case 4:\n            uniforms = `\r\nuniform int ${name}_stride_0;\r\nuniform int ${name}_stride_1;\r\nuniform int ${name}_stride_2;\r\nuniform int ${name}_stride_3;\r\n        `;\n            args = \"int d0, int d1, int d2, int d3\";\n            flat_index = `d0 * ${name}_stride_0 + d1 * ${name}_stride_1 + d2 * ${name}_stride_2 + d3 * ${name}_stride_3`;\n            break;\n        case 5:\n            uniforms = `\r\n  uniform int ${name}_stride_0;\r\n  uniform int ${name}_stride_1;\r\n  uniform int ${name}_stride_2;\r\n  uniform int ${name}_stride_3;\r\n  uniform int ${name}_stride_4;\r\n          `;\n            args = \"int d0, int d1, int d2, int d3, int d4\";\n            flat_index = `d0 * ${name}_stride_0 + d1 * ${name}_stride_1 + d2 * ${name}_stride_2 + d3 * ${name}_stride_3 + d4 * ${name}_stride_4`;\n            break;\n        case 6:\n            uniforms = `\r\n  uniform int ${name}_stride_0;\r\n  uniform int ${name}_stride_1;\r\n  uniform int ${name}_stride_2;\r\n  uniform int ${name}_stride_3;\r\n  uniform int ${name}_stride_4;\r\n  uniform int ${name}_stride_5;\r\n          `;\n            args = \"int d0, int d1, int d2, int d3, int d4, int d5\";\n            flat_index = `d0 * ${name}_stride_0 + d1 * ${name}_stride_1 + d2 * ${name}_stride_2 + d3 * ${name}_stride_3 + d4 * ${name}_stride_4 + d5 * ${name}_stride_5`;\n            break;\n        default:\n            throw new Error();\n    }\n    if (webgl2) {\n        return `\r\nuniform sampler2D ${name};\r\n${uniforms}\r\n\r\nfloat get_${name}(${args}) {\r\nint flat_index = ${flat_index};\r\nint texture_w = textureSize(${name}, 0).x;\r\nint y = flat_index / texture_w;\r\nint x = flat_index - y * texture_w;\r\nreturn texelFetch(${name}, ivec2(x, y), 0).r;\r\n}\r\n`;\n    }\n    return `\r\n    uniform sampler2D ${name};\r\n    ${uniforms}\r\n    uniform int ${name}_texture_w;\r\n    uniform int ${name}_texture_h;\r\n    \r\n    float get_${name}(${args}) {\r\n      int flat_index = ${flat_index};\r\n      int texture_w = ${name}_texture_w;\r\n      int y = flat_index / texture_w;\r\n      int x = flat_index - y * texture_w;\r\n      vec4 p = texture2D(${name}, vec2((float(x) + 0.5) / float(${name}_texture_w), (float(y) + 0.5) / float(${name}_texture_h)));\r\n      return decode_float(p);\r\n    }\r\n`;\n}\nexports.shaderGenTensorNDGet = shaderGenTensorNDGet;\nfunction shaderGenTensorNDGetVec4(name, ndim, webgl2) {\n    let args, flat_index, uniforms;\n    switch (ndim) {\n        case 0:\n            uniforms = \"\";\n            args = \"\";\n            flat_index = \"0\";\n            break;\n        case 1:\n            uniforms = `\r\n  uniform int ${name}_stride_0;\r\n          `;\n            args = \"int d0\";\n            flat_index = `d0 * ${name}_stride_0`;\n            break;\n        case 2:\n            uniforms = `\r\n    uniform int ${name}_stride_0;\r\n    uniform int ${name}_stride_1;\r\n            `;\n            args = \"int d0, int d1\";\n            flat_index = `d0 * ${name}_stride_0 + d1 * ${name}_stride_1`;\n            break;\n        case 3:\n            uniforms = `\r\n      uniform int ${name}_stride_0;\r\n      uniform int ${name}_stride_1;\r\n      uniform int ${name}_stride_2;\r\n              `;\n            args = \"int d0, int d1, int d2\";\n            flat_index = `d0 * ${name}_stride_0 + d1 * ${name}_stride_1 + d2 * ${name}_stride_2`;\n            break;\n        case 4:\n            uniforms = `\r\nuniform int ${name}_stride_0;\r\nuniform int ${name}_stride_1;\r\nuniform int ${name}_stride_2;\r\nuniform int ${name}_stride_3;\r\n        `;\n            args = \"int d0, int d1, int d2, int d3\";\n            flat_index = `d0 * ${name}_stride_0 + d1 * ${name}_stride_1 + d2 * ${name}_stride_2 + d3 * ${name}_stride_3`;\n            break;\n        case 5:\n            uniforms = `\r\n  uniform int ${name}_stride_0;\r\n  uniform int ${name}_stride_1;\r\n  uniform int ${name}_stride_2;\r\n  uniform int ${name}_stride_3;\r\n  uniform int ${name}_stride_4;\r\n          `;\n            args = \"int d0, int d1, int d2, int d3, int d4\";\n            flat_index = `d0 * ${name}_stride_0 + d1 * ${name}_stride_1 + d2 * ${name}_stride_2 + d3 * ${name}_stride_3 + d4 * ${name}_stride_4`;\n            break;\n        case 6:\n            uniforms = `\r\n  uniform int ${name}_stride_0;\r\n  uniform int ${name}_stride_1;\r\n  uniform int ${name}_stride_2;\r\n  uniform int ${name}_stride_3;\r\n  uniform int ${name}_stride_4;\r\n  uniform int ${name}_stride_5;\r\n          `;\n            args = \"int d0, int d1, int d2, int d3, int d4, int d5\";\n            flat_index = `d0 * ${name}_stride_0 + d1 * ${name}_stride_1 + d2 * ${name}_stride_2 + d3 * ${name}_stride_3 + d4 * ${name}_stride_4 + d5 * ${name}_stride_5`;\n            break;\n        default:\n            throw new Error();\n    }\n    if (webgl2) {\n        return `\r\nuniform sampler2D ${name};\r\n${uniforms}\r\n\r\nvec4 get_vec4_${name}(${args}) {\r\nint flat_index = ${flat_index};\r\nint texture_w = textureSize(${name}, 0).x;\r\nint y = flat_index / texture_w;\r\nint x = flat_index - y * texture_w;\r\nreturn texelFetch(${name}, ivec2(x, y), 0);\r\n}\r\n`;\n    }\n    throw new Error(\"shaderGenTensorNDGetVec4 is only for WebGL2\");\n}\nexports.shaderGenTensorNDGetVec4 = shaderGenTensorNDGetVec4;\nfunction isWebGLTensor(tensor) {\n    return typeof tensor === \"object\" && tensor.backend === \"webgl\";\n}\nfunction shaderGenTensorNDGetUniformItem(name, strides, textureShape, webgl2) {\n    let textureShapeArray;\n    if (isWebGLTensor(textureShape)) {\n        textureShapeArray = [textureShape.textureHeight, textureShape.textureWidth];\n    }\n    else {\n        textureShapeArray = textureShape;\n    }\n    const uniforms = [];\n    for (let i = 0; i < strides.length; i++) {\n        uniforms.push({\n            name: `${name}_stride_${i}`,\n            type: \"int\",\n            value: strides[i],\n        });\n    }\n    if (!webgl2) {\n        uniforms.push({\n            name: `${name}_texture_h`,\n            type: \"int\",\n            value: textureShapeArray[0],\n        });\n        uniforms.push({\n            name: `${name}_texture_w`,\n            type: \"int\",\n            value: textureShapeArray[1],\n        });\n    }\n    return uniforms;\n}\nexports.shaderGenTensorNDGetUniformItem = shaderGenTensorNDGetUniformItem;\nfunction shaderGenTensorOutputUniformItem(shape, textureShape, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nwebgl2) {\n    let textureShapeArray;\n    if (isWebGLTensor(textureShape)) {\n        textureShapeArray = [textureShape.textureHeight, textureShape.textureWidth];\n    }\n    else {\n        textureShapeArray = textureShape;\n    }\n    const name = \"tex_output\", uniforms = [];\n    for (let i = 0; i < shape.length; i++) {\n        uniforms.push({\n            name: `${name}_shape_${i}`,\n            type: \"int\",\n            value: shape[i],\n        });\n    }\n    uniforms.push({\n        name: `${name}_texture_w`,\n        type: \"int\",\n        value: textureShapeArray[1],\n    });\n    return uniforms;\n}\nexports.shaderGenTensorOutputUniformItem = shaderGenTensorOutputUniformItem;\nfunction shaderGenTensorOutputUniform(ndim) {\n    let source = `\r\n  uniform int tex_output_texture_w;\r\n`;\n    for (let i = 0; i < ndim; i++) {\n        source += `uniform int tex_output_shape_${i};`;\n    }\n    return source;\n}\nexports.shaderGenTensorOutputUniform = shaderGenTensorOutputUniform;\nfunction shaderGenTensorOutputCoordsWithReturn(ndim) {\n    let source;\n    switch (ndim) {\n        case 0:\n            source = `\r\n    int tex_output_0 = 0;\r\n    if (tex_output_0 >= 1) {\r\n      return;\r\n    }\r\n    `;\n            break;\n        case 1:\n            source = `\r\n    int tex_output_0 = tex_output_flat;\r\n    if (tex_output_0 >= tex_output_shape_0) {\r\n      return;\r\n    }\r\n    `;\n            break;\n        case 2:\n            source = `\r\n    int tmp1 = tex_output_flat / tex_output_shape_1;\r\n    int tex_output_1 = tex_output_flat - tmp1 * tex_output_shape_1;\r\n    int tex_output_0 = tmp1;\r\n    if (tex_output_0 >= tex_output_shape_0) {\r\n      return;\r\n    }\r\n    `;\n            break;\n        case 3:\n            source = `\r\n    int tmp2 = tex_output_flat / tex_output_shape_2;\r\n    int tex_output_2 = tex_output_flat - tmp2 * tex_output_shape_2;\r\n    int tmp1 = tmp2 / tex_output_shape_1;\r\n    int tex_output_1 = tmp2 - tmp1 * tex_output_shape_1;\r\n    int tex_output_0 = tmp1;\r\n    if (tex_output_0 >= tex_output_shape_0) {\r\n      return;\r\n    }\r\n    `;\n            break;\n        case 4:\n            source = `\r\n    int tmp3 = tex_output_flat / tex_output_shape_3;\r\n    int tex_output_3 = tex_output_flat - tmp3 * tex_output_shape_3;\r\n    int tmp2 = tmp3 / tex_output_shape_2;\r\n    int tex_output_2 = tmp3 - tmp2 * tex_output_shape_2;\r\n    int tmp1 = tmp2 / tex_output_shape_1;\r\n    int tex_output_1 = tmp2 - tmp1 * tex_output_shape_1;\r\n    int tex_output_0 = tmp1;\r\n    if (tex_output_0 >= tex_output_shape_0) {\r\n      return;\r\n    }\r\n    `;\n            break;\n        case 5:\n            source = `\r\n    int tmp4 = tex_output_flat / tex_output_shape_4;\r\n    int tex_output_4 = tex_output_flat - tmp4 * tex_output_shape_4;\r\n    int tmp3 = tmp4 / tex_output_shape_3;\r\n    int tex_output_3 = tmp4 - tmp3 * tex_output_shape_3;\r\n    int tmp2 = tmp3 / tex_output_shape_2;\r\n    int tex_output_2 = tmp3 - tmp2 * tex_output_shape_2;\r\n    int tmp1 = tmp2 / tex_output_shape_1;\r\n    int tex_output_1 = tmp2 - tmp1 * tex_output_shape_1;\r\n    int tex_output_0 = tmp1;\r\n    if (tex_output_0 >= tex_output_shape_0) {\r\n      return;\r\n    }\r\n    `;\n            break;\n        case 6:\n            source = `\r\n        int tmp5 = tex_output_flat / tex_output_shape_5;\r\n        int tex_output_5 = tex_output_flat - tmp5 * tex_output_shape_5;\r\n      int tmp4 = tmp5 / tex_output_shape_4;\r\n      int tex_output_4 = tmp5 - tmp4 * tex_output_shape_4;\r\n      int tmp3 = tmp4 / tex_output_shape_3;\r\n      int tex_output_3 = tmp4 - tmp3 * tex_output_shape_3;\r\n      int tmp2 = tmp3 / tex_output_shape_2;\r\n      int tex_output_2 = tmp3 - tmp2 * tex_output_shape_2;\r\n      int tmp1 = tmp2 / tex_output_shape_1;\r\n      int tex_output_1 = tmp2 - tmp1 * tex_output_shape_1;\r\n      int tex_output_0 = tmp1;\r\n      if (tex_output_0 >= tex_output_shape_0) {\r\n        return;\r\n      }\r\n      `;\n            break;\n        default:\n            throw new Error();\n    }\n    /*\n     * Gl_FragCoord.x 's precision is mediump, which only has 10bit precision\n     * force casting to highp is needed in iOS. Also, \"-0.5\" cannot be removed.\n     */\n    return `\r\n  highp float helper_gfcx = gl_FragCoord.x;\r\n  highp float helper_gfcy = gl_FragCoord.y;\r\n  int tex_output_flat = int(helper_gfcx - 0.5) + tex_output_texture_w * int(helper_gfcy - 0.5);\r\n  ${source}\r\n  `;\n}\nexports.shaderGenTensorOutputCoordsWithReturn = shaderGenTensorOutputCoordsWithReturn;\nfunction shaderGenTensorElementwiseGet(name, webgl2) {\n    if (webgl2) {\n        return `\r\nuniform sampler2D ${name};\r\n\r\nfloat get_${name}() {\r\n  return texelFetch(${name}, ivec2(int(gl_FragCoord.x), int(gl_FragCoord.y)), 0).r;\r\n}\r\n`;\n    }\n    return `\r\nuniform sampler2D ${name};\r\nuniform int ${name}_texture_w;\r\nuniform int ${name}_texture_h;\r\n\r\nfloat get_${name}() {\r\n  vec4 p = texture2D(${name}, vec2(gl_FragCoord.x / float(${name}_texture_w), gl_FragCoord.y / float(${name}_texture_h)));\r\n  return decode_float(p);\r\n}\r\n`;\n}\nexports.shaderGenTensorElementwiseGet = shaderGenTensorElementwiseGet;\nfunction shaderGenTensorElementwiseGetUniformItem(name, textureShape, webgl2) {\n    let textureShapeArray;\n    if (isWebGLTensor(textureShape)) {\n        textureShapeArray = [textureShape.textureHeight, textureShape.textureWidth];\n    }\n    else {\n        textureShapeArray = textureShape;\n    }\n    const uniforms = [];\n    if (!webgl2) {\n        uniforms.push({\n            name: `${name}_texture_h`,\n            type: \"int\",\n            value: textureShapeArray[0],\n        });\n        uniforms.push({\n            name: `${name}_texture_w`,\n            type: \"int\",\n            value: textureShapeArray[1],\n        });\n    }\n    return uniforms;\n}\nexports.shaderGenTensorElementwiseGetUniformItem = shaderGenTensorElementwiseGetUniformItem;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgl/shaderHelper.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgpu/opEntriesStandard.ts":
/*!*********************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgpu/opEntriesStandard.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst binary7_1 = __webpack_require__(/*! ./operators/standard/binary7 */ \"./src/descriptor_runner/operators/webgpu/operators/standard/binary7.ts\");\nconst conv_1 = __webpack_require__(/*! ./operators/standard/conv */ \"./src/descriptor_runner/operators/webgpu/operators/standard/conv.ts\");\nconst gemm_1 = __webpack_require__(/*! ./operators/standard/gemm */ \"./src/descriptor_runner/operators/webgpu/operators/standard/gemm.ts\");\nconst unary_1 = __webpack_require__(/*! ./operators/standard/unary */ \"./src/descriptor_runner/operators/webgpu/operators/standard/unary.ts\");\nfunction getOpEntries() {\n    const entries = [];\n    entries.push(...binary7_1.getOpEntries());\n    entries.push(...conv_1.getOpEntries());\n    entries.push(...gemm_1.getOpEntries());\n    entries.push(...unary_1.getOpEntries());\n    return entries;\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgpu/opEntriesStandard.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgpu/operators/standard/binary7.ts":
/*!******************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgpu/operators/standard/binary7.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nconst shaders_1 = __webpack_require__(/*! ../../shaders */ \"./src/descriptor_runner/operators/webgpu/shaders.ts\");\nclass WebGPUBinary7 extends operatorImpl_1.OperatorImpl {\n    constructor(elementwiseShaderName, elementwiseShaderBinary, broadcastShaderNames, broadcastShaderBinaries) {\n        super(\"webgpu\");\n        this.elementwiseShaderName = elementwiseShaderName;\n        this.elementwiseShaderBinary = elementwiseShaderBinary;\n        this.broadcastShaderNames = broadcastShaderNames;\n        this.broadcastShaderBinaries = broadcastShaderBinaries;\n    }\n    async run(context, inputs) {\n        context.assertsWebGPUTensorArray(inputs);\n        const inputA = inputs[0], inputB = inputs[1];\n        if (inputA.dataType !== \"float32\" || inputB.dataType !== \"float32\") {\n            throw new Error();\n        }\n        if (operatorUtil_1.arrayEqual(inputA.dims, inputB.dims)) {\n            return this.runElementwise(context, inputA, inputB);\n        }\n        return this.runBroadcast(context, inputA, inputB);\n    }\n    async runElementwise(context, inputA, inputB) {\n        const outputTensor = context.emptyTensor(inputA.dims, \"float32\");\n        if (!context.hasPipeline(this.elementwiseShaderName)) {\n            context.createPipeline(this.elementwiseShaderName, this.elementwiseShaderBinary, 4);\n        }\n        await context.run({\n            pipelineName: this.elementwiseShaderName,\n            tensors: [inputA, inputB, outputTensor],\n            meta: {\n                elements: [{ value: inputA.length, type: \"uint32\" }],\n            },\n            workGroups: {\n                x: Math.ceil(Math.min(outputTensor.length, 4096) / 64),\n                y: 1,\n                z: 1,\n            },\n        });\n        return [outputTensor];\n    }\n    async runBroadcast(context, inputA, inputB) {\n        const { dims: outShape, allStrides: inAllStrides } = operatorUtil_1.broadcastMulti([\n            inputA.dims,\n            inputB.dims,\n        ]), outputTensor = context.emptyTensor(outShape, \"float32\"), outNDim = outputTensor.ndim, metaElements = [\n            { value: outputTensor.length, type: \"uint32\" },\n        ];\n        for (let dim = 0; dim < outNDim; dim++) {\n            metaElements.push({ value: outShape[dim], type: \"uint32\" });\n        }\n        for (let dim = 0; dim < outNDim; dim++) {\n            metaElements.push({ value: inAllStrides[0][dim], type: \"uint32\" });\n        }\n        for (let dim = 0; dim < outNDim; dim++) {\n            metaElements.push({ value: inAllStrides[1][dim], type: \"uint32\" });\n        }\n        if (!context.hasPipeline(this.broadcastShaderNames[outNDim])) {\n            context.createPipeline(this.broadcastShaderNames[outNDim], this.broadcastShaderBinaries[outNDim], 4);\n        }\n        await context.run({\n            pipelineName: this.broadcastShaderNames[outNDim],\n            tensors: [inputA, inputB, outputTensor],\n            meta: {\n                elements: metaElements,\n            },\n            workGroups: {\n                x: Math.ceil(Math.min(outputTensor.length, 4096) / 64),\n                y: 1,\n                z: 1,\n            },\n        });\n        return [outputTensor];\n    }\n}\nfunction getOpEntries() {\n    return [\n        // Add, Sub, Mul, Div, Pow: opset under 7 requires explicit broadcast flag\n        {\n            opType: \"Add\",\n            backend: \"webgpu\",\n            opsetMin: 7,\n            factory: () => new WebGPUBinary7(\"binary_elementwise_add\", shaders_1.webgpuShaders.binary_elementwise_add, [\n                \"binary_broadcast_add_0d\",\n                \"binary_broadcast_add_1d\",\n                \"binary_broadcast_add_2d\",\n                \"binary_broadcast_add_3d\",\n                \"binary_broadcast_add_4d\",\n            ], [\n                shaders_1.webgpuShaders.binary_broadcast_add_0d,\n                shaders_1.webgpuShaders.binary_broadcast_add_1d,\n                shaders_1.webgpuShaders.binary_broadcast_add_2d,\n                shaders_1.webgpuShaders.binary_broadcast_add_3d,\n                shaders_1.webgpuShaders.binary_broadcast_add_4d,\n            ]),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgpu/operators/standard/binary7.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgpu/operators/standard/conv.ts":
/*!***************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgpu/operators/standard/conv.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = void 0;\nconst conv_1 = __webpack_require__(/*! ../../../base/conv */ \"./src/descriptor_runner/operators/base/conv.ts\");\nconst shaders_1 = __webpack_require__(/*! ../../shaders */ \"./src/descriptor_runner/operators/webgpu/shaders.ts\");\nclass WebGPUConv extends conv_1.Conv {\n    constructor() {\n        super(\"webgpu\");\n    }\n    async run(context, inputs) {\n        context.assertsWebGPUTensorArray(inputs);\n        const inputX = inputs[0], inputW = inputs[1], inputB = inputs[2];\n        // TODO: 2D以外対応\n        if (inputX.ndim !== 4) {\n            throw new Error(\"Conv other than 2D is not yet supported\");\n        }\n        const { batch, dilations, group, kernelShape, pads, strides, inShape, outShape, chIn, chInPerGroup, chOut, chOutPerGroup, } = this.calcShape(inputX.dims, inputW.dims), im2colData = context.emptyTensor([\n            group *\n                batch *\n                outShape[0] *\n                outShape[1] *\n                chInPerGroup *\n                kernelShape[0] *\n                kernelShape[1],\n        ]);\n        await this.im2col(context, inputX, im2colData, batch, dilations, group, kernelShape, pads, strides, inShape, outShape, chIn, chInPerGroup, chOut, chOutPerGroup);\n        const matmulData = context.emptyTensor([\n            group * batch * outShape[0] * outShape[1] * chOutPerGroup,\n        ]);\n        await this.matmul(context, im2colData, inputW, matmulData, group, batch * outShape[0] * outShape[1], chInPerGroup * kernelShape[0] * kernelShape[1], chOutPerGroup);\n        im2colData.dispose();\n        const output = context.emptyTensor([\n            batch,\n            chOut,\n            outShape[0],\n            outShape[1],\n        ]);\n        if (inputB) {\n            const transposeData = context.emptyTensor([\n                batch * chOut * outShape[0] * outShape[1],\n            ]);\n            await this.transpose(context, matmulData, transposeData, group, batch, outShape[0] * outShape[1], chOutPerGroup);\n            matmulData.dispose();\n            await this.bias(context, transposeData, inputB, output, batch, chOut, outShape[0] * outShape[1]);\n            transposeData.dispose();\n        }\n        else {\n            await this.transpose(context, matmulData, output, group, batch, outShape[0] * outShape[1], chOutPerGroup);\n            matmulData.dispose();\n        }\n        return [output];\n    }\n    async im2col(context, dX, dI, batch, dilations, group, kernelShape, pads, strides, inShape, outShape, chIn, chInPerGroup, chOut, chOutPerGroup) {\n        const shaderName = \"conv_im2col\";\n        if (!context.hasPipeline(shaderName)) {\n            context.createPipeline(shaderName, shaders_1.webgpuShaders[shaderName], 3);\n        }\n        await context.run({\n            pipelineName: shaderName,\n            tensors: [dX, dI],\n            meta: {\n                elements: [\n                    { value: group, type: \"int32\" },\n                    { value: batch, type: \"int32\" },\n                    { value: outShape[0], type: \"int32\" },\n                    { value: outShape[1], type: \"int32\" },\n                    { value: chInPerGroup, type: \"int32\" },\n                    { value: kernelShape[0], type: \"int32\" },\n                    { value: kernelShape[1], type: \"int32\" },\n                    { value: strides[0], type: \"int32\" },\n                    { value: strides[1], type: \"int32\" },\n                    { value: pads[0], type: \"int32\" },\n                    { value: pads[1], type: \"int32\" },\n                    { value: dilations[0], type: \"int32\" },\n                    { value: dilations[1], type: \"int32\" },\n                    { value: inShape[0], type: \"int32\" },\n                    { value: inShape[1], type: \"int32\" },\n                    { value: chIn, type: \"int32\" },\n                ],\n            },\n            workGroups: { x: 4096 / 64, y: 1, z: 1 },\n        });\n    }\n    async matmul(context, dI, dW, dT, group, bout, cinkhkw, chOutPerGroup) {\n        const shaderName = \"conv_matmul\";\n        if (!context.hasPipeline(shaderName)) {\n            context.createPipeline(shaderName, shaders_1.webgpuShaders[shaderName], 4);\n        }\n        await context.run({\n            pipelineName: shaderName,\n            tensors: [dI, dW, dT],\n            meta: {\n                elements: [\n                    { value: group, type: \"int32\" },\n                    { value: bout, type: \"int32\" },\n                    { value: chOutPerGroup, type: \"int32\" },\n                    { value: cinkhkw, type: \"int32\" },\n                ],\n            },\n            workGroups: { x: 4096 / 64, y: 1, z: 1 },\n        });\n    }\n    async transpose(context, dT, dO, group, batch, outarea, chOutPerGroup) {\n        const shaderName = \"conv_transpose\";\n        if (!context.hasPipeline(shaderName)) {\n            context.createPipeline(shaderName, shaders_1.webgpuShaders[shaderName], 3);\n        }\n        await context.run({\n            pipelineName: shaderName,\n            tensors: [dT, dO],\n            meta: {\n                elements: [\n                    { value: group, type: \"int32\" },\n                    { value: batch, type: \"int32\" },\n                    { value: outarea, type: \"int32\" },\n                    { value: chOutPerGroup, type: \"int32\" },\n                ],\n            },\n            workGroups: { x: 4096 / 64, y: 1, z: 1 },\n        });\n    }\n    async bias(context, dI, dB, dO, batch, chOut, outarea) {\n        const shaderName = \"conv_bias\";\n        if (!context.hasPipeline(shaderName)) {\n            context.createPipeline(shaderName, shaders_1.webgpuShaders[shaderName], 4);\n        }\n        await context.run({\n            pipelineName: shaderName,\n            tensors: [dI, dB, dO],\n            meta: {\n                elements: [\n                    { value: batch, type: \"int32\" },\n                    { value: chOut, type: \"int32\" },\n                    { value: outarea, type: \"int32\" },\n                ],\n            },\n            workGroups: { x: 4096 / 64, y: 1, z: 1 },\n        });\n    }\n}\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Conv\",\n            backend: \"webgpu\",\n            opsetMin: 1,\n            factory: () => new WebGPUConv(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgpu/operators/standard/conv.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgpu/operators/standard/gemm.ts":
/*!***************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgpu/operators/standard/gemm.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.WebGPUGemm = void 0;\nconst gemm_1 = __webpack_require__(/*! ../../../base/gemm */ \"./src/descriptor_runner/operators/base/gemm.ts\");\nconst operatorUtil_1 = __webpack_require__(/*! ../../../operatorUtil */ \"./src/descriptor_runner/operators/operatorUtil.ts\");\nconst shaders_1 = __webpack_require__(/*! ../../shaders */ \"./src/descriptor_runner/operators/webgpu/shaders.ts\");\nclass WebGPUGemm extends gemm_1.Gemm {\n    constructor() {\n        super(\"webgpu\");\n    }\n    async run(context, inputs) {\n        context.assertsWebGPUTensorArray(inputs);\n        const inputA = inputs[0], inputB = inputs[1], inputC = inputs[2];\n        if (inputC) {\n            return this.runWithC(context, inputA, inputB, inputC);\n        }\n        throw new Error();\n    }\n    async runWithC(context, inputA, inputB, inputC) {\n        if (inputA.dataType !== \"float32\") {\n            throw new Error();\n        }\n        const { m, n, k, strideA: [strideA0, strideA1], strideB: [strideB0, strideB1], } = this.calcShape(inputA.dims, inputB.dims), [strideC0, strideC1] = operatorUtil_1.broadcastUni([m, n], inputC.dims), outputTensor = context.emptyTensor([m, n], \"float32\"), shaderName = \"gemm\";\n        if (!context.hasPipeline(shaderName)) {\n            context.createPipeline(shaderName, shaders_1.webgpuShaders.gemm, 5);\n        }\n        await context.run({\n            pipelineName: shaderName,\n            tensors: [inputA, inputB, inputC, outputTensor],\n            meta: {\n                elements: [\n                    { value: m, type: \"uint32\" },\n                    { value: n, type: \"uint32\" },\n                    { value: k, type: \"uint32\" },\n                    { value: strideA0, type: \"uint32\" },\n                    { value: strideA1, type: \"uint32\" },\n                    { value: strideB0, type: \"uint32\" },\n                    { value: strideB1, type: \"uint32\" },\n                    { value: strideC0, type: \"uint32\" },\n                    { value: strideC1, type: \"uint32\" },\n                    { value: this.alpha, type: \"float32\" },\n                    { value: this.beta, type: \"float32\" },\n                ],\n            },\n            workGroups: { x: 256 / 8, y: 256 / 8, z: 1 },\n        });\n        return [outputTensor];\n    }\n}\nexports.WebGPUGemm = WebGPUGemm;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Gemm\",\n            backend: \"webgpu\",\n            opsetMin: 1,\n            factory: () => new WebGPUGemm(),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgpu/operators/standard/gemm.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgpu/operators/standard/unary.ts":
/*!****************************************************************************!*\
  !*** ./src/descriptor_runner/operators/webgpu/operators/standard/unary.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getOpEntries = exports.WebGPUUnary = void 0;\nconst operatorImpl_1 = __webpack_require__(/*! ../../../operatorImpl */ \"./src/descriptor_runner/operators/operatorImpl.ts\");\nconst shaders_1 = __webpack_require__(/*! ../../shaders */ \"./src/descriptor_runner/operators/webgpu/shaders.ts\");\nclass WebGPUUnary extends operatorImpl_1.OperatorImpl {\n    constructor(shaderName, shaderBinary) {\n        super(\"webgpu\");\n        this.shaderName = shaderName;\n        this.shaderBinary = shaderBinary;\n    }\n    async run(context, inputs) {\n        const input = inputs[0];\n        if (input.dataType !== \"float32\") {\n            throw new Error();\n        }\n        const outputTensor = context.emptyTensor(input.dims, \"float32\");\n        if (!context.hasPipeline(this.shaderName)) {\n            context.createPipeline(this.shaderName, this.shaderBinary, 3);\n        }\n        await context.run({\n            pipelineName: this.shaderName,\n            tensors: [input, outputTensor],\n            meta: {\n                elements: [{ value: input.length, type: \"uint32\" }],\n            },\n            workGroups: { x: 4096 / 64, y: 1, z: 1 },\n        });\n        return [outputTensor];\n    }\n}\nexports.WebGPUUnary = WebGPUUnary;\nfunction getOpEntries() {\n    return [\n        {\n            opType: \"Relu\",\n            backend: \"webgpu\",\n            opsetMin: 1,\n            factory: () => new WebGPUUnary(\"relu\", shaders_1.webgpuShaders.relu),\n        },\n    ];\n}\nexports.getOpEntries = getOpEntries;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgpu/operators/standard/unary.ts?");

/***/ }),

/***/ "./src/descriptor_runner/operators/webgpu/shaders.ts":
/*!***********************************************************!*\
  !*** ./src/descriptor_runner/operators/webgpu/shaders.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.webgpuShaders = void 0;\nexports.webgpuShaders = {\n    binary_broadcast_add_0d: new Uint32Array([119734787, 65536, 524296, 49, 0, 131089, 1, 393227, 1, 1280527431, 1685353262, 808793134, 0, 196622, 0, 1, 393231, 5, 4, 1852399981, 0, 11, 393232, 4, 17, 64, 1, 1, 196611, 2, 450, 262149, 4, 1852399981, 0, 196613, 8, 105, 524293, 11, 1197436007, 1633841004, 1986939244, 1952539503, 1231974249, 68, 262149, 23, 1634890337, 17273, 327686, 23, 0, 1651340654, 7565925, 262149, 25, 1634890337, 6512505, 262149, 29, 1634890337, 16761, 327686, 29, 0, 1651340654, 7565925, 262149, 31, 1634890337, 6381433, 262149, 36, 1634890337, 17017, 327686, 36, 0, 1651340654, 7565925, 262149, 38, 1634890337, 6446969, 262149, 46, 1635018061, 0, 262150, 46, 0, 7234924, 262149, 48, 1635018093, 0, 262215, 11, 11, 28, 262215, 22, 6, 4, 327752, 23, 0, 35, 0, 196679, 23, 3, 262215, 25, 34, 0, 262215, 25, 33, 2, 262215, 28, 6, 4, 262216, 29, 0, 24, 327752, 29, 0, 35, 0, 196679, 29, 3, 262215, 31, 34, 0, 262215, 31, 33, 0, 262215, 35, 6, 4, 262216, 36, 0, 24, 327752, 36, 0, 35, 0, 196679, 36, 3, 262215, 38, 34, 0, 262215, 38, 33, 1, 262215, 45, 11, 25, 262216, 46, 0, 24, 327752, 46, 0, 35, 0, 196679, 46, 3, 262215, 48, 34, 0, 262215, 48, 33, 3, 131091, 2, 196641, 3, 2, 262165, 6, 32, 0, 262176, 7, 7, 6, 262167, 9, 6, 3, 262176, 10, 1, 9, 262203, 10, 11, 1, 262187, 6, 12, 0, 262176, 13, 1, 6, 131092, 17, 196630, 21, 32, 196637, 22, 21, 196638, 23, 22, 262176, 24, 2, 23, 262203, 24, 25, 2, 262165, 26, 32, 1, 262187, 26, 27, 0, 196637, 28, 21, 196638, 29, 28, 262176, 30, 2, 29, 262203, 30, 31, 2, 262176, 32, 2, 21, 196637, 35, 21, 196638, 36, 35, 262176, 37, 2, 36, 262203, 37, 38, 2, 262187, 6, 43, 64, 262187, 6, 44, 1, 393260, 9, 45, 43, 44, 44, 196638, 46, 6, 262176, 47, 2, 46, 262203, 47, 48, 2, 327734, 2, 4, 0, 3, 131320, 5, 262203, 7, 8, 7, 327745, 13, 14, 11, 12, 262205, 6, 15, 14, 196670, 8, 15, 262205, 6, 16, 8, 327850, 17, 18, 16, 12, 196855, 20, 0, 262394, 18, 19, 20, 131320, 19, 393281, 32, 33, 31, 27, 27, 262205, 21, 34, 33, 393281, 32, 39, 38, 27, 27, 262205, 21, 40, 39, 327809, 21, 41, 34, 40, 393281, 32, 42, 25, 27, 27, 196670, 42, 41, 131321, 20, 131320, 20, 65789, 65592]),\n    binary_broadcast_add_1d: new Uint32Array([119734787, 65536, 524296, 81, 0, 131089, 1, 393227, 1, 1280527431, 1685353262, 808793134, 0, 196622, 0, 1, 393231, 5, 4, 1852399981, 0, 32, 393232, 4, 17, 64, 1, 1, 196611, 2, 450, 262149, 4, 1852399981, 0, 196613, 8, 7234924, 262149, 9, 1635018061, 0, 262150, 9, 0, 7234924, 393222, 9, 1, 1400141167, 1701863784, 48, 393222, 9, 2, 1396797033, 1684632180, 12389, 393222, 9, 3, 1396862569, 1684632180, 12389, 262149, 11, 1635018093, 0, 327685, 17, 1400141167, 1701863784, 48, 327685, 21, 1396797033, 1684632180, 12389, 327685, 25, 1396862569, 1684632180, 12389, 196613, 29, 105, 524293, 32, 1197436007, 1633841004, 1986939244, 1952539503, 1231974249, 68, 262149, 46, 812476772, 0, 262149, 50, 1634890337, 17273, 327686, 50, 0, 1651340654, 7565925, 262149, 52, 1634890337, 6512505, 262149, 55, 1634890337, 16761, 327686, 55, 0, 1651340654, 7565925, 262149, 57, 1634890337, 6381433, 262149, 65, 1634890337, 17017, 327686, 65, 0, 1651340654, 7565925, 262149, 67, 1634890337, 6446969, 262216, 9, 0, 24, 327752, 9, 0, 35, 0, 262216, 9, 1, 24, 327752, 9, 1, 35, 4, 262216, 9, 2, 24, 327752, 9, 2, 35, 8, 262216, 9, 3, 24, 327752, 9, 3, 35, 12, 196679, 9, 3, 262215, 11, 34, 0, 262215, 11, 33, 3, 262215, 32, 11, 28, 262215, 49, 6, 4, 327752, 50, 0, 35, 0, 196679, 50, 3, 262215, 52, 34, 0, 262215, 52, 33, 2, 262215, 54, 6, 4, 262216, 55, 0, 24, 327752, 55, 0, 35, 0, 196679, 55, 3, 262215, 57, 34, 0, 262215, 57, 33, 0, 262215, 64, 6, 4, 262216, 65, 0, 24, 327752, 65, 0, 35, 0, 196679, 65, 3, 262215, 67, 34, 0, 262215, 67, 33, 1, 262215, 80, 11, 25, 131091, 2, 196641, 3, 2, 262165, 6, 32, 0, 262176, 7, 7, 6, 393246, 9, 6, 6, 6, 6, 262176, 10, 2, 9, 262203, 10, 11, 2, 262165, 12, 32, 1, 262187, 12, 13, 0, 262176, 14, 2, 6, 262187, 12, 18, 1, 262187, 12, 22, 2, 262187, 12, 26, 3, 262167, 30, 6, 3, 262176, 31, 1, 30, 262203, 31, 32, 1, 262187, 6, 33, 0, 262176, 34, 1, 6, 131092, 44, 196630, 48, 32, 196637, 49, 48, 196638, 50, 49, 262176, 51, 2, 50, 262203, 51, 52, 2, 196637, 54, 48, 196638, 55, 54, 262176, 56, 2, 55, 262203, 56, 57, 2, 262176, 61, 2, 48, 196637, 64, 48, 196638, 65, 64, 262176, 66, 2, 65, 262203, 66, 67, 2, 262187, 6, 75, 4096, 262187, 6, 78, 64, 262187, 6, 79, 1, 393260, 30, 80, 78, 79, 79, 327734, 2, 4, 0, 3, 131320, 5, 262203, 7, 8, 7, 262203, 7, 17, 7, 262203, 7, 21, 7, 262203, 7, 25, 7, 262203, 7, 29, 7, 262203, 7, 46, 7, 327745, 14, 15, 11, 13, 262205, 6, 16, 15, 196670, 8, 16, 327745, 14, 19, 11, 18, 262205, 6, 20, 19, 196670, 17, 20, 327745, 14, 23, 11, 22, 262205, 6, 24, 23, 196670, 21, 24, 327745, 14, 27, 11, 26, 262205, 6, 28, 27, 196670, 25, 28, 327745, 34, 35, 32, 33, 262205, 6, 36, 35, 196670, 29, 36, 131321, 37, 131320, 37, 262390, 39, 40, 0, 131321, 41, 131320, 41, 262205, 6, 42, 29, 262205, 6, 43, 8, 327856, 44, 45, 42, 43, 262394, 45, 38, 39, 131320, 38, 262205, 6, 47, 29, 196670, 46, 47, 262205, 6, 53, 29, 262205, 6, 58, 46, 262205, 6, 59, 21, 327812, 6, 60, 58, 59, 393281, 61, 62, 57, 13, 60, 262205, 48, 63, 62, 262205, 6, 68, 46, 262205, 6, 69, 25, 327812, 6, 70, 68, 69, 393281, 61, 71, 67, 13, 70, 262205, 48, 72, 71, 327809, 48, 73, 63, 72, 393281, 61, 74, 52, 13, 53, 196670, 74, 73, 131321, 40, 131320, 40, 262205, 6, 76, 29, 327808, 6, 77, 76, 75, 196670, 29, 77, 131321, 37, 131320, 39, 65789, 65592]),\n    binary_broadcast_add_2d: new Uint32Array([119734787, 65536, 524296, 107, 0, 131089, 1, 393227, 1, 1280527431, 1685353262, 808793134, 0, 196622, 0, 1, 393231, 5, 4, 1852399981, 0, 44, 393232, 4, 17, 64, 1, 1, 196611, 2, 450, 262149, 4, 1852399981, 0, 196613, 8, 7234924, 262149, 9, 1635018061, 0, 262150, 9, 0, 7234924, 393222, 9, 1, 1400141167, 1701863784, 48, 393222, 9, 2, 1400141167, 1701863784, 49, 393222, 9, 3, 1396797033, 1684632180, 12389, 393222, 9, 4, 1396797033, 1684632180, 12645, 393222, 9, 5, 1396862569, 1684632180, 12389, 393222, 9, 6, 1396862569, 1684632180, 12645, 262149, 11, 1635018093, 0, 327685, 17, 1400141167, 1701863784, 48, 327685, 21, 1400141167, 1701863784, 49, 327685, 25, 1396797033, 1684632180, 12389, 327685, 29, 1396797033, 1684632180, 12645, 327685, 33, 1396862569, 1684632180, 12389, 327685, 37, 1396862569, 1684632180, 12645, 196613, 41, 105, 524293, 44, 1197436007, 1633841004, 1986939244, 1952539503, 1231974249, 68, 262149, 58, 829253988, 0, 262149, 62, 812476772, 0, 262149, 68, 1634890337, 17273, 327686, 68, 0, 1651340654, 7565925, 262149, 70, 1634890337, 6512505, 262149, 73, 1634890337, 16761, 327686, 73, 0, 1651340654, 7565925, 262149, 75, 1634890337, 6381433, 262149, 87, 1634890337, 17017, 327686, 87, 0, 1651340654, 7565925, 262149, 89, 1634890337, 6446969, 262216, 9, 0, 24, 327752, 9, 0, 35, 0, 262216, 9, 1, 24, 327752, 9, 1, 35, 4, 262216, 9, 2, 24, 327752, 9, 2, 35, 8, 262216, 9, 3, 24, 327752, 9, 3, 35, 12, 262216, 9, 4, 24, 327752, 9, 4, 35, 16, 262216, 9, 5, 24, 327752, 9, 5, 35, 20, 262216, 9, 6, 24, 327752, 9, 6, 35, 24, 196679, 9, 3, 262215, 11, 34, 0, 262215, 11, 33, 3, 262215, 44, 11, 28, 262215, 67, 6, 4, 327752, 68, 0, 35, 0, 196679, 68, 3, 262215, 70, 34, 0, 262215, 70, 33, 2, 262215, 72, 6, 4, 262216, 73, 0, 24, 327752, 73, 0, 35, 0, 196679, 73, 3, 262215, 75, 34, 0, 262215, 75, 33, 0, 262215, 86, 6, 4, 262216, 87, 0, 24, 327752, 87, 0, 35, 0, 196679, 87, 3, 262215, 89, 34, 0, 262215, 89, 33, 1, 262215, 106, 11, 25, 131091, 2, 196641, 3, 2, 262165, 6, 32, 0, 262176, 7, 7, 6, 589854, 9, 6, 6, 6, 6, 6, 6, 6, 262176, 10, 2, 9, 262203, 10, 11, 2, 262165, 12, 32, 1, 262187, 12, 13, 0, 262176, 14, 2, 6, 262187, 12, 18, 1, 262187, 12, 22, 2, 262187, 12, 26, 3, 262187, 12, 30, 4, 262187, 12, 34, 5, 262187, 12, 38, 6, 262167, 42, 6, 3, 262176, 43, 1, 42, 262203, 43, 44, 1, 262187, 6, 45, 0, 262176, 46, 1, 6, 131092, 56, 196630, 66, 32, 196637, 67, 66, 196638, 68, 67, 262176, 69, 2, 68, 262203, 69, 70, 2, 196637, 72, 66, 196638, 73, 72, 262176, 74, 2, 73, 262203, 74, 75, 2, 262176, 83, 2, 66, 196637, 86, 66, 196638, 87, 86, 262176, 88, 2, 87, 262203, 88, 89, 2, 262187, 6, 101, 4096, 262187, 6, 104, 64, 262187, 6, 105, 1, 393260, 42, 106, 104, 105, 105, 327734, 2, 4, 0, 3, 131320, 5, 262203, 7, 8, 7, 262203, 7, 17, 7, 262203, 7, 21, 7, 262203, 7, 25, 7, 262203, 7, 29, 7, 262203, 7, 33, 7, 262203, 7, 37, 7, 262203, 7, 41, 7, 262203, 7, 58, 7, 262203, 7, 62, 7, 327745, 14, 15, 11, 13, 262205, 6, 16, 15, 196670, 8, 16, 327745, 14, 19, 11, 18, 262205, 6, 20, 19, 196670, 17, 20, 327745, 14, 23, 11, 22, 262205, 6, 24, 23, 196670, 21, 24, 327745, 14, 27, 11, 26, 262205, 6, 28, 27, 196670, 25, 28, 327745, 14, 31, 11, 30, 262205, 6, 32, 31, 196670, 29, 32, 327745, 14, 35, 11, 34, 262205, 6, 36, 35, 196670, 33, 36, 327745, 14, 39, 11, 38, 262205, 6, 40, 39, 196670, 37, 40, 327745, 46, 47, 44, 45, 262205, 6, 48, 47, 196670, 41, 48, 131321, 49, 131320, 49, 262390, 51, 52, 0, 131321, 53, 131320, 53, 262205, 6, 54, 41, 262205, 6, 55, 8, 327856, 56, 57, 54, 55, 262394, 57, 50, 51, 131320, 50, 262205, 6, 59, 41, 262205, 6, 60, 21, 327817, 6, 61, 59, 60, 196670, 58, 61, 262205, 6, 63, 41, 262205, 6, 64, 21, 327814, 6, 65, 63, 64, 196670, 62, 65, 262205, 6, 71, 41, 262205, 6, 76, 62, 262205, 6, 77, 25, 327812, 6, 78, 76, 77, 262205, 6, 79, 58, 262205, 6, 80, 29, 327812, 6, 81, 79, 80, 327808, 6, 82, 78, 81, 393281, 83, 84, 75, 13, 82, 262205, 66, 85, 84, 262205, 6, 90, 62, 262205, 6, 91, 33, 327812, 6, 92, 90, 91, 262205, 6, 93, 58, 262205, 6, 94, 37, 327812, 6, 95, 93, 94, 327808, 6, 96, 92, 95, 393281, 83, 97, 89, 13, 96, 262205, 66, 98, 97, 327809, 66, 99, 85, 98, 393281, 83, 100, 70, 13, 71, 196670, 100, 99, 131321, 52, 131320, 52, 262205, 6, 102, 41, 327808, 6, 103, 102, 101, 196670, 41, 103, 131321, 49, 131320, 51, 65789, 65592]),\n    binary_broadcast_add_3d: new Uint32Array([119734787, 65536, 524296, 134, 0, 131089, 1, 393227, 1, 1280527431, 1685353262, 808793134, 0, 196622, 0, 1, 393231, 5, 4, 1852399981, 0, 56, 393232, 4, 17, 64, 1, 1, 196611, 2, 450, 262149, 4, 1852399981, 0, 196613, 8, 7234924, 262149, 9, 1635018061, 0, 262150, 9, 0, 7234924, 393222, 9, 1, 1400141167, 1701863784, 48, 393222, 9, 2, 1400141167, 1701863784, 49, 393222, 9, 3, 1400141167, 1701863784, 50, 393222, 9, 4, 1396797033, 1684632180, 12389, 393222, 9, 5, 1396797033, 1684632180, 12645, 393222, 9, 6, 1396797033, 1684632180, 12901, 393222, 9, 7, 1396862569, 1684632180, 12389, 393222, 9, 8, 1396862569, 1684632180, 12645, 393222, 9, 9, 1396862569, 1684632180, 12901, 262149, 11, 1635018093, 0, 327685, 17, 1400141167, 1701863784, 48, 327685, 21, 1400141167, 1701863784, 49, 327685, 25, 1400141167, 1701863784, 50, 327685, 29, 1396797033, 1684632180, 12389, 327685, 33, 1396797033, 1684632180, 12645, 327685, 37, 1396797033, 1684632180, 12901, 327685, 41, 1396862569, 1684632180, 12389, 327685, 45, 1396862569, 1684632180, 12645, 327685, 49, 1396862569, 1684632180, 12901, 196613, 53, 105, 524293, 56, 1197436007, 1633841004, 1986939244, 1952539503, 1231974249, 68, 262149, 70, 846031204, 0, 262149, 74, 829253988, 0, 262149, 78, 812476772, 0, 262149, 87, 1634890337, 17273, 327686, 87, 0, 1651340654, 7565925, 262149, 89, 1634890337, 6512505, 262149, 92, 1634890337, 16761, 327686, 92, 0, 1651340654, 7565925, 262149, 94, 1634890337, 6381433, 262149, 110, 1634890337, 17017, 327686, 110, 0, 1651340654, 7565925, 262149, 112, 1634890337, 6446969, 262216, 9, 0, 24, 327752, 9, 0, 35, 0, 262216, 9, 1, 24, 327752, 9, 1, 35, 4, 262216, 9, 2, 24, 327752, 9, 2, 35, 8, 262216, 9, 3, 24, 327752, 9, 3, 35, 12, 262216, 9, 4, 24, 327752, 9, 4, 35, 16, 262216, 9, 5, 24, 327752, 9, 5, 35, 20, 262216, 9, 6, 24, 327752, 9, 6, 35, 24, 262216, 9, 7, 24, 327752, 9, 7, 35, 28, 262216, 9, 8, 24, 327752, 9, 8, 35, 32, 262216, 9, 9, 24, 327752, 9, 9, 35, 36, 196679, 9, 3, 262215, 11, 34, 0, 262215, 11, 33, 3, 262215, 56, 11, 28, 262215, 86, 6, 4, 327752, 87, 0, 35, 0, 196679, 87, 3, 262215, 89, 34, 0, 262215, 89, 33, 2, 262215, 91, 6, 4, 262216, 92, 0, 24, 327752, 92, 0, 35, 0, 196679, 92, 3, 262215, 94, 34, 0, 262215, 94, 33, 0, 262215, 109, 6, 4, 262216, 110, 0, 24, 327752, 110, 0, 35, 0, 196679, 110, 3, 262215, 112, 34, 0, 262215, 112, 33, 1, 262215, 133, 11, 25, 131091, 2, 196641, 3, 2, 262165, 6, 32, 0, 262176, 7, 7, 6, 786462, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 262176, 10, 2, 9, 262203, 10, 11, 2, 262165, 12, 32, 1, 262187, 12, 13, 0, 262176, 14, 2, 6, 262187, 12, 18, 1, 262187, 12, 22, 2, 262187, 12, 26, 3, 262187, 12, 30, 4, 262187, 12, 34, 5, 262187, 12, 38, 6, 262187, 12, 42, 7, 262187, 12, 46, 8, 262187, 12, 50, 9, 262167, 54, 6, 3, 262176, 55, 1, 54, 262203, 55, 56, 1, 262187, 6, 57, 0, 262176, 58, 1, 6, 131092, 68, 196630, 85, 32, 196637, 86, 85, 196638, 87, 86, 262176, 88, 2, 87, 262203, 88, 89, 2, 196637, 91, 85, 196638, 92, 91, 262176, 93, 2, 92, 262203, 93, 94, 2, 262176, 106, 2, 85, 196637, 109, 85, 196638, 110, 109, 262176, 111, 2, 110, 262203, 111, 112, 2, 262187, 6, 128, 4096, 262187, 6, 131, 64, 262187, 6, 132, 1, 393260, 54, 133, 131, 132, 132, 327734, 2, 4, 0, 3, 131320, 5, 262203, 7, 8, 7, 262203, 7, 17, 7, 262203, 7, 21, 7, 262203, 7, 25, 7, 262203, 7, 29, 7, 262203, 7, 33, 7, 262203, 7, 37, 7, 262203, 7, 41, 7, 262203, 7, 45, 7, 262203, 7, 49, 7, 262203, 7, 53, 7, 262203, 7, 70, 7, 262203, 7, 74, 7, 262203, 7, 78, 7, 327745, 14, 15, 11, 13, 262205, 6, 16, 15, 196670, 8, 16, 327745, 14, 19, 11, 18, 262205, 6, 20, 19, 196670, 17, 20, 327745, 14, 23, 11, 22, 262205, 6, 24, 23, 196670, 21, 24, 327745, 14, 27, 11, 26, 262205, 6, 28, 27, 196670, 25, 28, 327745, 14, 31, 11, 30, 262205, 6, 32, 31, 196670, 29, 32, 327745, 14, 35, 11, 34, 262205, 6, 36, 35, 196670, 33, 36, 327745, 14, 39, 11, 38, 262205, 6, 40, 39, 196670, 37, 40, 327745, 14, 43, 11, 42, 262205, 6, 44, 43, 196670, 41, 44, 327745, 14, 47, 11, 46, 262205, 6, 48, 47, 196670, 45, 48, 327745, 14, 51, 11, 50, 262205, 6, 52, 51, 196670, 49, 52, 327745, 58, 59, 56, 57, 262205, 6, 60, 59, 196670, 53, 60, 131321, 61, 131320, 61, 262390, 63, 64, 0, 131321, 65, 131320, 65, 262205, 6, 66, 53, 262205, 6, 67, 8, 327856, 68, 69, 66, 67, 262394, 69, 62, 63, 131320, 62, 262205, 6, 71, 53, 262205, 6, 72, 25, 327817, 6, 73, 71, 72, 196670, 70, 73, 262205, 6, 75, 53, 262205, 6, 76, 25, 327814, 6, 77, 75, 76, 196670, 74, 77, 262205, 6, 79, 74, 262205, 6, 80, 21, 327814, 6, 81, 79, 80, 196670, 78, 81, 262205, 6, 82, 74, 262205, 6, 83, 21, 327817, 6, 84, 82, 83, 196670, 74, 84, 262205, 6, 90, 53, 262205, 6, 95, 78, 262205, 6, 96, 29, 327812, 6, 97, 95, 96, 262205, 6, 98, 74, 262205, 6, 99, 33, 327812, 6, 100, 98, 99, 327808, 6, 101, 97, 100, 262205, 6, 102, 70, 262205, 6, 103, 37, 327812, 6, 104, 102, 103, 327808, 6, 105, 101, 104, 393281, 106, 107, 94, 13, 105, 262205, 85, 108, 107, 262205, 6, 113, 78, 262205, 6, 114, 41, 327812, 6, 115, 113, 114, 262205, 6, 116, 74, 262205, 6, 117, 45, 327812, 6, 118, 116, 117, 327808, 6, 119, 115, 118, 262205, 6, 120, 70, 262205, 6, 121, 49, 327812, 6, 122, 120, 121, 327808, 6, 123, 119, 122, 393281, 106, 124, 112, 13, 123, 262205, 85, 125, 124, 327809, 85, 126, 108, 125, 393281, 106, 127, 89, 13, 90, 196670, 127, 126, 131321, 64, 131320, 64, 262205, 6, 129, 53, 327808, 6, 130, 129, 128, 196670, 53, 130, 131321, 61, 131320, 63, 65789, 65592]),\n    binary_broadcast_add_4d: new Uint32Array([119734787, 65536, 524296, 161, 0, 131089, 1, 393227, 1, 1280527431, 1685353262, 808793134, 0, 196622, 0, 1, 393231, 5, 4, 1852399981, 0, 68, 393232, 4, 17, 64, 1, 1, 196611, 2, 450, 262149, 4, 1852399981, 0, 196613, 8, 7234924, 262149, 9, 1635018061, 0, 262150, 9, 0, 7234924, 393222, 9, 1, 1400141167, 1701863784, 48, 393222, 9, 2, 1400141167, 1701863784, 49, 393222, 9, 3, 1400141167, 1701863784, 50, 393222, 9, 4, 1400141167, 1701863784, 51, 393222, 9, 5, 1396797033, 1684632180, 12389, 393222, 9, 6, 1396797033, 1684632180, 12645, 393222, 9, 7, 1396797033, 1684632180, 12901, 393222, 9, 8, 1396797033, 1684632180, 13157, 393222, 9, 9, 1396862569, 1684632180, 12389, 393222, 9, 10, 1396862569, 1684632180, 12645, 393222, 9, 11, 1396862569, 1684632180, 12901, 393222, 9, 12, 1396862569, 1684632180, 13157, 262149, 11, 1635018093, 0, 327685, 17, 1400141167, 1701863784, 48, 327685, 21, 1400141167, 1701863784, 49, 327685, 25, 1400141167, 1701863784, 50, 327685, 29, 1400141167, 1701863784, 51, 327685, 33, 1396797033, 1684632180, 12389, 327685, 37, 1396797033, 1684632180, 12645, 327685, 41, 1396797033, 1684632180, 12901, 327685, 45, 1396797033, 1684632180, 13157, 327685, 49, 1396862569, 1684632180, 12389, 327685, 53, 1396862569, 1684632180, 12645, 327685, 57, 1396862569, 1684632180, 12901, 327685, 61, 1396862569, 1684632180, 13157, 196613, 65, 105, 524293, 68, 1197436007, 1633841004, 1986939244, 1952539503, 1231974249, 68, 262149, 82, 862808420, 0, 262149, 86, 846031204, 0, 262149, 90, 829253988, 0, 262149, 97, 812476772, 0, 262149, 106, 1634890337, 17273, 327686, 106, 0, 1651340654, 7565925, 262149, 108, 1634890337, 6512505, 262149, 111, 1634890337, 16761, 327686, 111, 0, 1651340654, 7565925, 262149, 113, 1634890337, 6381433, 262149, 133, 1634890337, 17017, 327686, 133, 0, 1651340654, 7565925, 262149, 135, 1634890337, 6446969, 262216, 9, 0, 24, 327752, 9, 0, 35, 0, 262216, 9, 1, 24, 327752, 9, 1, 35, 4, 262216, 9, 2, 24, 327752, 9, 2, 35, 8, 262216, 9, 3, 24, 327752, 9, 3, 35, 12, 262216, 9, 4, 24, 327752, 9, 4, 35, 16, 262216, 9, 5, 24, 327752, 9, 5, 35, 20, 262216, 9, 6, 24, 327752, 9, 6, 35, 24, 262216, 9, 7, 24, 327752, 9, 7, 35, 28, 262216, 9, 8, 24, 327752, 9, 8, 35, 32, 262216, 9, 9, 24, 327752, 9, 9, 35, 36, 262216, 9, 10, 24, 327752, 9, 10, 35, 40, 262216, 9, 11, 24, 327752, 9, 11, 35, 44, 262216, 9, 12, 24, 327752, 9, 12, 35, 48, 196679, 9, 3, 262215, 11, 34, 0, 262215, 11, 33, 3, 262215, 68, 11, 28, 262215, 105, 6, 4, 327752, 106, 0, 35, 0, 196679, 106, 3, 262215, 108, 34, 0, 262215, 108, 33, 2, 262215, 110, 6, 4, 262216, 111, 0, 24, 327752, 111, 0, 35, 0, 196679, 111, 3, 262215, 113, 34, 0, 262215, 113, 33, 0, 262215, 132, 6, 4, 262216, 133, 0, 24, 327752, 133, 0, 35, 0, 196679, 133, 3, 262215, 135, 34, 0, 262215, 135, 33, 1, 262215, 160, 11, 25, 131091, 2, 196641, 3, 2, 262165, 6, 32, 0, 262176, 7, 7, 6, 983070, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 262176, 10, 2, 9, 262203, 10, 11, 2, 262165, 12, 32, 1, 262187, 12, 13, 0, 262176, 14, 2, 6, 262187, 12, 18, 1, 262187, 12, 22, 2, 262187, 12, 26, 3, 262187, 12, 30, 4, 262187, 12, 34, 5, 262187, 12, 38, 6, 262187, 12, 42, 7, 262187, 12, 46, 8, 262187, 12, 50, 9, 262187, 12, 54, 10, 262187, 12, 58, 11, 262187, 12, 62, 12, 262167, 66, 6, 3, 262176, 67, 1, 66, 262203, 67, 68, 1, 262187, 6, 69, 0, 262176, 70, 1, 6, 131092, 80, 196630, 104, 32, 196637, 105, 104, 196638, 106, 105, 262176, 107, 2, 106, 262203, 107, 108, 2, 196637, 110, 104, 196638, 111, 110, 262176, 112, 2, 111, 262203, 112, 113, 2, 262176, 129, 2, 104, 196637, 132, 104, 196638, 133, 132, 262176, 134, 2, 133, 262203, 134, 135, 2, 262187, 6, 155, 4096, 262187, 6, 158, 64, 262187, 6, 159, 1, 393260, 66, 160, 158, 159, 159, 327734, 2, 4, 0, 3, 131320, 5, 262203, 7, 8, 7, 262203, 7, 17, 7, 262203, 7, 21, 7, 262203, 7, 25, 7, 262203, 7, 29, 7, 262203, 7, 33, 7, 262203, 7, 37, 7, 262203, 7, 41, 7, 262203, 7, 45, 7, 262203, 7, 49, 7, 262203, 7, 53, 7, 262203, 7, 57, 7, 262203, 7, 61, 7, 262203, 7, 65, 7, 262203, 7, 82, 7, 262203, 7, 86, 7, 262203, 7, 90, 7, 262203, 7, 97, 7, 327745, 14, 15, 11, 13, 262205, 6, 16, 15, 196670, 8, 16, 327745, 14, 19, 11, 18, 262205, 6, 20, 19, 196670, 17, 20, 327745, 14, 23, 11, 22, 262205, 6, 24, 23, 196670, 21, 24, 327745, 14, 27, 11, 26, 262205, 6, 28, 27, 196670, 25, 28, 327745, 14, 31, 11, 30, 262205, 6, 32, 31, 196670, 29, 32, 327745, 14, 35, 11, 34, 262205, 6, 36, 35, 196670, 33, 36, 327745, 14, 39, 11, 38, 262205, 6, 40, 39, 196670, 37, 40, 327745, 14, 43, 11, 42, 262205, 6, 44, 43, 196670, 41, 44, 327745, 14, 47, 11, 46, 262205, 6, 48, 47, 196670, 45, 48, 327745, 14, 51, 11, 50, 262205, 6, 52, 51, 196670, 49, 52, 327745, 14, 55, 11, 54, 262205, 6, 56, 55, 196670, 53, 56, 327745, 14, 59, 11, 58, 262205, 6, 60, 59, 196670, 57, 60, 327745, 14, 63, 11, 62, 262205, 6, 64, 63, 196670, 61, 64, 327745, 70, 71, 68, 69, 262205, 6, 72, 71, 196670, 65, 72, 131321, 73, 131320, 73, 262390, 75, 76, 0, 131321, 77, 131320, 77, 262205, 6, 78, 65, 262205, 6, 79, 8, 327856, 80, 81, 78, 79, 262394, 81, 74, 75, 131320, 74, 262205, 6, 83, 65, 262205, 6, 84, 29, 327817, 6, 85, 83, 84, 196670, 82, 85, 262205, 6, 87, 65, 262205, 6, 88, 29, 327814, 6, 89, 87, 88, 196670, 86, 89, 262205, 6, 91, 86, 262205, 6, 92, 25, 327814, 6, 93, 91, 92, 196670, 90, 93, 262205, 6, 94, 86, 262205, 6, 95, 25, 327817, 6, 96, 94, 95, 196670, 86, 96, 262205, 6, 98, 90, 262205, 6, 99, 21, 327814, 6, 100, 98, 99, 196670, 97, 100, 262205, 6, 101, 90, 262205, 6, 102, 21, 327817, 6, 103, 101, 102, 196670, 90, 103, 262205, 6, 109, 65, 262205, 6, 114, 97, 262205, 6, 115, 33, 327812, 6, 116, 114, 115, 262205, 6, 117, 90, 262205, 6, 118, 37, 327812, 6, 119, 117, 118, 327808, 6, 120, 116, 119, 262205, 6, 121, 86, 262205, 6, 122, 41, 327812, 6, 123, 121, 122, 327808, 6, 124, 120, 123, 262205, 6, 125, 82, 262205, 6, 126, 45, 327812, 6, 127, 125, 126, 327808, 6, 128, 124, 127, 393281, 129, 130, 113, 13, 128, 262205, 104, 131, 130, 262205, 6, 136, 97, 262205, 6, 137, 49, 327812, 6, 138, 136, 137, 262205, 6, 139, 90, 262205, 6, 140, 53, 327812, 6, 141, 139, 140, 327808, 6, 142, 138, 141, 262205, 6, 143, 86, 262205, 6, 144, 57, 327812, 6, 145, 143, 144, 327808, 6, 146, 142, 145, 262205, 6, 147, 82, 262205, 6, 148, 61, 327812, 6, 149, 147, 148, 327808, 6, 150, 146, 149, 393281, 129, 151, 135, 13, 150, 262205, 104, 152, 151, 327809, 104, 153, 131, 152, 393281, 129, 154, 108, 13, 109, 196670, 154, 153, 131321, 76, 131320, 76, 262205, 6, 156, 65, 327808, 6, 157, 156, 155, 196670, 65, 157, 131321, 73, 131320, 75, 65789, 65592]),\n    binary_elementwise_add: new Uint32Array([119734787, 65536, 524296, 63, 0, 131089, 1, 393227, 1, 1280527431, 1685353262, 808793134, 0, 196622, 0, 1, 393231, 5, 4, 1852399981, 0, 20, 393232, 4, 17, 64, 1, 1, 196611, 2, 450, 262149, 4, 1852399981, 0, 196613, 8, 7234924, 262149, 9, 1635018061, 0, 262150, 9, 0, 7234924, 262149, 11, 1635018093, 0, 196613, 17, 105, 524293, 20, 1197436007, 1633841004, 1986939244, 1952539503, 1231974249, 68, 262149, 36, 1634890337, 17273, 327686, 36, 0, 1651340654, 7565925, 262149, 38, 1634890337, 6512505, 262149, 41, 1634890337, 16761, 327686, 41, 0, 1651340654, 7565925, 262149, 43, 1634890337, 6381433, 262149, 49, 1634890337, 17017, 327686, 49, 0, 1651340654, 7565925, 262149, 51, 1634890337, 6446969, 262216, 9, 0, 24, 327752, 9, 0, 35, 0, 196679, 9, 3, 262215, 11, 34, 0, 262215, 11, 33, 3, 262215, 20, 11, 28, 262215, 35, 6, 4, 327752, 36, 0, 35, 0, 196679, 36, 3, 262215, 38, 34, 0, 262215, 38, 33, 2, 262215, 40, 6, 4, 262216, 41, 0, 24, 327752, 41, 0, 35, 0, 196679, 41, 3, 262215, 43, 34, 0, 262215, 43, 33, 0, 262215, 48, 6, 4, 262216, 49, 0, 24, 327752, 49, 0, 35, 0, 196679, 49, 3, 262215, 51, 34, 0, 262215, 51, 33, 1, 262215, 62, 11, 25, 131091, 2, 196641, 3, 2, 262165, 6, 32, 0, 262176, 7, 7, 6, 196638, 9, 6, 262176, 10, 2, 9, 262203, 10, 11, 2, 262165, 12, 32, 1, 262187, 12, 13, 0, 262176, 14, 2, 6, 262167, 18, 6, 3, 262176, 19, 1, 18, 262203, 19, 20, 1, 262187, 6, 21, 0, 262176, 22, 1, 6, 131092, 32, 196630, 34, 32, 196637, 35, 34, 196638, 36, 35, 262176, 37, 2, 36, 262203, 37, 38, 2, 196637, 40, 34, 196638, 41, 40, 262176, 42, 2, 41, 262203, 42, 43, 2, 262176, 45, 2, 34, 196637, 48, 34, 196638, 49, 48, 262176, 50, 2, 49, 262203, 50, 51, 2, 262187, 6, 57, 4096, 262187, 6, 60, 64, 262187, 6, 61, 1, 393260, 18, 62, 60, 61, 61, 327734, 2, 4, 0, 3, 131320, 5, 262203, 7, 8, 7, 262203, 7, 17, 7, 327745, 14, 15, 11, 13, 262205, 6, 16, 15, 196670, 8, 16, 327745, 22, 23, 20, 21, 262205, 6, 24, 23, 196670, 17, 24, 131321, 25, 131320, 25, 262390, 27, 28, 0, 131321, 29, 131320, 29, 262205, 6, 30, 17, 262205, 6, 31, 8, 327856, 32, 33, 30, 31, 262394, 33, 26, 27, 131320, 26, 262205, 6, 39, 17, 262205, 6, 44, 17, 393281, 45, 46, 43, 13, 44, 262205, 34, 47, 46, 262205, 6, 52, 17, 393281, 45, 53, 51, 13, 52, 262205, 34, 54, 53, 327809, 34, 55, 47, 54, 393281, 45, 56, 38, 13, 39, 196670, 56, 55, 131321, 28, 131320, 28, 262205, 6, 58, 17, 327808, 6, 59, 58, 57, 196670, 17, 59, 131321, 25, 131320, 27, 65789, 65592]),\n    conv_bias: new Uint32Array([119734787, 65536, 524296, 89, 0, 131089, 1, 393227, 1, 1280527431, 1685353262, 808793134, 0, 196622, 0, 1, 393231, 5, 4, 1852399981, 0, 34, 393232, 4, 17, 64, 1, 1, 196611, 2, 450, 262149, 4, 1852399981, 0, 262149, 8, 1668571490, 104, 327685, 9, 1634890337, 1952796025, 97, 327686, 9, 0, 1668571490, 104, 327686, 9, 1, 1968138339, 116, 327686, 9, 2, 1635022191, 6382962, 262149, 11, 1635018093, 0, 262149, 16, 1968138339, 116, 262149, 20, 1635022191, 6382962, 262149, 24, 1635020660, 108, 196613, 30, 7890025, 524293, 34, 1197436007, 1633841004, 1986939244, 1952539503, 1231974249, 68, 196613, 49, 120, 196613, 53, 99, 262149, 62, 1634890337, 20345, 327686, 62, 0, 1651340654, 7565925, 262149, 64, 1634890337, 7298937, 262149, 67, 1634890337, 18809, 327686, 67, 0, 1651340654, 7565925, 262149, 69, 1634890337, 6905721, 262149, 75, 1634890337, 17017, 327686, 75, 0, 1651340654, 7565925, 262149, 77, 1634890337, 6446969, 262216, 9, 0, 24, 327752, 9, 0, 35, 0, 262216, 9, 1, 24, 327752, 9, 1, 35, 4, 262216, 9, 2, 24, 327752, 9, 2, 35, 8, 196679, 9, 3, 262215, 11, 34, 0, 262215, 11, 33, 3, 262215, 34, 11, 28, 262215, 61, 6, 4, 327752, 62, 0, 35, 0, 196679, 62, 3, 262215, 64, 34, 0, 262215, 64, 33, 2, 262215, 66, 6, 4, 262216, 67, 0, 24, 327752, 67, 0, 35, 0, 196679, 67, 3, 262215, 69, 34, 0, 262215, 69, 33, 0, 262215, 74, 6, 4, 262216, 75, 0, 24, 327752, 75, 0, 35, 0, 196679, 75, 3, 262215, 77, 34, 0, 262215, 77, 33, 1, 262215, 88, 11, 25, 131091, 2, 196641, 3, 2, 262165, 6, 32, 1, 262176, 7, 7, 6, 327710, 9, 6, 6, 6, 262176, 10, 2, 9, 262203, 10, 11, 2, 262187, 6, 12, 0, 262176, 13, 2, 6, 262187, 6, 17, 1, 262187, 6, 21, 2, 262165, 31, 32, 0, 262167, 32, 31, 3, 262176, 33, 1, 32, 262203, 33, 34, 1, 262187, 31, 35, 0, 262176, 36, 1, 31, 131092, 47, 196630, 60, 32, 196637, 61, 60, 196638, 62, 61, 262176, 63, 2, 62, 262203, 63, 64, 2, 196637, 66, 60, 196638, 67, 66, 262176, 68, 2, 67, 262203, 68, 69, 2, 262176, 71, 2, 60, 196637, 74, 60, 196638, 75, 74, 262176, 76, 2, 75, 262203, 76, 77, 2, 262187, 6, 83, 4096, 262187, 31, 86, 64, 262187, 31, 87, 1, 393260, 32, 88, 86, 87, 87, 327734, 2, 4, 0, 3, 131320, 5, 262203, 7, 8, 7, 262203, 7, 16, 7, 262203, 7, 20, 7, 262203, 7, 24, 7, 262203, 7, 30, 7, 262203, 7, 49, 7, 262203, 7, 53, 7, 327745, 13, 14, 11, 12, 262205, 6, 15, 14, 196670, 8, 15, 327745, 13, 18, 11, 17, 262205, 6, 19, 18, 196670, 16, 19, 327745, 13, 22, 11, 21, 262205, 6, 23, 22, 196670, 20, 23, 262205, 6, 25, 8, 262205, 6, 26, 16, 327812, 6, 27, 25, 26, 262205, 6, 28, 20, 327812, 6, 29, 27, 28, 196670, 24, 29, 327745, 36, 37, 34, 35, 262205, 31, 38, 37, 262268, 6, 39, 38, 196670, 30, 39, 131321, 40, 131320, 40, 262390, 42, 43, 0, 131321, 44, 131320, 44, 262205, 6, 45, 30, 262205, 6, 46, 24, 327857, 47, 48, 45, 46, 262394, 48, 41, 42, 131320, 41, 262205, 6, 50, 30, 262205, 6, 51, 20, 327819, 6, 52, 50, 51, 196670, 49, 52, 262205, 6, 54, 30, 262205, 6, 55, 20, 327815, 6, 56, 54, 55, 196670, 53, 56, 262205, 6, 57, 53, 262205, 6, 58, 16, 327819, 6, 59, 57, 58, 196670, 53, 59, 262205, 6, 65, 30, 262205, 6, 70, 30, 393281, 71, 72, 69, 12, 70, 262205, 60, 73, 72, 262205, 6, 78, 53, 393281, 71, 79, 77, 12, 78, 262205, 60, 80, 79, 327809, 60, 81, 73, 80, 393281, 71, 82, 64, 12, 65, 196670, 82, 81, 131321, 43, 131320, 43, 262205, 6, 84, 30, 327808, 6, 85, 84, 83, 196670, 30, 85, 131321, 40, 131320, 42, 65789, 65592]),\n    conv_im2col: new Uint32Array([119734787, 65536, 524296, 229, 0, 131089, 1, 393227, 1, 1280527431, 1685353262, 808793134, 0, 196622, 0, 1, 393231, 5, 4, 1852399981, 0, 94, 393232, 4, 17, 64, 1, 1, 196611, 2, 450, 262149, 4, 1852399981, 0, 262149, 8, 1970238055, 112, 327685, 9, 1634890337, 1952796025, 97, 327686, 9, 0, 1970238055, 112, 327686, 9, 1, 1668571490, 104, 393222, 9, 2, 1400141167, 1701863784, 48, 393222, 9, 3, 1400141167, 1701863784, 49, 458758, 9, 4, 1850304611, 1198679376, 1886744434, 0, 458758, 9, 5, 1852990827, 1750297701, 811954273, 0, 458758, 9, 6, 1852990827, 1750297701, 828731489, 0, 393222, 9, 7, 1769108595, 812868964, 0, 393222, 9, 8, 1769108595, 829646180, 0, 327686, 9, 9, 1935958384, 48, 327686, 9, 10, 1935958384, 49, 393222, 9, 11, 1634494820, 1852795252, 12403, 393222, 9, 12, 1634494820, 1852795252, 12659, 393222, 9, 13, 1750298217, 811954273, 0, 393222, 9, 14, 1750298217, 828731489, 0, 327686, 9, 15, 1850304611, 0, 262149, 11, 1635018093, 0, 262149, 16, 1668571490, 104, 327685, 20, 1400141167, 1701863784, 48, 327685, 24, 1400141167, 1701863784, 49, 393221, 28, 1850304611, 1198679376, 1886744434, 0, 393221, 32, 1852990827, 1750297701, 811954273, 0, 393221, 36, 1852990827, 1750297701, 828731489, 0, 327685, 40, 1769108595, 812868964, 0, 327685, 44, 1769108595, 829646180, 0, 262149, 48, 1935958384, 48, 262149, 52, 1935958384, 49, 327685, 56, 1634494820, 1852795252, 12403, 327685, 60, 1634494820, 1852795252, 12659, 327685, 64, 1750298217, 811954273, 0, 327685, 68, 1750298217, 828731489, 0, 262149, 72, 1850304611, 0, 262149, 76, 1635020660, 108, 196613, 90, 7890025, 524293, 94, 1197436007, 1633841004, 1986939244, 1952539503, 1231974249, 68, 196613, 109, 31083, 196613, 113, 30827, 196613, 117, 26979, 196613, 124, 30831, 196613, 131, 31087, 196613, 138, 98, 196613, 145, 103, 196613, 152, 7958121, 196613, 162, 7892585, 196613, 189, 118, 262149, 191, 1634890337, 22649, 327686, 191, 0, 1651340654, 7565925, 262149, 193, 1634890337, 7888761, 262149, 217, 1634890337, 22905, 327686, 217, 0, 1651340654, 7565925, 262149, 219, 1634890337, 7954297, 262216, 9, 0, 24, 327752, 9, 0, 35, 0, 262216, 9, 1, 24, 327752, 9, 1, 35, 4, 262216, 9, 2, 24, 327752, 9, 2, 35, 8, 262216, 9, 3, 24, 327752, 9, 3, 35, 12, 262216, 9, 4, 24, 327752, 9, 4, 35, 16, 262216, 9, 5, 24, 327752, 9, 5, 35, 20, 262216, 9, 6, 24, 327752, 9, 6, 35, 24, 262216, 9, 7, 24, 327752, 9, 7, 35, 28, 262216, 9, 8, 24, 327752, 9, 8, 35, 32, 262216, 9, 9, 24, 327752, 9, 9, 35, 36, 262216, 9, 10, 24, 327752, 9, 10, 35, 40, 262216, 9, 11, 24, 327752, 9, 11, 35, 44, 262216, 9, 12, 24, 327752, 9, 12, 35, 48, 262216, 9, 13, 24, 327752, 9, 13, 35, 52, 262216, 9, 14, 24, 327752, 9, 14, 35, 56, 262216, 9, 15, 24, 327752, 9, 15, 35, 60, 196679, 9, 3, 262215, 11, 34, 0, 262215, 11, 33, 2, 262215, 94, 11, 28, 262215, 190, 6, 4, 262216, 191, 0, 24, 327752, 191, 0, 35, 0, 196679, 191, 3, 262215, 193, 34, 0, 262215, 193, 33, 0, 262215, 216, 6, 4, 327752, 217, 0, 35, 0, 196679, 217, 3, 262215, 219, 34, 0, 262215, 219, 33, 1, 262215, 228, 11, 25, 131091, 2, 196641, 3, 2, 262165, 6, 32, 1, 262176, 7, 7, 6, 1179678, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 262176, 10, 2, 9, 262203, 10, 11, 2, 262187, 6, 12, 0, 262176, 13, 2, 6, 262187, 6, 17, 1, 262187, 6, 21, 2, 262187, 6, 25, 3, 262187, 6, 29, 4, 262187, 6, 33, 5, 262187, 6, 37, 6, 262187, 6, 41, 7, 262187, 6, 45, 8, 262187, 6, 49, 9, 262187, 6, 53, 10, 262187, 6, 57, 11, 262187, 6, 61, 12, 262187, 6, 65, 13, 262187, 6, 69, 14, 262187, 6, 73, 15, 262165, 91, 32, 0, 262167, 92, 91, 3, 262176, 93, 1, 92, 262203, 93, 94, 1, 262187, 91, 95, 0, 262176, 96, 1, 91, 131092, 107, 196630, 187, 32, 262176, 188, 7, 187, 196637, 190, 187, 196638, 191, 190, 262176, 192, 2, 191, 262203, 192, 193, 2, 262176, 211, 2, 187, 262187, 187, 215, 0, 196637, 216, 187, 196638, 217, 216, 262176, 218, 2, 217, 262203, 218, 219, 2, 262187, 6, 223, 4096, 262187, 91, 226, 64, 262187, 91, 227, 1, 393260, 92, 228, 226, 227, 227, 327734, 2, 4, 0, 3, 131320, 5, 262203, 7, 8, 7, 262203, 7, 16, 7, 262203, 7, 20, 7, 262203, 7, 24, 7, 262203, 7, 28, 7, 262203, 7, 32, 7, 262203, 7, 36, 7, 262203, 7, 40, 7, 262203, 7, 44, 7, 262203, 7, 48, 7, 262203, 7, 52, 7, 262203, 7, 56, 7, 262203, 7, 60, 7, 262203, 7, 64, 7, 262203, 7, 68, 7, 262203, 7, 72, 7, 262203, 7, 76, 7, 262203, 7, 90, 7, 262203, 7, 109, 7, 262203, 7, 113, 7, 262203, 7, 117, 7, 262203, 7, 124, 7, 262203, 7, 131, 7, 262203, 7, 138, 7, 262203, 7, 145, 7, 262203, 7, 152, 7, 262203, 7, 162, 7, 262203, 188, 189, 7, 327745, 13, 14, 11, 12, 262205, 6, 15, 14, 196670, 8, 15, 327745, 13, 18, 11, 17, 262205, 6, 19, 18, 196670, 16, 19, 327745, 13, 22, 11, 21, 262205, 6, 23, 22, 196670, 20, 23, 327745, 13, 26, 11, 25, 262205, 6, 27, 26, 196670, 24, 27, 327745, 13, 30, 11, 29, 262205, 6, 31, 30, 196670, 28, 31, 327745, 13, 34, 11, 33, 262205, 6, 35, 34, 196670, 32, 35, 327745, 13, 38, 11, 37, 262205, 6, 39, 38, 196670, 36, 39, 327745, 13, 42, 11, 41, 262205, 6, 43, 42, 196670, 40, 43, 327745, 13, 46, 11, 45, 262205, 6, 47, 46, 196670, 44, 47, 327745, 13, 50, 11, 49, 262205, 6, 51, 50, 196670, 48, 51, 327745, 13, 54, 11, 53, 262205, 6, 55, 54, 196670, 52, 55, 327745, 13, 58, 11, 57, 262205, 6, 59, 58, 196670, 56, 59, 327745, 13, 62, 11, 61, 262205, 6, 63, 62, 196670, 60, 63, 327745, 13, 66, 11, 65, 262205, 6, 67, 66, 196670, 64, 67, 327745, 13, 70, 11, 69, 262205, 6, 71, 70, 196670, 68, 71, 327745, 13, 74, 11, 73, 262205, 6, 75, 74, 196670, 72, 75, 262205, 6, 77, 8, 262205, 6, 78, 16, 327812, 6, 79, 77, 78, 262205, 6, 80, 20, 327812, 6, 81, 79, 80, 262205, 6, 82, 24, 327812, 6, 83, 81, 82, 262205, 6, 84, 28, 327812, 6, 85, 83, 84, 262205, 6, 86, 32, 327812, 6, 87, 85, 86, 262205, 6, 88, 36, 327812, 6, 89, 87, 88, 196670, 76, 89, 327745, 96, 97, 94, 95, 262205, 91, 98, 97, 262268, 6, 99, 98, 196670, 90, 99, 131321, 100, 131320, 100, 262390, 102, 103, 0, 131321, 104, 131320, 104, 262205, 6, 105, 90, 262205, 6, 106, 76, 327857, 107, 108, 105, 106, 262394, 108, 101, 102, 131320, 101, 262205, 6, 110, 90, 262205, 6, 111, 36, 327815, 6, 112, 110, 111, 196670, 109, 112, 262205, 6, 114, 90, 262205, 6, 115, 36, 327819, 6, 116, 114, 115, 196670, 113, 116, 262205, 6, 118, 109, 262205, 6, 119, 32, 327815, 6, 120, 118, 119, 196670, 117, 120, 262205, 6, 121, 109, 262205, 6, 122, 32, 327819, 6, 123, 121, 122, 196670, 109, 123, 262205, 6, 125, 117, 262205, 6, 126, 28, 327815, 6, 127, 125, 126, 196670, 124, 127, 262205, 6, 128, 117, 262205, 6, 129, 28, 327819, 6, 130, 128, 129, 196670, 117, 130, 262205, 6, 132, 124, 262205, 6, 133, 24, 327815, 6, 134, 132, 133, 196670, 131, 134, 262205, 6, 135, 124, 262205, 6, 136, 24, 327819, 6, 137, 135, 136, 196670, 124, 137, 262205, 6, 139, 131, 262205, 6, 140, 20, 327815, 6, 141, 139, 140, 196670, 138, 141, 262205, 6, 142, 131, 262205, 6, 143, 20, 327819, 6, 144, 142, 143, 196670, 131, 144, 262205, 6, 146, 138, 262205, 6, 147, 16, 327815, 6, 148, 146, 147, 196670, 145, 148, 262205, 6, 149, 138, 262205, 6, 150, 16, 327819, 6, 151, 149, 150, 196670, 138, 151, 262205, 6, 153, 131, 262205, 6, 154, 40, 327812, 6, 155, 153, 154, 262205, 6, 156, 48, 327810, 6, 157, 155, 156, 262205, 6, 158, 109, 262205, 6, 159, 56, 327812, 6, 160, 158, 159, 327808, 6, 161, 157, 160, 196670, 152, 161, 262205, 6, 163, 124, 262205, 6, 164, 44, 327812, 6, 165, 163, 164, 262205, 6, 166, 52, 327810, 6, 167, 165, 166, 262205, 6, 168, 113, 262205, 6, 169, 60, 327812, 6, 170, 168, 169, 327808, 6, 171, 167, 170, 196670, 162, 171, 262205, 6, 172, 152, 327855, 107, 173, 172, 12, 262205, 6, 174, 152, 262205, 6, 175, 64, 327857, 107, 176, 174, 175, 327847, 107, 177, 173, 176, 262205, 6, 178, 162, 327855, 107, 179, 178, 12, 327847, 107, 180, 177, 179, 262205, 6, 181, 162, 262205, 6, 182, 68, 327857, 107, 183, 181, 182, 327847, 107, 184, 180, 183, 196855, 186, 0, 262394, 184, 185, 214, 131320, 185, 262205, 6, 194, 138, 262205, 6, 195, 72, 327812, 6, 196, 194, 195, 262205, 6, 197, 145, 262205, 6, 198, 28, 327812, 6, 199, 197, 198, 327808, 6, 200, 196, 199, 262205, 6, 201, 117, 327808, 6, 202, 200, 201, 262205, 6, 203, 64, 327812, 6, 204, 202, 203, 262205, 6, 205, 152, 327808, 6, 206, 204, 205, 262205, 6, 207, 68, 327812, 6, 208, 206, 207, 262205, 6, 209, 162, 327808, 6, 210, 208, 209, 393281, 211, 212, 193, 12, 210, 262205, 187, 213, 212, 196670, 189, 213, 131321, 186, 131320, 214, 196670, 189, 215, 131321, 186, 131320, 186, 262205, 6, 220, 90, 262205, 187, 221, 189, 393281, 211, 222, 219, 12, 220, 196670, 222, 221, 131321, 103, 131320, 103, 262205, 6, 224, 90, 327808, 6, 225, 224, 223, 196670, 90, 225, 131321, 100, 131320, 102, 65789, 65592]),\n    conv_matmul: new Uint32Array([119734787, 65536, 524296, 130, 0, 131089, 1, 393227, 1, 1280527431, 1685353262, 808793134, 0, 196622, 0, 1, 393231, 5, 4, 1852399981, 0, 38, 393232, 4, 17, 64, 1, 1, 196611, 2, 450, 262149, 4, 1852399981, 0, 262149, 8, 1970238055, 112, 327685, 9, 1634890337, 1952796025, 97, 327686, 9, 0, 1970238055, 112, 327686, 9, 1, 1953853282, 0, 458758, 9, 2, 1968138339, 1919242356, 1970238023, 112, 327686, 9, 3, 1802398051, 7826280, 262149, 11, 1635018093, 0, 262149, 16, 1953853282, 0, 393221, 20, 1968138339, 1919242356, 1970238023, 112, 262149, 24, 1802398051, 7826280, 262149, 28, 1635020660, 108, 196613, 34, 7890025, 524293, 38, 1197436007, 1633841004, 1986939244, 1952539503, 1231974249, 68, 196613, 53, 120, 196613, 57, 121, 196613, 61, 103, 196613, 70, 115, 196613, 72, 28777, 262149, 82, 1634890337, 18809, 327686, 82, 0, 1651340654, 7565925, 262149, 84, 1634890337, 6905721, 262149, 98, 1634890337, 22393, 327686, 98, 0, 1651340654, 7565925, 262149, 100, 1634890337, 7823225, 262149, 118, 1634890337, 21625, 327686, 118, 0, 1651340654, 7565925, 262149, 120, 1634890337, 7626617, 262216, 9, 0, 24, 327752, 9, 0, 35, 0, 262216, 9, 1, 24, 327752, 9, 1, 35, 4, 262216, 9, 2, 24, 327752, 9, 2, 35, 8, 262216, 9, 3, 24, 327752, 9, 3, 35, 12, 196679, 9, 3, 262215, 11, 34, 0, 262215, 11, 33, 3, 262215, 38, 11, 28, 262215, 81, 6, 4, 262216, 82, 0, 24, 327752, 82, 0, 35, 0, 196679, 82, 3, 262215, 84, 34, 0, 262215, 84, 33, 0, 262215, 97, 6, 4, 262216, 98, 0, 24, 327752, 98, 0, 35, 0, 196679, 98, 3, 262215, 100, 34, 0, 262215, 100, 33, 1, 262215, 117, 6, 4, 327752, 118, 0, 35, 0, 196679, 118, 3, 262215, 120, 34, 0, 262215, 120, 33, 2, 262215, 129, 11, 25, 131091, 2, 196641, 3, 2, 262165, 6, 32, 1, 262176, 7, 7, 6, 393246, 9, 6, 6, 6, 6, 262176, 10, 2, 9, 262203, 10, 11, 2, 262187, 6, 12, 0, 262176, 13, 2, 6, 262187, 6, 17, 1, 262187, 6, 21, 2, 262187, 6, 25, 3, 262165, 35, 32, 0, 262167, 36, 35, 3, 262176, 37, 1, 36, 262203, 37, 38, 1, 262187, 35, 39, 0, 262176, 40, 1, 35, 131092, 51, 196630, 68, 32, 262176, 69, 7, 68, 262187, 68, 71, 0, 196637, 81, 68, 196638, 82, 81, 262176, 83, 2, 82, 262203, 83, 84, 2, 262176, 94, 2, 68, 196637, 97, 68, 196638, 98, 97, 262176, 99, 2, 98, 262203, 99, 100, 2, 196637, 117, 68, 196638, 118, 117, 262176, 119, 2, 118, 262203, 119, 120, 2, 262187, 6, 124, 4096, 262187, 35, 127, 64, 262187, 35, 128, 1, 393260, 36, 129, 127, 128, 128, 327734, 2, 4, 0, 3, 131320, 5, 262203, 7, 8, 7, 262203, 7, 16, 7, 262203, 7, 20, 7, 262203, 7, 24, 7, 262203, 7, 28, 7, 262203, 7, 34, 7, 262203, 7, 53, 7, 262203, 7, 57, 7, 262203, 7, 61, 7, 262203, 69, 70, 7, 262203, 7, 72, 7, 327745, 13, 14, 11, 12, 262205, 6, 15, 14, 196670, 8, 15, 327745, 13, 18, 11, 17, 262205, 6, 19, 18, 196670, 16, 19, 327745, 13, 22, 11, 21, 262205, 6, 23, 22, 196670, 20, 23, 327745, 13, 26, 11, 25, 262205, 6, 27, 26, 196670, 24, 27, 262205, 6, 29, 8, 262205, 6, 30, 16, 327812, 6, 31, 29, 30, 262205, 6, 32, 20, 327812, 6, 33, 31, 32, 196670, 28, 33, 327745, 40, 41, 38, 39, 262205, 35, 42, 41, 262268, 6, 43, 42, 196670, 34, 43, 131321, 44, 131320, 44, 262390, 46, 47, 0, 131321, 48, 131320, 48, 262205, 6, 49, 34, 262205, 6, 50, 28, 327857, 51, 52, 49, 50, 262394, 52, 45, 46, 131320, 45, 262205, 6, 54, 34, 262205, 6, 55, 20, 327819, 6, 56, 54, 55, 196670, 53, 56, 262205, 6, 58, 34, 262205, 6, 59, 20, 327815, 6, 60, 58, 59, 196670, 57, 60, 262205, 6, 62, 57, 262205, 6, 63, 16, 327815, 6, 64, 62, 63, 196670, 61, 64, 262205, 6, 65, 57, 262205, 6, 66, 16, 327819, 6, 67, 65, 66, 196670, 57, 67, 196670, 70, 71, 196670, 72, 12, 131321, 73, 131320, 73, 262390, 75, 76, 0, 131321, 77, 131320, 77, 262205, 6, 78, 72, 262205, 6, 79, 24, 327857, 51, 80, 78, 79, 262394, 80, 74, 75, 131320, 74, 262205, 6, 85, 61, 262205, 6, 86, 16, 327812, 6, 87, 85, 86, 262205, 6, 88, 57, 327808, 6, 89, 87, 88, 262205, 6, 90, 24, 327812, 6, 91, 89, 90, 262205, 6, 92, 72, 327808, 6, 93, 91, 92, 393281, 94, 95, 84, 12, 93, 262205, 68, 96, 95, 262205, 6, 101, 61, 262205, 6, 102, 20, 327812, 6, 103, 101, 102, 262205, 6, 104, 53, 327808, 6, 105, 103, 104, 262205, 6, 106, 24, 327812, 6, 107, 105, 106, 262205, 6, 108, 72, 327808, 6, 109, 107, 108, 393281, 94, 110, 100, 12, 109, 262205, 68, 111, 110, 327813, 68, 112, 96, 111, 262205, 68, 113, 70, 327809, 68, 114, 113, 112, 196670, 70, 114, 131321, 76, 131320, 76, 262205, 6, 115, 72, 327808, 6, 116, 115, 17, 196670, 72, 116, 131321, 73, 131320, 75, 262205, 6, 121, 34, 262205, 68, 122, 70, 393281, 94, 123, 120, 12, 121, 196670, 123, 122, 131321, 47, 131320, 47, 262205, 6, 125, 34, 327808, 6, 126, 125, 124, 196670, 34, 126, 131321, 44, 131320, 46, 65789, 65592]),\n    conv_transpose: new Uint32Array([119734787, 65536, 524296, 110, 0, 131089, 1, 393227, 1, 1280527431, 1685353262, 808793134, 0, 196622, 0, 1, 393231, 5, 4, 1852399981, 0, 40, 393232, 4, 17, 64, 1, 1, 196611, 2, 450, 262149, 4, 1852399981, 0, 262149, 8, 1970238055, 112, 327685, 9, 1634890337, 1952796025, 97, 327686, 9, 0, 1970238055, 112, 327686, 9, 1, 1668571490, 104, 327686, 9, 2, 1635022191, 6382962, 458758, 9, 3, 1968138339, 1919242356, 1970238023, 112, 262149, 11, 1635018093, 0, 262149, 16, 1668571490, 104, 262149, 20, 1635022191, 6382962, 393221, 24, 1968138339, 1919242356, 1970238023, 112, 262149, 28, 1635020660, 108, 196613, 36, 7890025, 524293, 40, 1197436007, 1633841004, 1986939244, 1952539503, 1231974249, 68, 196613, 55, 120, 196613, 59, 99, 196613, 63, 103, 196613, 70, 98, 262149, 79, 1634890337, 20345, 327686, 79, 0, 1651340654, 7565925, 262149, 81, 1634890337, 7298937, 262149, 84, 1634890337, 21625, 327686, 84, 0, 1651340654, 7565925, 262149, 86, 1634890337, 7626617, 262216, 9, 0, 24, 327752, 9, 0, 35, 0, 262216, 9, 1, 24, 327752, 9, 1, 35, 4, 262216, 9, 2, 24, 327752, 9, 2, 35, 8, 262216, 9, 3, 24, 327752, 9, 3, 35, 12, 196679, 9, 3, 262215, 11, 34, 0, 262215, 11, 33, 2, 262215, 40, 11, 28, 262215, 78, 6, 4, 327752, 79, 0, 35, 0, 196679, 79, 3, 262215, 81, 34, 0, 262215, 81, 33, 1, 262215, 83, 6, 4, 262216, 84, 0, 24, 327752, 84, 0, 35, 0, 196679, 84, 3, 262215, 86, 34, 0, 262215, 86, 33, 0, 262215, 109, 11, 25, 131091, 2, 196641, 3, 2, 262165, 6, 32, 1, 262176, 7, 7, 6, 393246, 9, 6, 6, 6, 6, 262176, 10, 2, 9, 262203, 10, 11, 2, 262187, 6, 12, 0, 262176, 13, 2, 6, 262187, 6, 17, 1, 262187, 6, 21, 2, 262187, 6, 25, 3, 262165, 37, 32, 0, 262167, 38, 37, 3, 262176, 39, 1, 38, 262203, 39, 40, 1, 262187, 37, 41, 0, 262176, 42, 1, 37, 131092, 53, 196630, 77, 32, 196637, 78, 77, 196638, 79, 78, 262176, 80, 2, 79, 262203, 80, 81, 2, 196637, 83, 77, 196638, 84, 83, 262176, 85, 2, 84, 262203, 85, 86, 2, 262176, 100, 2, 77, 262187, 6, 104, 4096, 262187, 37, 107, 64, 262187, 37, 108, 1, 393260, 38, 109, 107, 108, 108, 327734, 2, 4, 0, 3, 131320, 5, 262203, 7, 8, 7, 262203, 7, 16, 7, 262203, 7, 20, 7, 262203, 7, 24, 7, 262203, 7, 28, 7, 262203, 7, 36, 7, 262203, 7, 55, 7, 262203, 7, 59, 7, 262203, 7, 63, 7, 262203, 7, 70, 7, 327745, 13, 14, 11, 12, 262205, 6, 15, 14, 196670, 8, 15, 327745, 13, 18, 11, 17, 262205, 6, 19, 18, 196670, 16, 19, 327745, 13, 22, 11, 21, 262205, 6, 23, 22, 196670, 20, 23, 327745, 13, 26, 11, 25, 262205, 6, 27, 26, 196670, 24, 27, 262205, 6, 29, 8, 262205, 6, 30, 16, 327812, 6, 31, 29, 30, 262205, 6, 32, 24, 327812, 6, 33, 31, 32, 262205, 6, 34, 20, 327812, 6, 35, 33, 34, 196670, 28, 35, 327745, 42, 43, 40, 41, 262205, 37, 44, 43, 262268, 6, 45, 44, 196670, 36, 45, 131321, 46, 131320, 46, 262390, 48, 49, 0, 131321, 50, 131320, 50, 262205, 6, 51, 36, 262205, 6, 52, 28, 327857, 53, 54, 51, 52, 262394, 54, 47, 48, 131320, 47, 262205, 6, 56, 36, 262205, 6, 57, 20, 327819, 6, 58, 56, 57, 196670, 55, 58, 262205, 6, 60, 36, 262205, 6, 61, 20, 327815, 6, 62, 60, 61, 196670, 59, 62, 262205, 6, 64, 59, 262205, 6, 65, 24, 327815, 6, 66, 64, 65, 196670, 63, 66, 262205, 6, 67, 59, 262205, 6, 68, 24, 327819, 6, 69, 67, 68, 196670, 59, 69, 262205, 6, 71, 63, 262205, 6, 72, 8, 327815, 6, 73, 71, 72, 196670, 70, 73, 262205, 6, 74, 63, 262205, 6, 75, 8, 327819, 6, 76, 74, 75, 196670, 63, 76, 262205, 6, 82, 36, 262205, 6, 87, 63, 262205, 6, 88, 16, 327812, 6, 89, 87, 88, 262205, 6, 90, 70, 327808, 6, 91, 89, 90, 262205, 6, 92, 20, 327812, 6, 93, 91, 92, 262205, 6, 94, 55, 327808, 6, 95, 93, 94, 262205, 6, 96, 24, 327812, 6, 97, 95, 96, 262205, 6, 98, 59, 327808, 6, 99, 97, 98, 393281, 100, 101, 86, 12, 99, 262205, 77, 102, 101, 393281, 100, 103, 81, 12, 82, 196670, 103, 102, 131321, 49, 131320, 49, 262205, 6, 105, 36, 327808, 6, 106, 105, 104, 196670, 36, 106, 131321, 46, 131320, 48, 65789, 65592]),\n    gemm: new Uint32Array([119734787, 65536, 524296, 167, 0, 131089, 1, 393227, 1, 1280527431, 1685353262, 808793134, 0, 196622, 0, 1, 393231, 5, 4, 1852399981, 0, 63, 393232, 4, 17, 8, 8, 1, 196611, 2, 450, 262149, 4, 1852399981, 0, 196613, 8, 77, 327685, 10, 1634890337, 1952796025, 97, 262150, 10, 0, 77, 262150, 10, 1, 78, 262150, 10, 2, 75, 393222, 10, 3, 1769108595, 809592164, 0, 393222, 10, 4, 1769108595, 826369380, 0, 393222, 10, 5, 1769108595, 809657700, 0, 393222, 10, 6, 1769108595, 826434916, 0, 393222, 10, 7, 1769108595, 809723236, 0, 393222, 10, 8, 1769108595, 826500452, 0, 327686, 10, 9, 1752198241, 97, 327686, 10, 10, 1635018082, 0, 262149, 12, 1635018093, 0, 196613, 18, 78, 196613, 22, 75, 327685, 26, 1769108595, 809592164, 0, 327685, 30, 1769108595, 826369380, 0, 327685, 34, 1769108595, 809657700, 0, 327685, 38, 1769108595, 826434916, 0, 327685, 42, 1769108595, 809723236, 0, 327685, 46, 1769108595, 826500452, 0, 262149, 51, 1752198241, 97, 262149, 56, 1635018082, 0, 196613, 60, 120, 524293, 63, 1197436007, 1633841004, 1986939244, 1952539503, 1231974249, 68, 196613, 77, 121, 196613, 89, 7173491, 196613, 91, 107, 262149, 101, 1634890337, 16761, 327686, 101, 0, 1651340654, 7565925, 262149, 103, 1634890337, 6381433, 262149, 114, 1634890337, 17017, 327686, 114, 0, 1651340654, 7565925, 262149, 116, 1634890337, 6446969, 262149, 132, 1634890337, 22905, 327686, 132, 0, 1651340654, 7565925, 262149, 134, 1634890337, 7954297, 262149, 144, 1634890337, 17273, 327686, 144, 0, 1651340654, 7565925, 262149, 146, 1634890337, 6512505, 262216, 10, 0, 24, 327752, 10, 0, 35, 0, 262216, 10, 1, 24, 327752, 10, 1, 35, 4, 262216, 10, 2, 24, 327752, 10, 2, 35, 8, 262216, 10, 3, 24, 327752, 10, 3, 35, 12, 262216, 10, 4, 24, 327752, 10, 4, 35, 16, 262216, 10, 5, 24, 327752, 10, 5, 35, 20, 262216, 10, 6, 24, 327752, 10, 6, 35, 24, 262216, 10, 7, 24, 327752, 10, 7, 35, 28, 262216, 10, 8, 24, 327752, 10, 8, 35, 32, 262216, 10, 9, 24, 327752, 10, 9, 35, 36, 262216, 10, 10, 24, 327752, 10, 10, 35, 40, 196679, 10, 3, 262215, 12, 34, 0, 262215, 12, 33, 4, 262215, 63, 11, 28, 262215, 100, 6, 4, 262216, 101, 0, 24, 327752, 101, 0, 35, 0, 196679, 101, 3, 262215, 103, 34, 0, 262215, 103, 33, 0, 262215, 113, 6, 4, 262216, 114, 0, 24, 327752, 114, 0, 35, 0, 196679, 114, 3, 262215, 116, 34, 0, 262215, 116, 33, 1, 262215, 131, 6, 4, 327752, 132, 0, 35, 0, 196679, 132, 3, 262215, 134, 34, 0, 262215, 134, 33, 3, 262215, 143, 6, 4, 262216, 144, 0, 24, 327752, 144, 0, 35, 0, 196679, 144, 3, 262215, 146, 34, 0, 262215, 146, 33, 2, 262215, 166, 11, 25, 131091, 2, 196641, 3, 2, 262165, 6, 32, 0, 262176, 7, 7, 6, 196630, 9, 32, 851998, 10, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 262176, 11, 2, 10, 262203, 11, 12, 2, 262165, 13, 32, 1, 262187, 13, 14, 0, 262176, 15, 2, 6, 262187, 13, 19, 1, 262187, 13, 23, 2, 262187, 13, 27, 3, 262187, 13, 31, 4, 262187, 13, 35, 5, 262187, 13, 39, 6, 262187, 13, 43, 7, 262187, 13, 47, 8, 262176, 50, 7, 9, 262187, 13, 52, 9, 262176, 53, 2, 9, 262187, 13, 57, 10, 262167, 61, 6, 3, 262176, 62, 1, 61, 262203, 62, 63, 1, 262187, 6, 64, 0, 262176, 65, 1, 6, 131092, 75, 262187, 6, 78, 1, 262187, 9, 90, 0, 196637, 100, 9, 196638, 101, 100, 262176, 102, 2, 101, 262203, 102, 103, 2, 196637, 113, 9, 196638, 114, 113, 262176, 115, 2, 114, 262203, 115, 116, 2, 196637, 131, 9, 196638, 132, 131, 262176, 133, 2, 132, 262203, 133, 134, 2, 196637, 143, 9, 196638, 144, 143, 262176, 145, 2, 144, 262203, 145, 146, 2, 262187, 6, 160, 256, 262187, 6, 165, 8, 393260, 61, 166, 165, 165, 78, 327734, 2, 4, 0, 3, 131320, 5, 262203, 7, 8, 7, 262203, 7, 18, 7, 262203, 7, 22, 7, 262203, 7, 26, 7, 262203, 7, 30, 7, 262203, 7, 34, 7, 262203, 7, 38, 7, 262203, 7, 42, 7, 262203, 7, 46, 7, 262203, 50, 51, 7, 262203, 50, 56, 7, 262203, 7, 60, 7, 262203, 7, 77, 7, 262203, 50, 89, 7, 262203, 7, 91, 7, 327745, 15, 16, 12, 14, 262205, 6, 17, 16, 196670, 8, 17, 327745, 15, 20, 12, 19, 262205, 6, 21, 20, 196670, 18, 21, 327745, 15, 24, 12, 23, 262205, 6, 25, 24, 196670, 22, 25, 327745, 15, 28, 12, 27, 262205, 6, 29, 28, 196670, 26, 29, 327745, 15, 32, 12, 31, 262205, 6, 33, 32, 196670, 30, 33, 327745, 15, 36, 12, 35, 262205, 6, 37, 36, 196670, 34, 37, 327745, 15, 40, 12, 39, 262205, 6, 41, 40, 196670, 38, 41, 327745, 15, 44, 12, 43, 262205, 6, 45, 44, 196670, 42, 45, 327745, 15, 48, 12, 47, 262205, 6, 49, 48, 196670, 46, 49, 327745, 53, 54, 12, 52, 262205, 9, 55, 54, 196670, 51, 55, 327745, 53, 58, 12, 57, 262205, 9, 59, 58, 196670, 56, 59, 327745, 65, 66, 63, 64, 262205, 6, 67, 66, 196670, 60, 67, 131321, 68, 131320, 68, 262390, 70, 71, 0, 131321, 72, 131320, 72, 262205, 6, 73, 60, 262205, 6, 74, 18, 327856, 75, 76, 73, 74, 262394, 76, 69, 70, 131320, 69, 327745, 65, 79, 63, 78, 262205, 6, 80, 79, 196670, 77, 80, 131321, 81, 131320, 81, 262390, 83, 84, 0, 131321, 85, 131320, 85, 262205, 6, 86, 77, 262205, 6, 87, 8, 327856, 75, 88, 86, 87, 262394, 88, 82, 83, 131320, 82, 196670, 89, 90, 196670, 91, 64, 131321, 92, 131320, 92, 262390, 94, 95, 0, 131321, 96, 131320, 96, 262205, 6, 97, 91, 262205, 6, 98, 22, 327856, 75, 99, 97, 98, 262394, 99, 93, 94, 131320, 93, 262205, 6, 104, 77, 262205, 6, 105, 26, 327812, 6, 106, 104, 105, 262205, 6, 107, 91, 262205, 6, 108, 30, 327812, 6, 109, 107, 108, 327808, 6, 110, 106, 109, 393281, 53, 111, 103, 14, 110, 262205, 9, 112, 111, 262205, 6, 117, 91, 262205, 6, 118, 34, 327812, 6, 119, 117, 118, 262205, 6, 120, 60, 262205, 6, 121, 38, 327812, 6, 122, 120, 121, 327808, 6, 123, 119, 122, 393281, 53, 124, 116, 14, 123, 262205, 9, 125, 124, 327813, 9, 126, 112, 125, 262205, 9, 127, 89, 327809, 9, 128, 127, 126, 196670, 89, 128, 131321, 95, 131320, 95, 262205, 6, 129, 91, 327808, 6, 130, 129, 19, 196670, 91, 130, 131321, 92, 131320, 94, 262205, 6, 135, 60, 262205, 6, 136, 77, 262205, 6, 137, 18, 327812, 6, 138, 136, 137, 327808, 6, 139, 135, 138, 262205, 9, 140, 89, 262205, 9, 141, 51, 327813, 9, 142, 140, 141, 262205, 6, 147, 77, 262205, 6, 148, 42, 327812, 6, 149, 147, 148, 262205, 6, 150, 60, 262205, 6, 151, 46, 327812, 6, 152, 150, 151, 327808, 6, 153, 149, 152, 393281, 53, 154, 146, 14, 153, 262205, 9, 155, 154, 262205, 9, 156, 56, 327813, 9, 157, 155, 156, 327809, 9, 158, 142, 157, 393281, 53, 159, 134, 14, 139, 196670, 159, 158, 131321, 84, 131320, 84, 262205, 6, 161, 77, 327808, 6, 162, 161, 160, 196670, 77, 162, 131321, 81, 131320, 83, 131321, 71, 131320, 71, 262205, 6, 163, 60, 327808, 6, 164, 163, 160, 196670, 60, 164, 131321, 68, 131320, 70, 65789, 65592]),\n    relu: new Uint32Array([119734787, 65536, 524296, 57, 0, 131089, 1, 393227, 1, 1280527431, 1685353262, 808793134, 0, 196622, 0, 1, 393231, 5, 4, 1852399981, 0, 20, 393232, 4, 17, 64, 1, 1, 196611, 2, 450, 262149, 4, 1852399981, 0, 196613, 8, 7234924, 262149, 9, 1635018061, 0, 262150, 9, 0, 7234924, 262149, 11, 1635018093, 0, 196613, 17, 105, 524293, 20, 1197436007, 1633841004, 1986939244, 1952539503, 1231974249, 68, 262149, 36, 1634890337, 17017, 327686, 36, 0, 1651340654, 7565925, 262149, 38, 1634890337, 6446969, 262149, 41, 1634890337, 16761, 327686, 41, 0, 1651340654, 7565925, 262149, 43, 1634890337, 6381433, 262216, 9, 0, 24, 327752, 9, 0, 35, 0, 196679, 9, 3, 262215, 11, 34, 0, 262215, 11, 33, 2, 262215, 20, 11, 28, 262215, 35, 6, 4, 327752, 36, 0, 35, 0, 196679, 36, 3, 262215, 38, 34, 0, 262215, 38, 33, 1, 262215, 40, 6, 4, 262216, 41, 0, 24, 327752, 41, 0, 35, 0, 196679, 41, 3, 262215, 43, 34, 0, 262215, 43, 33, 0, 262215, 56, 11, 25, 131091, 2, 196641, 3, 2, 262165, 6, 32, 0, 262176, 7, 7, 6, 196638, 9, 6, 262176, 10, 2, 9, 262203, 10, 11, 2, 262165, 12, 32, 1, 262187, 12, 13, 0, 262176, 14, 2, 6, 262167, 18, 6, 3, 262176, 19, 1, 18, 262203, 19, 20, 1, 262187, 6, 21, 0, 262176, 22, 1, 6, 131092, 32, 196630, 34, 32, 196637, 35, 34, 196638, 36, 35, 262176, 37, 2, 36, 262203, 37, 38, 2, 196637, 40, 34, 196638, 41, 40, 262176, 42, 2, 41, 262203, 42, 43, 2, 262176, 45, 2, 34, 262187, 34, 48, 0, 262187, 6, 51, 4096, 262187, 6, 54, 64, 262187, 6, 55, 1, 393260, 18, 56, 54, 55, 55, 327734, 2, 4, 0, 3, 131320, 5, 262203, 7, 8, 7, 262203, 7, 17, 7, 327745, 14, 15, 11, 13, 262205, 6, 16, 15, 196670, 8, 16, 327745, 22, 23, 20, 21, 262205, 6, 24, 23, 196670, 17, 24, 131321, 25, 131320, 25, 262390, 27, 28, 0, 131321, 29, 131320, 29, 262205, 6, 30, 17, 262205, 6, 31, 8, 327856, 32, 33, 30, 31, 262394, 33, 26, 27, 131320, 26, 262205, 6, 39, 17, 262205, 6, 44, 17, 393281, 45, 46, 43, 13, 44, 262205, 34, 47, 46, 458764, 34, 49, 1, 40, 47, 48, 393281, 45, 50, 38, 13, 39, 196670, 50, 49, 131321, 28, 131320, 28, 262205, 6, 52, 17, 327808, 6, 53, 52, 51, 196670, 17, 53, 131321, 25, 131320, 27, 65789, 65592]),\n};\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/operators/webgpu/shaders.ts?");

/***/ }),

/***/ "./src/descriptor_runner/util.ts":
/*!***************************************!*\
  !*** ./src/descriptor_runner/util.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.intOrLongToIntVector = exports.intOrLongToInt = exports.clipLong = exports.arrayEqual = exports.arrayProd = exports.arraySum = exports.arange = exports.nonnull = void 0;\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"./node_modules/long/src/long.js\"));\nfunction nonnull(value) {\n    if (value != null) {\n        return value;\n    }\n    throw new Error(\"value is null\");\n}\nexports.nonnull = nonnull;\nfunction arange(start, stop, step = 1) {\n    if (stop == null) {\n        const len = start;\n        const array = new Array(len);\n        for (let i = 0; i < len; i++) {\n            array[i] = i;\n        }\n        return array;\n    }\n    else {\n        const array = [];\n        if (step > 0) {\n            for (let i = start; i < stop; i += step) {\n                array.push(i);\n            }\n        }\n        else {\n            for (let i = start; i > stop; i += step) {\n                array.push(i);\n            }\n        }\n        return array;\n    }\n}\nexports.arange = arange;\nfunction arraySum(vec) {\n    let x = 0;\n    for (let i = 0; i < vec.length; i++) {\n        x += vec[i];\n    }\n    return x;\n}\nexports.arraySum = arraySum;\nfunction arrayProd(vec) {\n    let x = 1;\n    for (let i = 0; i < vec.length; i++) {\n        x *= vec[i];\n    }\n    return x;\n}\nexports.arrayProd = arrayProd;\nfunction arrayEqual(vec1, vec2) {\n    if (vec1.length !== vec2.length) {\n        return false;\n    }\n    for (let i = 0; i < vec1.length; i++) {\n        if (vec1[i] !== vec2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.arrayEqual = arrayEqual;\nconst longPositive32BitMax = new long_1.default(0x7fffffff, 0), longPositive32BitMin = new long_1.default(0x80000000, 0xffffffff);\n// 符号付きLongを丸めて、-2^31から2^31-1の範囲のnumberを返す\nfunction clipLong(v) {\n    // Long(0xfffffff6, 0xffffffff) => -10\n    if (v.lessThan(longPositive32BitMin)) {\n        return -0x80000000;\n    }\n    else if (v.greaterThan(longPositive32BitMax)) {\n        return 0x7fffffff;\n    }\n    return v.toNumber();\n}\nexports.clipLong = clipLong;\nfunction intOrLongToInt(v) {\n    if (v instanceof long_1.default) {\n        return clipLong(v);\n    }\n    return v;\n}\nexports.intOrLongToInt = intOrLongToInt;\nfunction intOrLongToIntVector(v) {\n    return v.map(intOrLongToInt);\n}\nexports.intOrLongToIntVector = intOrLongToIntVector;\n\n\n//# sourceURL=webpack://WebDNN/./src/descriptor_runner/util.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/descriptor_runner/index.ts");
/******/ 	WebDNN = __webpack_exports__;
/******/ 	
/******/ })()
;